//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1378
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace EditStealthImageXML {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("DeviceImagesDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DeviceImagesDS : global::System.Data.DataSet {
        
        private KeysDataTable tableKeys;
        
        private StandardMacrosDataTable tableStandardMacros;
        
        private MacroStepsDataTable tableMacroSteps;
        
        private ActivityLabelsDataTable tableActivityLabels;
        
        private LabelsTableDataTable tableLabelsTable;
        
        private SoftKeyLabelTableDataTable tableSoftKeyLabelTable;
        
        private SoftKeyEntriesDataTable tableSoftKeyEntries;
        
        private FavoriteKeyChannelTableDataTable tableFavoriteKeyChannelTable;
        
        private FavoriteKeyEntriesDataTable tableFavoriteKeyEntries;
        
        private FavoriteKeyLabelsDataTable tableFavoriteKeyLabels;
        
        private LearnedKeysTableDataTable tableLearnedKeysTable;
        
        private LearnedKeyEntriesDataTable tableLearnedKeyEntries;
        
        private DevicesDataTable tableDevices;
        
        private ExecutorsDataTable tableExecutors;
        
        private PrefixesDataTable tablePrefixes;
        
        private KeyIRsDataTable tableKeyIRs;
        
        private ModesDataTable tableModes;
        
        private LCDSetupDataTable tableLCDSetup;
        
        private TimersSetupDataTable tableTimersSetup;
        
        private SIORegistryDataTable tableSIORegistry;
        
        private KeyMoverDataTable tableKeyMover;
        
        private SynthMoverDataTable tableSynthMover;
        
        private PunchThruTableDataTable tablePunchThruTable;
        
        private PunchThruEntriesDataTable tablePunchThruEntries;
        
        private QuickSearchTableDataTable tableQuickSearchTable;
        
        private QuickSearchEntriesDataTable tableQuickSearchEntries;
        
        private global::System.Data.DataRelation relationKeysToKeysIR;
        
        private global::System.Data.DataRelation relationDevicesToExecutors;
        
        private global::System.Data.DataRelation relationDevicesToPrefixes;
        
        private global::System.Data.DataRelation relationDevices_Keys;
        
        private global::System.Data.DataRelation relationStandardMacros_MacroSteps;
        
        private global::System.Data.DataRelation relationActivityLabels_LabelsTable;
        
        private global::System.Data.DataRelation relationFavoriteKeyChannelTable_FavoriteKeyEntries;
        
        private global::System.Data.DataRelation relationFavoriteKeyChannelTable_FavoriteKeyLabels;
        
        private global::System.Data.DataRelation relationLearnedKeysTable_LearnedKeyEntries;
        
        private global::System.Data.DataRelation relationSoftKeyLabelTable_SoftKeyEntries;
        
        private global::System.Data.DataRelation relationPunchThruTable_PunchThruEntries;
        
        private global::System.Data.DataRelation relationQuickSearchTable_QuickSearchEntries;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DeviceImagesDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DeviceImagesDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Keys"] != null)) {
                    base.Tables.Add(new KeysDataTable(ds.Tables["Keys"]));
                }
                if ((ds.Tables["StandardMacros"] != null)) {
                    base.Tables.Add(new StandardMacrosDataTable(ds.Tables["StandardMacros"]));
                }
                if ((ds.Tables["MacroSteps"] != null)) {
                    base.Tables.Add(new MacroStepsDataTable(ds.Tables["MacroSteps"]));
                }
                if ((ds.Tables["ActivityLabels"] != null)) {
                    base.Tables.Add(new ActivityLabelsDataTable(ds.Tables["ActivityLabels"]));
                }
                if ((ds.Tables["LabelsTable"] != null)) {
                    base.Tables.Add(new LabelsTableDataTable(ds.Tables["LabelsTable"]));
                }
                if ((ds.Tables["SoftKeyLabelTable"] != null)) {
                    base.Tables.Add(new SoftKeyLabelTableDataTable(ds.Tables["SoftKeyLabelTable"]));
                }
                if ((ds.Tables["SoftKeyEntries"] != null)) {
                    base.Tables.Add(new SoftKeyEntriesDataTable(ds.Tables["SoftKeyEntries"]));
                }
                if ((ds.Tables["FavoriteKeyChannelTable"] != null)) {
                    base.Tables.Add(new FavoriteKeyChannelTableDataTable(ds.Tables["FavoriteKeyChannelTable"]));
                }
                if ((ds.Tables["FavoriteKeyEntries"] != null)) {
                    base.Tables.Add(new FavoriteKeyEntriesDataTable(ds.Tables["FavoriteKeyEntries"]));
                }
                if ((ds.Tables["FavoriteKeyLabels"] != null)) {
                    base.Tables.Add(new FavoriteKeyLabelsDataTable(ds.Tables["FavoriteKeyLabels"]));
                }
                if ((ds.Tables["LearnedKeysTable"] != null)) {
                    base.Tables.Add(new LearnedKeysTableDataTable(ds.Tables["LearnedKeysTable"]));
                }
                if ((ds.Tables["LearnedKeyEntries"] != null)) {
                    base.Tables.Add(new LearnedKeyEntriesDataTable(ds.Tables["LearnedKeyEntries"]));
                }
                if ((ds.Tables["Devices"] != null)) {
                    base.Tables.Add(new DevicesDataTable(ds.Tables["Devices"]));
                }
                if ((ds.Tables["Executors"] != null)) {
                    base.Tables.Add(new ExecutorsDataTable(ds.Tables["Executors"]));
                }
                if ((ds.Tables["Prefixes"] != null)) {
                    base.Tables.Add(new PrefixesDataTable(ds.Tables["Prefixes"]));
                }
                if ((ds.Tables["KeyIRs"] != null)) {
                    base.Tables.Add(new KeyIRsDataTable(ds.Tables["KeyIRs"]));
                }
                if ((ds.Tables["Modes"] != null)) {
                    base.Tables.Add(new ModesDataTable(ds.Tables["Modes"]));
                }
                if ((ds.Tables["LCDSetup"] != null)) {
                    base.Tables.Add(new LCDSetupDataTable(ds.Tables["LCDSetup"]));
                }
                if ((ds.Tables["TimersSetup"] != null)) {
                    base.Tables.Add(new TimersSetupDataTable(ds.Tables["TimersSetup"]));
                }
                if ((ds.Tables["SIORegistry"] != null)) {
                    base.Tables.Add(new SIORegistryDataTable(ds.Tables["SIORegistry"]));
                }
                if ((ds.Tables["KeyMover"] != null)) {
                    base.Tables.Add(new KeyMoverDataTable(ds.Tables["KeyMover"]));
                }
                if ((ds.Tables["SynthMover"] != null)) {
                    base.Tables.Add(new SynthMoverDataTable(ds.Tables["SynthMover"]));
                }
                if ((ds.Tables["PunchThruTable"] != null)) {
                    base.Tables.Add(new PunchThruTableDataTable(ds.Tables["PunchThruTable"]));
                }
                if ((ds.Tables["PunchThruEntries"] != null)) {
                    base.Tables.Add(new PunchThruEntriesDataTable(ds.Tables["PunchThruEntries"]));
                }
                if ((ds.Tables["QuickSearchTable"] != null)) {
                    base.Tables.Add(new QuickSearchTableDataTable(ds.Tables["QuickSearchTable"]));
                }
                if ((ds.Tables["QuickSearchEntries"] != null)) {
                    base.Tables.Add(new QuickSearchEntriesDataTable(ds.Tables["QuickSearchEntries"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public KeysDataTable Keys {
            get {
                return this.tableKeys;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StandardMacrosDataTable StandardMacros {
            get {
                return this.tableStandardMacros;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MacroStepsDataTable MacroSteps {
            get {
                return this.tableMacroSteps;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ActivityLabelsDataTable ActivityLabels {
            get {
                return this.tableActivityLabels;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LabelsTableDataTable LabelsTable {
            get {
                return this.tableLabelsTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SoftKeyLabelTableDataTable SoftKeyLabelTable {
            get {
                return this.tableSoftKeyLabelTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SoftKeyEntriesDataTable SoftKeyEntries {
            get {
                return this.tableSoftKeyEntries;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FavoriteKeyChannelTableDataTable FavoriteKeyChannelTable {
            get {
                return this.tableFavoriteKeyChannelTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FavoriteKeyEntriesDataTable FavoriteKeyEntries {
            get {
                return this.tableFavoriteKeyEntries;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FavoriteKeyLabelsDataTable FavoriteKeyLabels {
            get {
                return this.tableFavoriteKeyLabels;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LearnedKeysTableDataTable LearnedKeysTable {
            get {
                return this.tableLearnedKeysTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LearnedKeyEntriesDataTable LearnedKeyEntries {
            get {
                return this.tableLearnedKeyEntries;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DevicesDataTable Devices {
            get {
                return this.tableDevices;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ExecutorsDataTable Executors {
            get {
                return this.tableExecutors;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PrefixesDataTable Prefixes {
            get {
                return this.tablePrefixes;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public KeyIRsDataTable KeyIRs {
            get {
                return this.tableKeyIRs;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ModesDataTable Modes {
            get {
                return this.tableModes;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LCDSetupDataTable LCDSetup {
            get {
                return this.tableLCDSetup;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TimersSetupDataTable TimersSetup {
            get {
                return this.tableTimersSetup;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SIORegistryDataTable SIORegistry {
            get {
                return this.tableSIORegistry;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public KeyMoverDataTable KeyMover {
            get {
                return this.tableKeyMover;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SynthMoverDataTable SynthMover {
            get {
                return this.tableSynthMover;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PunchThruTableDataTable PunchThruTable {
            get {
                return this.tablePunchThruTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PunchThruEntriesDataTable PunchThruEntries {
            get {
                return this.tablePunchThruEntries;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public QuickSearchTableDataTable QuickSearchTable {
            get {
                return this.tableQuickSearchTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public QuickSearchEntriesDataTable QuickSearchEntries {
            get {
                return this.tableQuickSearchEntries;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            DeviceImagesDS cln = ((DeviceImagesDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Keys"] != null)) {
                    base.Tables.Add(new KeysDataTable(ds.Tables["Keys"]));
                }
                if ((ds.Tables["StandardMacros"] != null)) {
                    base.Tables.Add(new StandardMacrosDataTable(ds.Tables["StandardMacros"]));
                }
                if ((ds.Tables["MacroSteps"] != null)) {
                    base.Tables.Add(new MacroStepsDataTable(ds.Tables["MacroSteps"]));
                }
                if ((ds.Tables["ActivityLabels"] != null)) {
                    base.Tables.Add(new ActivityLabelsDataTable(ds.Tables["ActivityLabels"]));
                }
                if ((ds.Tables["LabelsTable"] != null)) {
                    base.Tables.Add(new LabelsTableDataTable(ds.Tables["LabelsTable"]));
                }
                if ((ds.Tables["SoftKeyLabelTable"] != null)) {
                    base.Tables.Add(new SoftKeyLabelTableDataTable(ds.Tables["SoftKeyLabelTable"]));
                }
                if ((ds.Tables["SoftKeyEntries"] != null)) {
                    base.Tables.Add(new SoftKeyEntriesDataTable(ds.Tables["SoftKeyEntries"]));
                }
                if ((ds.Tables["FavoriteKeyChannelTable"] != null)) {
                    base.Tables.Add(new FavoriteKeyChannelTableDataTable(ds.Tables["FavoriteKeyChannelTable"]));
                }
                if ((ds.Tables["FavoriteKeyEntries"] != null)) {
                    base.Tables.Add(new FavoriteKeyEntriesDataTable(ds.Tables["FavoriteKeyEntries"]));
                }
                if ((ds.Tables["FavoriteKeyLabels"] != null)) {
                    base.Tables.Add(new FavoriteKeyLabelsDataTable(ds.Tables["FavoriteKeyLabels"]));
                }
                if ((ds.Tables["LearnedKeysTable"] != null)) {
                    base.Tables.Add(new LearnedKeysTableDataTable(ds.Tables["LearnedKeysTable"]));
                }
                if ((ds.Tables["LearnedKeyEntries"] != null)) {
                    base.Tables.Add(new LearnedKeyEntriesDataTable(ds.Tables["LearnedKeyEntries"]));
                }
                if ((ds.Tables["Devices"] != null)) {
                    base.Tables.Add(new DevicesDataTable(ds.Tables["Devices"]));
                }
                if ((ds.Tables["Executors"] != null)) {
                    base.Tables.Add(new ExecutorsDataTable(ds.Tables["Executors"]));
                }
                if ((ds.Tables["Prefixes"] != null)) {
                    base.Tables.Add(new PrefixesDataTable(ds.Tables["Prefixes"]));
                }
                if ((ds.Tables["KeyIRs"] != null)) {
                    base.Tables.Add(new KeyIRsDataTable(ds.Tables["KeyIRs"]));
                }
                if ((ds.Tables["Modes"] != null)) {
                    base.Tables.Add(new ModesDataTable(ds.Tables["Modes"]));
                }
                if ((ds.Tables["LCDSetup"] != null)) {
                    base.Tables.Add(new LCDSetupDataTable(ds.Tables["LCDSetup"]));
                }
                if ((ds.Tables["TimersSetup"] != null)) {
                    base.Tables.Add(new TimersSetupDataTable(ds.Tables["TimersSetup"]));
                }
                if ((ds.Tables["SIORegistry"] != null)) {
                    base.Tables.Add(new SIORegistryDataTable(ds.Tables["SIORegistry"]));
                }
                if ((ds.Tables["KeyMover"] != null)) {
                    base.Tables.Add(new KeyMoverDataTable(ds.Tables["KeyMover"]));
                }
                if ((ds.Tables["SynthMover"] != null)) {
                    base.Tables.Add(new SynthMoverDataTable(ds.Tables["SynthMover"]));
                }
                if ((ds.Tables["PunchThruTable"] != null)) {
                    base.Tables.Add(new PunchThruTableDataTable(ds.Tables["PunchThruTable"]));
                }
                if ((ds.Tables["PunchThruEntries"] != null)) {
                    base.Tables.Add(new PunchThruEntriesDataTable(ds.Tables["PunchThruEntries"]));
                }
                if ((ds.Tables["QuickSearchTable"] != null)) {
                    base.Tables.Add(new QuickSearchTableDataTable(ds.Tables["QuickSearchTable"]));
                }
                if ((ds.Tables["QuickSearchEntries"] != null)) {
                    base.Tables.Add(new QuickSearchEntriesDataTable(ds.Tables["QuickSearchEntries"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableKeys = ((KeysDataTable)(base.Tables["Keys"]));
            if ((initTable == true)) {
                if ((this.tableKeys != null)) {
                    this.tableKeys.InitVars();
                }
            }
            this.tableStandardMacros = ((StandardMacrosDataTable)(base.Tables["StandardMacros"]));
            if ((initTable == true)) {
                if ((this.tableStandardMacros != null)) {
                    this.tableStandardMacros.InitVars();
                }
            }
            this.tableMacroSteps = ((MacroStepsDataTable)(base.Tables["MacroSteps"]));
            if ((initTable == true)) {
                if ((this.tableMacroSteps != null)) {
                    this.tableMacroSteps.InitVars();
                }
            }
            this.tableActivityLabels = ((ActivityLabelsDataTable)(base.Tables["ActivityLabels"]));
            if ((initTable == true)) {
                if ((this.tableActivityLabels != null)) {
                    this.tableActivityLabels.InitVars();
                }
            }
            this.tableLabelsTable = ((LabelsTableDataTable)(base.Tables["LabelsTable"]));
            if ((initTable == true)) {
                if ((this.tableLabelsTable != null)) {
                    this.tableLabelsTable.InitVars();
                }
            }
            this.tableSoftKeyLabelTable = ((SoftKeyLabelTableDataTable)(base.Tables["SoftKeyLabelTable"]));
            if ((initTable == true)) {
                if ((this.tableSoftKeyLabelTable != null)) {
                    this.tableSoftKeyLabelTable.InitVars();
                }
            }
            this.tableSoftKeyEntries = ((SoftKeyEntriesDataTable)(base.Tables["SoftKeyEntries"]));
            if ((initTable == true)) {
                if ((this.tableSoftKeyEntries != null)) {
                    this.tableSoftKeyEntries.InitVars();
                }
            }
            this.tableFavoriteKeyChannelTable = ((FavoriteKeyChannelTableDataTable)(base.Tables["FavoriteKeyChannelTable"]));
            if ((initTable == true)) {
                if ((this.tableFavoriteKeyChannelTable != null)) {
                    this.tableFavoriteKeyChannelTable.InitVars();
                }
            }
            this.tableFavoriteKeyEntries = ((FavoriteKeyEntriesDataTable)(base.Tables["FavoriteKeyEntries"]));
            if ((initTable == true)) {
                if ((this.tableFavoriteKeyEntries != null)) {
                    this.tableFavoriteKeyEntries.InitVars();
                }
            }
            this.tableFavoriteKeyLabels = ((FavoriteKeyLabelsDataTable)(base.Tables["FavoriteKeyLabels"]));
            if ((initTable == true)) {
                if ((this.tableFavoriteKeyLabels != null)) {
                    this.tableFavoriteKeyLabels.InitVars();
                }
            }
            this.tableLearnedKeysTable = ((LearnedKeysTableDataTable)(base.Tables["LearnedKeysTable"]));
            if ((initTable == true)) {
                if ((this.tableLearnedKeysTable != null)) {
                    this.tableLearnedKeysTable.InitVars();
                }
            }
            this.tableLearnedKeyEntries = ((LearnedKeyEntriesDataTable)(base.Tables["LearnedKeyEntries"]));
            if ((initTable == true)) {
                if ((this.tableLearnedKeyEntries != null)) {
                    this.tableLearnedKeyEntries.InitVars();
                }
            }
            this.tableDevices = ((DevicesDataTable)(base.Tables["Devices"]));
            if ((initTable == true)) {
                if ((this.tableDevices != null)) {
                    this.tableDevices.InitVars();
                }
            }
            this.tableExecutors = ((ExecutorsDataTable)(base.Tables["Executors"]));
            if ((initTable == true)) {
                if ((this.tableExecutors != null)) {
                    this.tableExecutors.InitVars();
                }
            }
            this.tablePrefixes = ((PrefixesDataTable)(base.Tables["Prefixes"]));
            if ((initTable == true)) {
                if ((this.tablePrefixes != null)) {
                    this.tablePrefixes.InitVars();
                }
            }
            this.tableKeyIRs = ((KeyIRsDataTable)(base.Tables["KeyIRs"]));
            if ((initTable == true)) {
                if ((this.tableKeyIRs != null)) {
                    this.tableKeyIRs.InitVars();
                }
            }
            this.tableModes = ((ModesDataTable)(base.Tables["Modes"]));
            if ((initTable == true)) {
                if ((this.tableModes != null)) {
                    this.tableModes.InitVars();
                }
            }
            this.tableLCDSetup = ((LCDSetupDataTable)(base.Tables["LCDSetup"]));
            if ((initTable == true)) {
                if ((this.tableLCDSetup != null)) {
                    this.tableLCDSetup.InitVars();
                }
            }
            this.tableTimersSetup = ((TimersSetupDataTable)(base.Tables["TimersSetup"]));
            if ((initTable == true)) {
                if ((this.tableTimersSetup != null)) {
                    this.tableTimersSetup.InitVars();
                }
            }
            this.tableSIORegistry = ((SIORegistryDataTable)(base.Tables["SIORegistry"]));
            if ((initTable == true)) {
                if ((this.tableSIORegistry != null)) {
                    this.tableSIORegistry.InitVars();
                }
            }
            this.tableKeyMover = ((KeyMoverDataTable)(base.Tables["KeyMover"]));
            if ((initTable == true)) {
                if ((this.tableKeyMover != null)) {
                    this.tableKeyMover.InitVars();
                }
            }
            this.tableSynthMover = ((SynthMoverDataTable)(base.Tables["SynthMover"]));
            if ((initTable == true)) {
                if ((this.tableSynthMover != null)) {
                    this.tableSynthMover.InitVars();
                }
            }
            this.tablePunchThruTable = ((PunchThruTableDataTable)(base.Tables["PunchThruTable"]));
            if ((initTable == true)) {
                if ((this.tablePunchThruTable != null)) {
                    this.tablePunchThruTable.InitVars();
                }
            }
            this.tablePunchThruEntries = ((PunchThruEntriesDataTable)(base.Tables["PunchThruEntries"]));
            if ((initTable == true)) {
                if ((this.tablePunchThruEntries != null)) {
                    this.tablePunchThruEntries.InitVars();
                }
            }
            this.tableQuickSearchTable = ((QuickSearchTableDataTable)(base.Tables["QuickSearchTable"]));
            if ((initTable == true)) {
                if ((this.tableQuickSearchTable != null)) {
                    this.tableQuickSearchTable.InitVars();
                }
            }
            this.tableQuickSearchEntries = ((QuickSearchEntriesDataTable)(base.Tables["QuickSearchEntries"]));
            if ((initTable == true)) {
                if ((this.tableQuickSearchEntries != null)) {
                    this.tableQuickSearchEntries.InitVars();
                }
            }
            this.relationKeysToKeysIR = this.Relations["KeysToKeysIR"];
            this.relationDevicesToExecutors = this.Relations["DevicesToExecutors"];
            this.relationDevicesToPrefixes = this.Relations["DevicesToPrefixes"];
            this.relationDevices_Keys = this.Relations["Devices_Keys"];
            this.relationStandardMacros_MacroSteps = this.Relations["StandardMacros_MacroSteps"];
            this.relationActivityLabels_LabelsTable = this.Relations["ActivityLabels_LabelsTable"];
            this.relationFavoriteKeyChannelTable_FavoriteKeyEntries = this.Relations["FavoriteKeyChannelTable_FavoriteKeyEntries"];
            this.relationFavoriteKeyChannelTable_FavoriteKeyLabels = this.Relations["FavoriteKeyChannelTable_FavoriteKeyLabels"];
            this.relationLearnedKeysTable_LearnedKeyEntries = this.Relations["LearnedKeysTable_LearnedKeyEntries"];
            this.relationSoftKeyLabelTable_SoftKeyEntries = this.Relations["SoftKeyLabelTable_SoftKeyEntries"];
            this.relationPunchThruTable_PunchThruEntries = this.Relations["PunchThruTable_PunchThruEntries"];
            this.relationQuickSearchTable_QuickSearchEntries = this.Relations["QuickSearchTable_QuickSearchEntries"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DeviceImagesDS";
            this.Prefix = "";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableKeys = new KeysDataTable();
            base.Tables.Add(this.tableKeys);
            this.tableStandardMacros = new StandardMacrosDataTable();
            base.Tables.Add(this.tableStandardMacros);
            this.tableMacroSteps = new MacroStepsDataTable();
            base.Tables.Add(this.tableMacroSteps);
            this.tableActivityLabels = new ActivityLabelsDataTable();
            base.Tables.Add(this.tableActivityLabels);
            this.tableLabelsTable = new LabelsTableDataTable();
            base.Tables.Add(this.tableLabelsTable);
            this.tableSoftKeyLabelTable = new SoftKeyLabelTableDataTable();
            base.Tables.Add(this.tableSoftKeyLabelTable);
            this.tableSoftKeyEntries = new SoftKeyEntriesDataTable();
            base.Tables.Add(this.tableSoftKeyEntries);
            this.tableFavoriteKeyChannelTable = new FavoriteKeyChannelTableDataTable();
            base.Tables.Add(this.tableFavoriteKeyChannelTable);
            this.tableFavoriteKeyEntries = new FavoriteKeyEntriesDataTable();
            base.Tables.Add(this.tableFavoriteKeyEntries);
            this.tableFavoriteKeyLabels = new FavoriteKeyLabelsDataTable();
            base.Tables.Add(this.tableFavoriteKeyLabels);
            this.tableLearnedKeysTable = new LearnedKeysTableDataTable();
            base.Tables.Add(this.tableLearnedKeysTable);
            this.tableLearnedKeyEntries = new LearnedKeyEntriesDataTable();
            base.Tables.Add(this.tableLearnedKeyEntries);
            this.tableDevices = new DevicesDataTable();
            base.Tables.Add(this.tableDevices);
            this.tableExecutors = new ExecutorsDataTable();
            base.Tables.Add(this.tableExecutors);
            this.tablePrefixes = new PrefixesDataTable();
            base.Tables.Add(this.tablePrefixes);
            this.tableKeyIRs = new KeyIRsDataTable();
            base.Tables.Add(this.tableKeyIRs);
            this.tableModes = new ModesDataTable();
            base.Tables.Add(this.tableModes);
            this.tableLCDSetup = new LCDSetupDataTable();
            base.Tables.Add(this.tableLCDSetup);
            this.tableTimersSetup = new TimersSetupDataTable();
            base.Tables.Add(this.tableTimersSetup);
            this.tableSIORegistry = new SIORegistryDataTable();
            base.Tables.Add(this.tableSIORegistry);
            this.tableKeyMover = new KeyMoverDataTable();
            base.Tables.Add(this.tableKeyMover);
            this.tableSynthMover = new SynthMoverDataTable();
            base.Tables.Add(this.tableSynthMover);
            this.tablePunchThruTable = new PunchThruTableDataTable();
            base.Tables.Add(this.tablePunchThruTable);
            this.tablePunchThruEntries = new PunchThruEntriesDataTable();
            base.Tables.Add(this.tablePunchThruEntries);
            this.tableQuickSearchTable = new QuickSearchTableDataTable();
            base.Tables.Add(this.tableQuickSearchTable);
            this.tableQuickSearchEntries = new QuickSearchEntriesDataTable();
            base.Tables.Add(this.tableQuickSearchEntries);
            this.relationKeysToKeysIR = new global::System.Data.DataRelation("KeysToKeysIR", new global::System.Data.DataColumn[] {
                        this.tableKeys.Key_fkColumn}, new global::System.Data.DataColumn[] {
                        this.tableKeyIRs.Key_fkColumn}, false);
            this.Relations.Add(this.relationKeysToKeysIR);
            this.relationDevicesToExecutors = new global::System.Data.DataRelation("DevicesToExecutors", new global::System.Data.DataColumn[] {
                        this.tableDevices.Executor_fkColumn}, new global::System.Data.DataColumn[] {
                        this.tableExecutors.Executor_fkColumn}, false);
            this.Relations.Add(this.relationDevicesToExecutors);
            this.relationDevicesToPrefixes = new global::System.Data.DataRelation("DevicesToPrefixes", new global::System.Data.DataColumn[] {
                        this.tableDevices.Prefix_fkColumn}, new global::System.Data.DataColumn[] {
                        this.tablePrefixes.Prefix_fkColumn}, false);
            this.Relations.Add(this.relationDevicesToPrefixes);
            this.relationDevices_Keys = new global::System.Data.DataRelation("Devices_Keys", new global::System.Data.DataColumn[] {
                        this.tableDevices.DBDevTypeColumn,
                        this.tableDevices.DBDevIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableKeys.DBDevTypeColumn,
                        this.tableKeys.DBDevIDColumn}, false);
            this.Relations.Add(this.relationDevices_Keys);
            this.relationStandardMacros_MacroSteps = new global::System.Data.DataRelation("StandardMacros_MacroSteps", new global::System.Data.DataColumn[] {
                        this.tableStandardMacros.Macro_fkColumn}, new global::System.Data.DataColumn[] {
                        this.tableMacroSteps.Macro_fkColumn}, false);
            this.Relations.Add(this.relationStandardMacros_MacroSteps);
            this.relationActivityLabels_LabelsTable = new global::System.Data.DataRelation("ActivityLabels_LabelsTable", new global::System.Data.DataColumn[] {
                        this.tableActivityLabels.ActivityLabel_fkColumn}, new global::System.Data.DataColumn[] {
                        this.tableLabelsTable.ActivityLabel_fkColumn}, false);
            this.Relations.Add(this.relationActivityLabels_LabelsTable);
            this.relationFavoriteKeyChannelTable_FavoriteKeyEntries = new global::System.Data.DataRelation("FavoriteKeyChannelTable_FavoriteKeyEntries", new global::System.Data.DataColumn[] {
                        this.tableFavoriteKeyChannelTable.FavoriteKeyEntries_fkColumn}, new global::System.Data.DataColumn[] {
                        this.tableFavoriteKeyEntries.FavoriteKeyEntries_fkColumn}, false);
            this.Relations.Add(this.relationFavoriteKeyChannelTable_FavoriteKeyEntries);
            this.relationFavoriteKeyChannelTable_FavoriteKeyLabels = new global::System.Data.DataRelation("FavoriteKeyChannelTable_FavoriteKeyLabels", new global::System.Data.DataColumn[] {
                        this.tableFavoriteKeyChannelTable.FavoriteKeyLabels_fkColumn}, new global::System.Data.DataColumn[] {
                        this.tableFavoriteKeyLabels.FavoriteKeyLabels_fkColumn}, false);
            this.Relations.Add(this.relationFavoriteKeyChannelTable_FavoriteKeyLabels);
            this.relationLearnedKeysTable_LearnedKeyEntries = new global::System.Data.DataRelation("LearnedKeysTable_LearnedKeyEntries", new global::System.Data.DataColumn[] {
                        this.tableLearnedKeysTable.LearnedKeyEntries_fkColumn}, new global::System.Data.DataColumn[] {
                        this.tableLearnedKeyEntries.LearnedKeyEntries_fkColumn}, false);
            this.Relations.Add(this.relationLearnedKeysTable_LearnedKeyEntries);
            this.relationSoftKeyLabelTable_SoftKeyEntries = new global::System.Data.DataRelation("SoftKeyLabelTable_SoftKeyEntries", new global::System.Data.DataColumn[] {
                        this.tableSoftKeyLabelTable.SoftKeyEntries_fkColumn}, new global::System.Data.DataColumn[] {
                        this.tableSoftKeyEntries.SoftKeyEntries_fkColumn}, false);
            this.Relations.Add(this.relationSoftKeyLabelTable_SoftKeyEntries);
            this.relationPunchThruTable_PunchThruEntries = new global::System.Data.DataRelation("PunchThruTable_PunchThruEntries", new global::System.Data.DataColumn[] {
                        this.tablePunchThruTable.PunchThruEntries_fkColumn}, new global::System.Data.DataColumn[] {
                        this.tablePunchThruEntries.PunchThruEntries_fkColumn}, false);
            this.Relations.Add(this.relationPunchThruTable_PunchThruEntries);
            this.relationQuickSearchTable_QuickSearchEntries = new global::System.Data.DataRelation("QuickSearchTable_QuickSearchEntries", new global::System.Data.DataColumn[] {
                        this.tableQuickSearchTable.QuickSearchEntries_fkColumn}, new global::System.Data.DataColumn[] {
                        this.tableQuickSearchEntries.QuickSearchEntries_fkColumn}, false);
            this.Relations.Add(this.relationQuickSearchTable_QuickSearchEntries);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeKeys() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeStandardMacros() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMacroSteps() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeActivityLabels() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLabelsTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSoftKeyLabelTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSoftKeyEntries() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFavoriteKeyChannelTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFavoriteKeyEntries() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFavoriteKeyLabels() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLearnedKeysTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLearnedKeyEntries() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDevices() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeExecutors() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePrefixes() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeKeyIRs() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeModes() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLCDSetup() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTimersSetup() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSIORegistry() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeKeyMover() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSynthMover() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePunchThruTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePunchThruEntries() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeQuickSearchTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeQuickSearchEntries() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            DeviceImagesDS ds = new DeviceImagesDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void KeysRowChangeEventHandler(object sender, KeysRowChangeEvent e);
        
        public delegate void StandardMacrosRowChangeEventHandler(object sender, StandardMacrosRowChangeEvent e);
        
        public delegate void MacroStepsRowChangeEventHandler(object sender, MacroStepsRowChangeEvent e);
        
        public delegate void ActivityLabelsRowChangeEventHandler(object sender, ActivityLabelsRowChangeEvent e);
        
        public delegate void LabelsTableRowChangeEventHandler(object sender, LabelsTableRowChangeEvent e);
        
        public delegate void SoftKeyLabelTableRowChangeEventHandler(object sender, SoftKeyLabelTableRowChangeEvent e);
        
        public delegate void SoftKeyEntriesRowChangeEventHandler(object sender, SoftKeyEntriesRowChangeEvent e);
        
        public delegate void FavoriteKeyChannelTableRowChangeEventHandler(object sender, FavoriteKeyChannelTableRowChangeEvent e);
        
        public delegate void FavoriteKeyEntriesRowChangeEventHandler(object sender, FavoriteKeyEntriesRowChangeEvent e);
        
        public delegate void FavoriteKeyLabelsRowChangeEventHandler(object sender, FavoriteKeyLabelsRowChangeEvent e);
        
        public delegate void LearnedKeysTableRowChangeEventHandler(object sender, LearnedKeysTableRowChangeEvent e);
        
        public delegate void LearnedKeyEntriesRowChangeEventHandler(object sender, LearnedKeyEntriesRowChangeEvent e);
        
        public delegate void DevicesRowChangeEventHandler(object sender, DevicesRowChangeEvent e);
        
        public delegate void ExecutorsRowChangeEventHandler(object sender, ExecutorsRowChangeEvent e);
        
        public delegate void PrefixesRowChangeEventHandler(object sender, PrefixesRowChangeEvent e);
        
        public delegate void KeyIRsRowChangeEventHandler(object sender, KeyIRsRowChangeEvent e);
        
        public delegate void ModesRowChangeEventHandler(object sender, ModesRowChangeEvent e);
        
        public delegate void LCDSetupRowChangeEventHandler(object sender, LCDSetupRowChangeEvent e);
        
        public delegate void TimersSetupRowChangeEventHandler(object sender, TimersSetupRowChangeEvent e);
        
        public delegate void SIORegistryRowChangeEventHandler(object sender, SIORegistryRowChangeEvent e);
        
        public delegate void KeyMoverRowChangeEventHandler(object sender, KeyMoverRowChangeEvent e);
        
        public delegate void SynthMoverRowChangeEventHandler(object sender, SynthMoverRowChangeEvent e);
        
        public delegate void PunchThruTableRowChangeEventHandler(object sender, PunchThruTableRowChangeEvent e);
        
        public delegate void PunchThruEntriesRowChangeEventHandler(object sender, PunchThruEntriesRowChangeEvent e);
        
        public delegate void QuickSearchTableRowChangeEventHandler(object sender, QuickSearchTableRowChangeEvent e);
        
        public delegate void QuickSearchEntriesRowChangeEventHandler(object sender, QuickSearchEntriesRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class KeysDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnDBDevType;
            
            private global::System.Data.DataColumn columnDBDevID;
            
            private global::System.Data.DataColumn columnMode;
            
            private global::System.Data.DataColumn columnKeyCd;
            
            private global::System.Data.DataColumn columnOutRon;
            
            private global::System.Data.DataColumn columnExecutorNumber;
            
            private global::System.Data.DataColumn columnGenericKeyId;
            
            private global::System.Data.DataColumn columnKey_fk;
            
            private global::System.Data.DataColumn columnActive;
            
            private global::System.Data.DataColumn columnUserLocked;
            
            private global::System.Data.DataColumn columnServiceLocked;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KeysDataTable() {
                this.TableName = "Keys";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal KeysDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected KeysDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DBDevTypeColumn {
                get {
                    return this.columnDBDevType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DBDevIDColumn {
                get {
                    return this.columnDBDevID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModeColumn {
                get {
                    return this.columnMode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KeyCdColumn {
                get {
                    return this.columnKeyCd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OutRonColumn {
                get {
                    return this.columnOutRon;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExecutorNumberColumn {
                get {
                    return this.columnExecutorNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GenericKeyIdColumn {
                get {
                    return this.columnGenericKeyId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Key_fkColumn {
                get {
                    return this.columnKey_fk;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActiveColumn {
                get {
                    return this.columnActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserLockedColumn {
                get {
                    return this.columnUserLocked;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ServiceLockedColumn {
                get {
                    return this.columnServiceLocked;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KeysRow this[int index] {
                get {
                    return ((KeysRow)(this.Rows[index]));
                }
            }
            
            public event KeysRowChangeEventHandler KeysRowChanging;
            
            public event KeysRowChangeEventHandler KeysRowChanged;
            
            public event KeysRowChangeEventHandler KeysRowDeleting;
            
            public event KeysRowChangeEventHandler KeysRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddKeysRow(KeysRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KeysRow AddKeysRow(byte DBDevType, ushort DBDevID, byte Mode, byte KeyCd, ushort OutRon, ushort ExecutorNumber, ushort GenericKeyId, bool Active, bool UserLocked, bool ServiceLocked) {
                KeysRow rowKeysRow = ((KeysRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        DBDevType,
                        DBDevID,
                        Mode,
                        KeyCd,
                        OutRon,
                        ExecutorNumber,
                        GenericKeyId,
                        null,
                        Active,
                        UserLocked,
                        ServiceLocked};
                rowKeysRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowKeysRow);
                return rowKeysRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KeysRow FindByDBDevTypeDBDevIDKeyCd(byte DBDevType, ushort DBDevID, byte KeyCd) {
                return ((KeysRow)(this.Rows.Find(new object[] {
                            DBDevType,
                            DBDevID,
                            KeyCd})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                KeysDataTable cln = ((KeysDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new KeysDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDBDevType = base.Columns["DBDevType"];
                this.columnDBDevID = base.Columns["DBDevID"];
                this.columnMode = base.Columns["Mode"];
                this.columnKeyCd = base.Columns["KeyCd"];
                this.columnOutRon = base.Columns["OutRon"];
                this.columnExecutorNumber = base.Columns["ExecutorNumber"];
                this.columnGenericKeyId = base.Columns["GenericKeyId"];
                this.columnKey_fk = base.Columns["Key_fk"];
                this.columnActive = base.Columns["Active"];
                this.columnUserLocked = base.Columns["UserLocked"];
                this.columnServiceLocked = base.Columns["ServiceLocked"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDBDevType = new global::System.Data.DataColumn("DBDevType", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDBDevType);
                this.columnDBDevID = new global::System.Data.DataColumn("DBDevID", typeof(ushort), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDBDevID);
                this.columnMode = new global::System.Data.DataColumn("Mode", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnMode);
                this.columnKeyCd = new global::System.Data.DataColumn("KeyCd", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnKeyCd);
                this.columnOutRon = new global::System.Data.DataColumn("OutRon", typeof(ushort), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnOutRon);
                this.columnExecutorNumber = new global::System.Data.DataColumn("ExecutorNumber", typeof(ushort), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnExecutorNumber);
                this.columnGenericKeyId = new global::System.Data.DataColumn("GenericKeyId", typeof(ushort), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnGenericKeyId);
                this.columnKey_fk = new global::System.Data.DataColumn("Key_fk", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnKey_fk);
                this.columnActive = new global::System.Data.DataColumn("Active", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnActive);
                this.columnUserLocked = new global::System.Data.DataColumn("UserLocked", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnUserLocked);
                this.columnServiceLocked = new global::System.Data.DataColumn("ServiceLocked", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnServiceLocked);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnDBDevType,
                                this.columnDBDevID,
                                this.columnKeyCd}, true));
                this.columnDBDevType.AllowDBNull = false;
                this.columnDBDevType.Namespace = "";
                this.columnDBDevType.DefaultValue = ((byte)(0));
                this.columnDBDevID.AllowDBNull = false;
                this.columnDBDevID.Namespace = "";
                this.columnDBDevID.DefaultValue = ((ushort)(0));
                this.columnMode.AllowDBNull = false;
                this.columnMode.Namespace = "";
                this.columnMode.DefaultValue = ((byte)(0));
                this.columnKeyCd.AllowDBNull = false;
                this.columnKeyCd.Namespace = "";
                this.columnKeyCd.DefaultValue = ((byte)(0));
                this.columnOutRon.AllowDBNull = false;
                this.columnOutRon.Namespace = "";
                this.columnOutRon.DefaultValue = ((ushort)(0));
                this.columnExecutorNumber.AllowDBNull = false;
                this.columnExecutorNumber.Namespace = "";
                this.columnExecutorNumber.DefaultValue = ((ushort)(0));
                this.columnGenericKeyId.AllowDBNull = false;
                this.columnGenericKeyId.Namespace = "";
                this.columnGenericKeyId.DefaultValue = ((ushort)(0));
                this.columnKey_fk.AutoIncrement = true;
                this.columnKey_fk.AutoIncrementSeed = 1;
                this.columnKey_fk.AllowDBNull = false;
                this.columnKey_fk.Namespace = "";
                this.columnActive.AllowDBNull = false;
                this.columnActive.Namespace = "";
                this.columnActive.DefaultValue = ((bool)(false));
                this.columnUserLocked.AllowDBNull = false;
                this.columnUserLocked.Namespace = "";
                this.columnUserLocked.DefaultValue = ((bool)(false));
                this.columnServiceLocked.AllowDBNull = false;
                this.columnServiceLocked.Namespace = "";
                this.columnServiceLocked.DefaultValue = ((bool)(false));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KeysRow NewKeysRow() {
                return ((KeysRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new KeysRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(KeysRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.KeysRowChanged != null)) {
                    this.KeysRowChanged(this, new KeysRowChangeEvent(((KeysRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.KeysRowChanging != null)) {
                    this.KeysRowChanging(this, new KeysRowChangeEvent(((KeysRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.KeysRowDeleted != null)) {
                    this.KeysRowDeleted(this, new KeysRowChangeEvent(((KeysRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.KeysRowDeleting != null)) {
                    this.KeysRowDeleting(this, new KeysRowChangeEvent(((KeysRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveKeysRow(KeysRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DeviceImagesDS ds = new DeviceImagesDS();
                xs.Add(ds.GetSchemaSerializable());
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "KeysDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class StandardMacrosDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnModeKeyCode;
            
            private global::System.Data.DataColumn columnKeyCd;
            
            private global::System.Data.DataColumn columnMacro_fk;
            
            private global::System.Data.DataColumn columnActive;
            
            private global::System.Data.DataColumn columnUserLocked;
            
            private global::System.Data.DataColumn columnServiceLocked;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StandardMacrosDataTable() {
                this.TableName = "StandardMacros";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StandardMacrosDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected StandardMacrosDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModeKeyCodeColumn {
                get {
                    return this.columnModeKeyCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KeyCdColumn {
                get {
                    return this.columnKeyCd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Macro_fkColumn {
                get {
                    return this.columnMacro_fk;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActiveColumn {
                get {
                    return this.columnActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserLockedColumn {
                get {
                    return this.columnUserLocked;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ServiceLockedColumn {
                get {
                    return this.columnServiceLocked;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StandardMacrosRow this[int index] {
                get {
                    return ((StandardMacrosRow)(this.Rows[index]));
                }
            }
            
            public event StandardMacrosRowChangeEventHandler StandardMacrosRowChanging;
            
            public event StandardMacrosRowChangeEventHandler StandardMacrosRowChanged;
            
            public event StandardMacrosRowChangeEventHandler StandardMacrosRowDeleting;
            
            public event StandardMacrosRowChangeEventHandler StandardMacrosRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddStandardMacrosRow(StandardMacrosRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StandardMacrosRow AddStandardMacrosRow(byte ModeKeyCode, byte KeyCd, bool Active, bool UserLocked, bool ServiceLocked) {
                StandardMacrosRow rowStandardMacrosRow = ((StandardMacrosRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ModeKeyCode,
                        KeyCd,
                        null,
                        Active,
                        UserLocked,
                        ServiceLocked};
                rowStandardMacrosRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowStandardMacrosRow);
                return rowStandardMacrosRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                StandardMacrosDataTable cln = ((StandardMacrosDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new StandardMacrosDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnModeKeyCode = base.Columns["ModeKeyCode"];
                this.columnKeyCd = base.Columns["KeyCd"];
                this.columnMacro_fk = base.Columns["Macro_fk"];
                this.columnActive = base.Columns["Active"];
                this.columnUserLocked = base.Columns["UserLocked"];
                this.columnServiceLocked = base.Columns["ServiceLocked"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnModeKeyCode = new global::System.Data.DataColumn("ModeKeyCode", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnModeKeyCode);
                this.columnKeyCd = new global::System.Data.DataColumn("KeyCd", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnKeyCd);
                this.columnMacro_fk = new global::System.Data.DataColumn("Macro_fk", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnMacro_fk);
                this.columnActive = new global::System.Data.DataColumn("Active", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnActive);
                this.columnUserLocked = new global::System.Data.DataColumn("UserLocked", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnUserLocked);
                this.columnServiceLocked = new global::System.Data.DataColumn("ServiceLocked", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnServiceLocked);
                this.columnModeKeyCode.AllowDBNull = false;
                this.columnModeKeyCode.Namespace = "";
                this.columnModeKeyCode.DefaultValue = ((byte)(0));
                this.columnKeyCd.AllowDBNull = false;
                this.columnKeyCd.Namespace = "";
                this.columnKeyCd.DefaultValue = ((byte)(0));
                this.columnMacro_fk.AutoIncrement = true;
                this.columnMacro_fk.AutoIncrementSeed = 1;
                this.columnMacro_fk.AllowDBNull = false;
                this.columnMacro_fk.Namespace = "";
                this.columnActive.AllowDBNull = false;
                this.columnActive.Namespace = "";
                this.columnActive.DefaultValue = ((bool)(false));
                this.columnUserLocked.AllowDBNull = false;
                this.columnUserLocked.Namespace = "";
                this.columnUserLocked.DefaultValue = ((bool)(false));
                this.columnServiceLocked.AllowDBNull = false;
                this.columnServiceLocked.Namespace = "";
                this.columnServiceLocked.DefaultValue = ((bool)(false));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StandardMacrosRow NewStandardMacrosRow() {
                return ((StandardMacrosRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new StandardMacrosRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(StandardMacrosRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StandardMacrosRowChanged != null)) {
                    this.StandardMacrosRowChanged(this, new StandardMacrosRowChangeEvent(((StandardMacrosRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StandardMacrosRowChanging != null)) {
                    this.StandardMacrosRowChanging(this, new StandardMacrosRowChangeEvent(((StandardMacrosRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StandardMacrosRowDeleted != null)) {
                    this.StandardMacrosRowDeleted(this, new StandardMacrosRowChangeEvent(((StandardMacrosRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StandardMacrosRowDeleting != null)) {
                    this.StandardMacrosRowDeleting(this, new StandardMacrosRowChangeEvent(((StandardMacrosRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveStandardMacrosRow(StandardMacrosRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DeviceImagesDS ds = new DeviceImagesDS();
                xs.Add(ds.GetSchemaSerializable());
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "StandardMacrosDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MacroStepsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnStepVal;
            
            private global::System.Data.DataColumn columnMacro_fk;
            
            private global::System.Data.DataColumn columnCodeOrder;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MacroStepsDataTable() {
                this.TableName = "MacroSteps";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MacroStepsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MacroStepsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StepValColumn {
                get {
                    return this.columnStepVal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Macro_fkColumn {
                get {
                    return this.columnMacro_fk;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CodeOrderColumn {
                get {
                    return this.columnCodeOrder;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MacroStepsRow this[int index] {
                get {
                    return ((MacroStepsRow)(this.Rows[index]));
                }
            }
            
            public event MacroStepsRowChangeEventHandler MacroStepsRowChanging;
            
            public event MacroStepsRowChangeEventHandler MacroStepsRowChanged;
            
            public event MacroStepsRowChangeEventHandler MacroStepsRowDeleting;
            
            public event MacroStepsRowChangeEventHandler MacroStepsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMacroStepsRow(MacroStepsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MacroStepsRow AddMacroStepsRow(byte StepVal, StandardMacrosRow parentStandardMacrosRowByStandardMacros_MacroSteps) {
                MacroStepsRow rowMacroStepsRow = ((MacroStepsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        StepVal,
                        null,
                        null};
                if ((parentStandardMacrosRowByStandardMacros_MacroSteps != null)) {
                    columnValuesArray[1] = parentStandardMacrosRowByStandardMacros_MacroSteps[2];
                }
                rowMacroStepsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMacroStepsRow);
                return rowMacroStepsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MacroStepsDataTable cln = ((MacroStepsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MacroStepsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnStepVal = base.Columns["StepVal"];
                this.columnMacro_fk = base.Columns["Macro_fk"];
                this.columnCodeOrder = base.Columns["CodeOrder"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnStepVal = new global::System.Data.DataColumn("StepVal", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnStepVal);
                this.columnMacro_fk = new global::System.Data.DataColumn("Macro_fk", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnMacro_fk);
                this.columnCodeOrder = new global::System.Data.DataColumn("CodeOrder", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnCodeOrder);
                this.columnStepVal.AllowDBNull = false;
                this.columnStepVal.Namespace = "";
                this.columnMacro_fk.AllowDBNull = false;
                this.columnMacro_fk.Namespace = "";
                this.columnCodeOrder.AutoIncrement = true;
                this.columnCodeOrder.AutoIncrementSeed = 1;
                this.columnCodeOrder.AllowDBNull = false;
                this.columnCodeOrder.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MacroStepsRow NewMacroStepsRow() {
                return ((MacroStepsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MacroStepsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MacroStepsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MacroStepsRowChanged != null)) {
                    this.MacroStepsRowChanged(this, new MacroStepsRowChangeEvent(((MacroStepsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MacroStepsRowChanging != null)) {
                    this.MacroStepsRowChanging(this, new MacroStepsRowChangeEvent(((MacroStepsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MacroStepsRowDeleted != null)) {
                    this.MacroStepsRowDeleted(this, new MacroStepsRowChangeEvent(((MacroStepsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MacroStepsRowDeleting != null)) {
                    this.MacroStepsRowDeleting(this, new MacroStepsRowChangeEvent(((MacroStepsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMacroStepsRow(MacroStepsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DeviceImagesDS ds = new DeviceImagesDS();
                xs.Add(ds.GetSchemaSerializable());
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MacroStepsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ActivityLabelsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnModeKeyCode;
            
            private global::System.Data.DataColumn columnKeyCd;
            
            private global::System.Data.DataColumn columnActivityLabel_fk;
            
            private global::System.Data.DataColumn columnActive;
            
            private global::System.Data.DataColumn columnUserLocked;
            
            private global::System.Data.DataColumn columnServiceLocked;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActivityLabelsDataTable() {
                this.TableName = "ActivityLabels";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ActivityLabelsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ActivityLabelsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModeKeyCodeColumn {
                get {
                    return this.columnModeKeyCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KeyCdColumn {
                get {
                    return this.columnKeyCd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActivityLabel_fkColumn {
                get {
                    return this.columnActivityLabel_fk;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActiveColumn {
                get {
                    return this.columnActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserLockedColumn {
                get {
                    return this.columnUserLocked;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ServiceLockedColumn {
                get {
                    return this.columnServiceLocked;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActivityLabelsRow this[int index] {
                get {
                    return ((ActivityLabelsRow)(this.Rows[index]));
                }
            }
            
            public event ActivityLabelsRowChangeEventHandler ActivityLabelsRowChanging;
            
            public event ActivityLabelsRowChangeEventHandler ActivityLabelsRowChanged;
            
            public event ActivityLabelsRowChangeEventHandler ActivityLabelsRowDeleting;
            
            public event ActivityLabelsRowChangeEventHandler ActivityLabelsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddActivityLabelsRow(ActivityLabelsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActivityLabelsRow AddActivityLabelsRow(byte ModeKeyCode, byte KeyCd, bool Active, bool UserLocked, bool ServiceLocked) {
                ActivityLabelsRow rowActivityLabelsRow = ((ActivityLabelsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ModeKeyCode,
                        KeyCd,
                        null,
                        Active,
                        UserLocked,
                        ServiceLocked};
                rowActivityLabelsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowActivityLabelsRow);
                return rowActivityLabelsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ActivityLabelsDataTable cln = ((ActivityLabelsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ActivityLabelsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnModeKeyCode = base.Columns["ModeKeyCode"];
                this.columnKeyCd = base.Columns["KeyCd"];
                this.columnActivityLabel_fk = base.Columns["ActivityLabel_fk"];
                this.columnActive = base.Columns["Active"];
                this.columnUserLocked = base.Columns["UserLocked"];
                this.columnServiceLocked = base.Columns["ServiceLocked"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnModeKeyCode = new global::System.Data.DataColumn("ModeKeyCode", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnModeKeyCode);
                this.columnKeyCd = new global::System.Data.DataColumn("KeyCd", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnKeyCd);
                this.columnActivityLabel_fk = new global::System.Data.DataColumn("ActivityLabel_fk", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnActivityLabel_fk);
                this.columnActive = new global::System.Data.DataColumn("Active", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnActive);
                this.columnUserLocked = new global::System.Data.DataColumn("UserLocked", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnUserLocked);
                this.columnServiceLocked = new global::System.Data.DataColumn("ServiceLocked", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnServiceLocked);
                this.columnModeKeyCode.AllowDBNull = false;
                this.columnModeKeyCode.Namespace = "";
                this.columnModeKeyCode.DefaultValue = ((byte)(0));
                this.columnKeyCd.AllowDBNull = false;
                this.columnKeyCd.Namespace = "";
                this.columnKeyCd.DefaultValue = ((byte)(0));
                this.columnActivityLabel_fk.AutoIncrement = true;
                this.columnActivityLabel_fk.AutoIncrementSeed = 1;
                this.columnActivityLabel_fk.AllowDBNull = false;
                this.columnActivityLabel_fk.Namespace = "";
                this.columnActive.AllowDBNull = false;
                this.columnActive.Namespace = "";
                this.columnActive.DefaultValue = ((bool)(false));
                this.columnUserLocked.AllowDBNull = false;
                this.columnUserLocked.Namespace = "";
                this.columnUserLocked.DefaultValue = ((bool)(false));
                this.columnServiceLocked.AllowDBNull = false;
                this.columnServiceLocked.Namespace = "";
                this.columnServiceLocked.DefaultValue = ((bool)(false));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActivityLabelsRow NewActivityLabelsRow() {
                return ((ActivityLabelsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ActivityLabelsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ActivityLabelsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ActivityLabelsRowChanged != null)) {
                    this.ActivityLabelsRowChanged(this, new ActivityLabelsRowChangeEvent(((ActivityLabelsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ActivityLabelsRowChanging != null)) {
                    this.ActivityLabelsRowChanging(this, new ActivityLabelsRowChangeEvent(((ActivityLabelsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ActivityLabelsRowDeleted != null)) {
                    this.ActivityLabelsRowDeleted(this, new ActivityLabelsRowChangeEvent(((ActivityLabelsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ActivityLabelsRowDeleting != null)) {
                    this.ActivityLabelsRowDeleting(this, new ActivityLabelsRowChangeEvent(((ActivityLabelsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveActivityLabelsRow(ActivityLabelsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DeviceImagesDS ds = new DeviceImagesDS();
                xs.Add(ds.GetSchemaSerializable());
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ActivityLabelsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LabelsTableDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnLabel;
            
            private global::System.Data.DataColumn columnKeyCd;
            
            private global::System.Data.DataColumn columnActivityLabel_fk;
            
            private global::System.Data.DataColumn columnCodeOrder;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LabelsTableDataTable() {
                this.TableName = "LabelsTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LabelsTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LabelsTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LabelColumn {
                get {
                    return this.columnLabel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KeyCdColumn {
                get {
                    return this.columnKeyCd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActivityLabel_fkColumn {
                get {
                    return this.columnActivityLabel_fk;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CodeOrderColumn {
                get {
                    return this.columnCodeOrder;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LabelsTableRow this[int index] {
                get {
                    return ((LabelsTableRow)(this.Rows[index]));
                }
            }
            
            public event LabelsTableRowChangeEventHandler LabelsTableRowChanging;
            
            public event LabelsTableRowChangeEventHandler LabelsTableRowChanged;
            
            public event LabelsTableRowChangeEventHandler LabelsTableRowDeleting;
            
            public event LabelsTableRowChangeEventHandler LabelsTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLabelsTableRow(LabelsTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LabelsTableRow AddLabelsTableRow(string Label, byte KeyCd, ActivityLabelsRow parentActivityLabelsRowByActivityLabels_LabelsTable) {
                LabelsTableRow rowLabelsTableRow = ((LabelsTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Label,
                        KeyCd,
                        null,
                        null};
                if ((parentActivityLabelsRowByActivityLabels_LabelsTable != null)) {
                    columnValuesArray[2] = parentActivityLabelsRowByActivityLabels_LabelsTable[2];
                }
                rowLabelsTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLabelsTableRow);
                return rowLabelsTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LabelsTableDataTable cln = ((LabelsTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LabelsTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLabel = base.Columns["Label"];
                this.columnKeyCd = base.Columns["KeyCd"];
                this.columnActivityLabel_fk = base.Columns["ActivityLabel_fk"];
                this.columnCodeOrder = base.Columns["CodeOrder"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLabel = new global::System.Data.DataColumn("Label", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnLabel);
                this.columnKeyCd = new global::System.Data.DataColumn("KeyCd", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnKeyCd);
                this.columnActivityLabel_fk = new global::System.Data.DataColumn("ActivityLabel_fk", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnActivityLabel_fk);
                this.columnCodeOrder = new global::System.Data.DataColumn("CodeOrder", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnCodeOrder);
                this.columnLabel.AllowDBNull = false;
                this.columnLabel.Namespace = "";
                this.columnLabel.DefaultValue = ((string)("nothing"));
                this.columnKeyCd.AllowDBNull = false;
                this.columnKeyCd.Namespace = "";
                this.columnKeyCd.DefaultValue = ((byte)(0));
                this.columnActivityLabel_fk.AllowDBNull = false;
                this.columnActivityLabel_fk.Namespace = "";
                this.columnCodeOrder.AutoIncrement = true;
                this.columnCodeOrder.AutoIncrementSeed = 1;
                this.columnCodeOrder.AllowDBNull = false;
                this.columnCodeOrder.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LabelsTableRow NewLabelsTableRow() {
                return ((LabelsTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LabelsTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LabelsTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LabelsTableRowChanged != null)) {
                    this.LabelsTableRowChanged(this, new LabelsTableRowChangeEvent(((LabelsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LabelsTableRowChanging != null)) {
                    this.LabelsTableRowChanging(this, new LabelsTableRowChangeEvent(((LabelsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LabelsTableRowDeleted != null)) {
                    this.LabelsTableRowDeleted(this, new LabelsTableRowChangeEvent(((LabelsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LabelsTableRowDeleting != null)) {
                    this.LabelsTableRowDeleting(this, new LabelsTableRowChangeEvent(((LabelsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLabelsTableRow(LabelsTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DeviceImagesDS ds = new DeviceImagesDS();
                xs.Add(ds.GetSchemaSerializable());
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LabelsTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SoftKeyLabelTableDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnModeKeyCode;
            
            private global::System.Data.DataColumn columnKeyCd;
            
            private global::System.Data.DataColumn columnSoftKeyEntries_fk;
            
            private global::System.Data.DataColumn columnNumberOfSoftKeys;
            
            private global::System.Data.DataColumn columnActive;
            
            private global::System.Data.DataColumn columnUserLocked;
            
            private global::System.Data.DataColumn columnServiceLocked;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SoftKeyLabelTableDataTable() {
                this.TableName = "SoftKeyLabelTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SoftKeyLabelTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SoftKeyLabelTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModeKeyCodeColumn {
                get {
                    return this.columnModeKeyCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KeyCdColumn {
                get {
                    return this.columnKeyCd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SoftKeyEntries_fkColumn {
                get {
                    return this.columnSoftKeyEntries_fk;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NumberOfSoftKeysColumn {
                get {
                    return this.columnNumberOfSoftKeys;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActiveColumn {
                get {
                    return this.columnActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserLockedColumn {
                get {
                    return this.columnUserLocked;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ServiceLockedColumn {
                get {
                    return this.columnServiceLocked;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SoftKeyLabelTableRow this[int index] {
                get {
                    return ((SoftKeyLabelTableRow)(this.Rows[index]));
                }
            }
            
            public event SoftKeyLabelTableRowChangeEventHandler SoftKeyLabelTableRowChanging;
            
            public event SoftKeyLabelTableRowChangeEventHandler SoftKeyLabelTableRowChanged;
            
            public event SoftKeyLabelTableRowChangeEventHandler SoftKeyLabelTableRowDeleting;
            
            public event SoftKeyLabelTableRowChangeEventHandler SoftKeyLabelTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSoftKeyLabelTableRow(SoftKeyLabelTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SoftKeyLabelTableRow AddSoftKeyLabelTableRow(byte ModeKeyCode, byte KeyCd, byte NumberOfSoftKeys, bool Active, bool UserLocked, bool ServiceLocked) {
                SoftKeyLabelTableRow rowSoftKeyLabelTableRow = ((SoftKeyLabelTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ModeKeyCode,
                        KeyCd,
                        null,
                        NumberOfSoftKeys,
                        Active,
                        UserLocked,
                        ServiceLocked};
                rowSoftKeyLabelTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSoftKeyLabelTableRow);
                return rowSoftKeyLabelTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SoftKeyLabelTableDataTable cln = ((SoftKeyLabelTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SoftKeyLabelTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnModeKeyCode = base.Columns["ModeKeyCode"];
                this.columnKeyCd = base.Columns["KeyCd"];
                this.columnSoftKeyEntries_fk = base.Columns["SoftKeyEntries_fk"];
                this.columnNumberOfSoftKeys = base.Columns["NumberOfSoftKeys"];
                this.columnActive = base.Columns["Active"];
                this.columnUserLocked = base.Columns["UserLocked"];
                this.columnServiceLocked = base.Columns["ServiceLocked"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnModeKeyCode = new global::System.Data.DataColumn("ModeKeyCode", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnModeKeyCode);
                this.columnKeyCd = new global::System.Data.DataColumn("KeyCd", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnKeyCd);
                this.columnSoftKeyEntries_fk = new global::System.Data.DataColumn("SoftKeyEntries_fk", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSoftKeyEntries_fk);
                this.columnNumberOfSoftKeys = new global::System.Data.DataColumn("NumberOfSoftKeys", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnNumberOfSoftKeys);
                this.columnActive = new global::System.Data.DataColumn("Active", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnActive);
                this.columnUserLocked = new global::System.Data.DataColumn("UserLocked", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnUserLocked);
                this.columnServiceLocked = new global::System.Data.DataColumn("ServiceLocked", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnServiceLocked);
                this.columnModeKeyCode.AllowDBNull = false;
                this.columnModeKeyCode.Namespace = "";
                this.columnModeKeyCode.DefaultValue = ((byte)(0));
                this.columnKeyCd.AllowDBNull = false;
                this.columnKeyCd.Namespace = "";
                this.columnKeyCd.DefaultValue = ((byte)(0));
                this.columnSoftKeyEntries_fk.AutoIncrement = true;
                this.columnSoftKeyEntries_fk.AutoIncrementSeed = 1;
                this.columnSoftKeyEntries_fk.AllowDBNull = false;
                this.columnSoftKeyEntries_fk.Namespace = "";
                this.columnNumberOfSoftKeys.AllowDBNull = false;
                this.columnNumberOfSoftKeys.Namespace = "";
                this.columnNumberOfSoftKeys.DefaultValue = ((byte)(0));
                this.columnActive.AllowDBNull = false;
                this.columnActive.Namespace = "";
                this.columnActive.DefaultValue = ((bool)(false));
                this.columnUserLocked.AllowDBNull = false;
                this.columnUserLocked.Namespace = "";
                this.columnUserLocked.DefaultValue = ((bool)(false));
                this.columnServiceLocked.AllowDBNull = false;
                this.columnServiceLocked.Namespace = "";
                this.columnServiceLocked.DefaultValue = ((bool)(false));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SoftKeyLabelTableRow NewSoftKeyLabelTableRow() {
                return ((SoftKeyLabelTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SoftKeyLabelTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SoftKeyLabelTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SoftKeyLabelTableRowChanged != null)) {
                    this.SoftKeyLabelTableRowChanged(this, new SoftKeyLabelTableRowChangeEvent(((SoftKeyLabelTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SoftKeyLabelTableRowChanging != null)) {
                    this.SoftKeyLabelTableRowChanging(this, new SoftKeyLabelTableRowChangeEvent(((SoftKeyLabelTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SoftKeyLabelTableRowDeleted != null)) {
                    this.SoftKeyLabelTableRowDeleted(this, new SoftKeyLabelTableRowChangeEvent(((SoftKeyLabelTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SoftKeyLabelTableRowDeleting != null)) {
                    this.SoftKeyLabelTableRowDeleting(this, new SoftKeyLabelTableRowChangeEvent(((SoftKeyLabelTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSoftKeyLabelTableRow(SoftKeyLabelTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DeviceImagesDS ds = new DeviceImagesDS();
                xs.Add(ds.GetSchemaSerializable());
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SoftKeyLabelTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SoftKeyEntriesDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnKeyCd;
            
            private global::System.Data.DataColumn columnLabel;
            
            private global::System.Data.DataColumn columnSoftKeyEntries_fk;
            
            private global::System.Data.DataColumn columnCodeOrder;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SoftKeyEntriesDataTable() {
                this.TableName = "SoftKeyEntries";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SoftKeyEntriesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SoftKeyEntriesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KeyCdColumn {
                get {
                    return this.columnKeyCd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LabelColumn {
                get {
                    return this.columnLabel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SoftKeyEntries_fkColumn {
                get {
                    return this.columnSoftKeyEntries_fk;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CodeOrderColumn {
                get {
                    return this.columnCodeOrder;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SoftKeyEntriesRow this[int index] {
                get {
                    return ((SoftKeyEntriesRow)(this.Rows[index]));
                }
            }
            
            public event SoftKeyEntriesRowChangeEventHandler SoftKeyEntriesRowChanging;
            
            public event SoftKeyEntriesRowChangeEventHandler SoftKeyEntriesRowChanged;
            
            public event SoftKeyEntriesRowChangeEventHandler SoftKeyEntriesRowDeleting;
            
            public event SoftKeyEntriesRowChangeEventHandler SoftKeyEntriesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSoftKeyEntriesRow(SoftKeyEntriesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SoftKeyEntriesRow AddSoftKeyEntriesRow(byte KeyCd, string Label, SoftKeyLabelTableRow parentSoftKeyLabelTableRowBySoftKeyLabelTable_SoftKeyEntries) {
                SoftKeyEntriesRow rowSoftKeyEntriesRow = ((SoftKeyEntriesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        KeyCd,
                        Label,
                        null,
                        null};
                if ((parentSoftKeyLabelTableRowBySoftKeyLabelTable_SoftKeyEntries != null)) {
                    columnValuesArray[2] = parentSoftKeyLabelTableRowBySoftKeyLabelTable_SoftKeyEntries[2];
                }
                rowSoftKeyEntriesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSoftKeyEntriesRow);
                return rowSoftKeyEntriesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SoftKeyEntriesDataTable cln = ((SoftKeyEntriesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SoftKeyEntriesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnKeyCd = base.Columns["KeyCd"];
                this.columnLabel = base.Columns["Label"];
                this.columnSoftKeyEntries_fk = base.Columns["SoftKeyEntries_fk"];
                this.columnCodeOrder = base.Columns["CodeOrder"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnKeyCd = new global::System.Data.DataColumn("KeyCd", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnKeyCd);
                this.columnLabel = new global::System.Data.DataColumn("Label", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnLabel);
                this.columnSoftKeyEntries_fk = new global::System.Data.DataColumn("SoftKeyEntries_fk", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSoftKeyEntries_fk);
                this.columnCodeOrder = new global::System.Data.DataColumn("CodeOrder", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnCodeOrder);
                this.columnKeyCd.AllowDBNull = false;
                this.columnKeyCd.Namespace = "";
                this.columnKeyCd.DefaultValue = ((byte)(0));
                this.columnLabel.AllowDBNull = false;
                this.columnLabel.Namespace = "";
                this.columnLabel.DefaultValue = ((string)("nothing"));
                this.columnSoftKeyEntries_fk.AllowDBNull = false;
                this.columnSoftKeyEntries_fk.Namespace = "";
                this.columnCodeOrder.AutoIncrement = true;
                this.columnCodeOrder.AutoIncrementSeed = 1;
                this.columnCodeOrder.AllowDBNull = false;
                this.columnCodeOrder.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SoftKeyEntriesRow NewSoftKeyEntriesRow() {
                return ((SoftKeyEntriesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SoftKeyEntriesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SoftKeyEntriesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SoftKeyEntriesRowChanged != null)) {
                    this.SoftKeyEntriesRowChanged(this, new SoftKeyEntriesRowChangeEvent(((SoftKeyEntriesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SoftKeyEntriesRowChanging != null)) {
                    this.SoftKeyEntriesRowChanging(this, new SoftKeyEntriesRowChangeEvent(((SoftKeyEntriesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SoftKeyEntriesRowDeleted != null)) {
                    this.SoftKeyEntriesRowDeleted(this, new SoftKeyEntriesRowChangeEvent(((SoftKeyEntriesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SoftKeyEntriesRowDeleting != null)) {
                    this.SoftKeyEntriesRowDeleting(this, new SoftKeyEntriesRowChangeEvent(((SoftKeyEntriesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSoftKeyEntriesRow(SoftKeyEntriesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DeviceImagesDS ds = new DeviceImagesDS();
                xs.Add(ds.GetSchemaSerializable());
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SoftKeyEntriesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FavoriteKeyChannelTableDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnModeKeyCode;
            
            private global::System.Data.DataColumn columnKeyCd;
            
            private global::System.Data.DataColumn columnFavoriteKeyEntries_fk;
            
            private global::System.Data.DataColumn columnFavoriteKeyLabels_fk;
            
            private global::System.Data.DataColumn columnNumberOfChannels;
            
            private global::System.Data.DataColumn columnChannelEnterKeyCode;
            
            private global::System.Data.DataColumn columnNumberOfFixedSizeDigits;
            
            private global::System.Data.DataColumn columnActive;
            
            private global::System.Data.DataColumn columnUserLocked;
            
            private global::System.Data.DataColumn columnServiceLocked;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FavoriteKeyChannelTableDataTable() {
                this.TableName = "FavoriteKeyChannelTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FavoriteKeyChannelTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FavoriteKeyChannelTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModeKeyCodeColumn {
                get {
                    return this.columnModeKeyCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KeyCdColumn {
                get {
                    return this.columnKeyCd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FavoriteKeyEntries_fkColumn {
                get {
                    return this.columnFavoriteKeyEntries_fk;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FavoriteKeyLabels_fkColumn {
                get {
                    return this.columnFavoriteKeyLabels_fk;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NumberOfChannelsColumn {
                get {
                    return this.columnNumberOfChannels;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ChannelEnterKeyCodeColumn {
                get {
                    return this.columnChannelEnterKeyCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NumberOfFixedSizeDigitsColumn {
                get {
                    return this.columnNumberOfFixedSizeDigits;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActiveColumn {
                get {
                    return this.columnActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserLockedColumn {
                get {
                    return this.columnUserLocked;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ServiceLockedColumn {
                get {
                    return this.columnServiceLocked;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FavoriteKeyChannelTableRow this[int index] {
                get {
                    return ((FavoriteKeyChannelTableRow)(this.Rows[index]));
                }
            }
            
            public event FavoriteKeyChannelTableRowChangeEventHandler FavoriteKeyChannelTableRowChanging;
            
            public event FavoriteKeyChannelTableRowChangeEventHandler FavoriteKeyChannelTableRowChanged;
            
            public event FavoriteKeyChannelTableRowChangeEventHandler FavoriteKeyChannelTableRowDeleting;
            
            public event FavoriteKeyChannelTableRowChangeEventHandler FavoriteKeyChannelTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFavoriteKeyChannelTableRow(FavoriteKeyChannelTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FavoriteKeyChannelTableRow AddFavoriteKeyChannelTableRow(byte ModeKeyCode, byte KeyCd, byte NumberOfChannels, byte ChannelEnterKeyCode, byte NumberOfFixedSizeDigits, bool Active, bool UserLocked, bool ServiceLocked) {
                FavoriteKeyChannelTableRow rowFavoriteKeyChannelTableRow = ((FavoriteKeyChannelTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ModeKeyCode,
                        KeyCd,
                        null,
                        null,
                        NumberOfChannels,
                        ChannelEnterKeyCode,
                        NumberOfFixedSizeDigits,
                        Active,
                        UserLocked,
                        ServiceLocked};
                rowFavoriteKeyChannelTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFavoriteKeyChannelTableRow);
                return rowFavoriteKeyChannelTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                FavoriteKeyChannelTableDataTable cln = ((FavoriteKeyChannelTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FavoriteKeyChannelTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnModeKeyCode = base.Columns["ModeKeyCode"];
                this.columnKeyCd = base.Columns["KeyCd"];
                this.columnFavoriteKeyEntries_fk = base.Columns["FavoriteKeyEntries_fk"];
                this.columnFavoriteKeyLabels_fk = base.Columns["FavoriteKeyLabels_fk"];
                this.columnNumberOfChannels = base.Columns["NumberOfChannels"];
                this.columnChannelEnterKeyCode = base.Columns["ChannelEnterKeyCode"];
                this.columnNumberOfFixedSizeDigits = base.Columns["NumberOfFixedSizeDigits"];
                this.columnActive = base.Columns["Active"];
                this.columnUserLocked = base.Columns["UserLocked"];
                this.columnServiceLocked = base.Columns["ServiceLocked"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnModeKeyCode = new global::System.Data.DataColumn("ModeKeyCode", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnModeKeyCode);
                this.columnKeyCd = new global::System.Data.DataColumn("KeyCd", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnKeyCd);
                this.columnFavoriteKeyEntries_fk = new global::System.Data.DataColumn("FavoriteKeyEntries_fk", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnFavoriteKeyEntries_fk);
                this.columnFavoriteKeyLabels_fk = new global::System.Data.DataColumn("FavoriteKeyLabels_fk", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnFavoriteKeyLabels_fk);
                this.columnNumberOfChannels = new global::System.Data.DataColumn("NumberOfChannels", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnNumberOfChannels);
                this.columnChannelEnterKeyCode = new global::System.Data.DataColumn("ChannelEnterKeyCode", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnChannelEnterKeyCode);
                this.columnNumberOfFixedSizeDigits = new global::System.Data.DataColumn("NumberOfFixedSizeDigits", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnNumberOfFixedSizeDigits);
                this.columnActive = new global::System.Data.DataColumn("Active", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnActive);
                this.columnUserLocked = new global::System.Data.DataColumn("UserLocked", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnUserLocked);
                this.columnServiceLocked = new global::System.Data.DataColumn("ServiceLocked", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnServiceLocked);
                this.columnModeKeyCode.AllowDBNull = false;
                this.columnModeKeyCode.Namespace = "";
                this.columnModeKeyCode.DefaultValue = ((byte)(0));
                this.columnKeyCd.AllowDBNull = false;
                this.columnKeyCd.Namespace = "";
                this.columnKeyCd.DefaultValue = ((byte)(0));
                this.columnFavoriteKeyEntries_fk.AutoIncrement = true;
                this.columnFavoriteKeyEntries_fk.AutoIncrementSeed = 1;
                this.columnFavoriteKeyEntries_fk.AllowDBNull = false;
                this.columnFavoriteKeyEntries_fk.Namespace = "";
                this.columnFavoriteKeyLabels_fk.AutoIncrement = true;
                this.columnFavoriteKeyLabels_fk.AutoIncrementSeed = 1;
                this.columnFavoriteKeyLabels_fk.AllowDBNull = false;
                this.columnFavoriteKeyLabels_fk.Namespace = "";
                this.columnNumberOfChannels.AllowDBNull = false;
                this.columnNumberOfChannels.Namespace = "";
                this.columnNumberOfChannels.DefaultValue = ((byte)(0));
                this.columnChannelEnterKeyCode.AllowDBNull = false;
                this.columnChannelEnterKeyCode.Namespace = "";
                this.columnChannelEnterKeyCode.DefaultValue = ((byte)(0));
                this.columnNumberOfFixedSizeDigits.AllowDBNull = false;
                this.columnNumberOfFixedSizeDigits.Namespace = "";
                this.columnNumberOfFixedSizeDigits.DefaultValue = ((byte)(0));
                this.columnActive.AllowDBNull = false;
                this.columnActive.Namespace = "";
                this.columnActive.DefaultValue = ((bool)(false));
                this.columnUserLocked.AllowDBNull = false;
                this.columnUserLocked.Namespace = "";
                this.columnUserLocked.DefaultValue = ((bool)(false));
                this.columnServiceLocked.AllowDBNull = false;
                this.columnServiceLocked.Namespace = "";
                this.columnServiceLocked.DefaultValue = ((bool)(false));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FavoriteKeyChannelTableRow NewFavoriteKeyChannelTableRow() {
                return ((FavoriteKeyChannelTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FavoriteKeyChannelTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(FavoriteKeyChannelTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FavoriteKeyChannelTableRowChanged != null)) {
                    this.FavoriteKeyChannelTableRowChanged(this, new FavoriteKeyChannelTableRowChangeEvent(((FavoriteKeyChannelTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FavoriteKeyChannelTableRowChanging != null)) {
                    this.FavoriteKeyChannelTableRowChanging(this, new FavoriteKeyChannelTableRowChangeEvent(((FavoriteKeyChannelTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FavoriteKeyChannelTableRowDeleted != null)) {
                    this.FavoriteKeyChannelTableRowDeleted(this, new FavoriteKeyChannelTableRowChangeEvent(((FavoriteKeyChannelTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FavoriteKeyChannelTableRowDeleting != null)) {
                    this.FavoriteKeyChannelTableRowDeleting(this, new FavoriteKeyChannelTableRowChangeEvent(((FavoriteKeyChannelTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFavoriteKeyChannelTableRow(FavoriteKeyChannelTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DeviceImagesDS ds = new DeviceImagesDS();
                xs.Add(ds.GetSchemaSerializable());
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FavoriteKeyChannelTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FavoriteKeyEntriesDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnFavoriteEntry;
            
            private global::System.Data.DataColumn columnFavoriteKeyEntries_fk;
            
            private global::System.Data.DataColumn columnCodeOrder;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FavoriteKeyEntriesDataTable() {
                this.TableName = "FavoriteKeyEntries";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FavoriteKeyEntriesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FavoriteKeyEntriesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FavoriteEntryColumn {
                get {
                    return this.columnFavoriteEntry;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FavoriteKeyEntries_fkColumn {
                get {
                    return this.columnFavoriteKeyEntries_fk;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CodeOrderColumn {
                get {
                    return this.columnCodeOrder;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FavoriteKeyEntriesRow this[int index] {
                get {
                    return ((FavoriteKeyEntriesRow)(this.Rows[index]));
                }
            }
            
            public event FavoriteKeyEntriesRowChangeEventHandler FavoriteKeyEntriesRowChanging;
            
            public event FavoriteKeyEntriesRowChangeEventHandler FavoriteKeyEntriesRowChanged;
            
            public event FavoriteKeyEntriesRowChangeEventHandler FavoriteKeyEntriesRowDeleting;
            
            public event FavoriteKeyEntriesRowChangeEventHandler FavoriteKeyEntriesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFavoriteKeyEntriesRow(FavoriteKeyEntriesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FavoriteKeyEntriesRow AddFavoriteKeyEntriesRow(byte FavoriteEntry, FavoriteKeyChannelTableRow parentFavoriteKeyChannelTableRowByFavoriteKeyChannelTable_FavoriteKeyEntries) {
                FavoriteKeyEntriesRow rowFavoriteKeyEntriesRow = ((FavoriteKeyEntriesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        FavoriteEntry,
                        null,
                        null};
                if ((parentFavoriteKeyChannelTableRowByFavoriteKeyChannelTable_FavoriteKeyEntries != null)) {
                    columnValuesArray[1] = parentFavoriteKeyChannelTableRowByFavoriteKeyChannelTable_FavoriteKeyEntries[2];
                }
                rowFavoriteKeyEntriesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFavoriteKeyEntriesRow);
                return rowFavoriteKeyEntriesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                FavoriteKeyEntriesDataTable cln = ((FavoriteKeyEntriesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FavoriteKeyEntriesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFavoriteEntry = base.Columns["FavoriteEntry"];
                this.columnFavoriteKeyEntries_fk = base.Columns["FavoriteKeyEntries_fk"];
                this.columnCodeOrder = base.Columns["CodeOrder"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFavoriteEntry = new global::System.Data.DataColumn("FavoriteEntry", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnFavoriteEntry);
                this.columnFavoriteKeyEntries_fk = new global::System.Data.DataColumn("FavoriteKeyEntries_fk", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnFavoriteKeyEntries_fk);
                this.columnCodeOrder = new global::System.Data.DataColumn("CodeOrder", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnCodeOrder);
                this.columnFavoriteEntry.AllowDBNull = false;
                this.columnFavoriteEntry.Namespace = "";
                this.columnFavoriteEntry.DefaultValue = ((byte)(0));
                this.columnFavoriteKeyEntries_fk.AllowDBNull = false;
                this.columnFavoriteKeyEntries_fk.Namespace = "";
                this.columnCodeOrder.AutoIncrement = true;
                this.columnCodeOrder.AutoIncrementSeed = 1;
                this.columnCodeOrder.AllowDBNull = false;
                this.columnCodeOrder.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FavoriteKeyEntriesRow NewFavoriteKeyEntriesRow() {
                return ((FavoriteKeyEntriesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FavoriteKeyEntriesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(FavoriteKeyEntriesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FavoriteKeyEntriesRowChanged != null)) {
                    this.FavoriteKeyEntriesRowChanged(this, new FavoriteKeyEntriesRowChangeEvent(((FavoriteKeyEntriesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FavoriteKeyEntriesRowChanging != null)) {
                    this.FavoriteKeyEntriesRowChanging(this, new FavoriteKeyEntriesRowChangeEvent(((FavoriteKeyEntriesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FavoriteKeyEntriesRowDeleted != null)) {
                    this.FavoriteKeyEntriesRowDeleted(this, new FavoriteKeyEntriesRowChangeEvent(((FavoriteKeyEntriesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FavoriteKeyEntriesRowDeleting != null)) {
                    this.FavoriteKeyEntriesRowDeleting(this, new FavoriteKeyEntriesRowChangeEvent(((FavoriteKeyEntriesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFavoriteKeyEntriesRow(FavoriteKeyEntriesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DeviceImagesDS ds = new DeviceImagesDS();
                xs.Add(ds.GetSchemaSerializable());
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FavoriteKeyEntriesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FavoriteKeyLabelsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnLabel;
            
            private global::System.Data.DataColumn columnFavoriteKeyLabels_fk;
            
            private global::System.Data.DataColumn columnCodeOrder;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FavoriteKeyLabelsDataTable() {
                this.TableName = "FavoriteKeyLabels";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FavoriteKeyLabelsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FavoriteKeyLabelsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LabelColumn {
                get {
                    return this.columnLabel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FavoriteKeyLabels_fkColumn {
                get {
                    return this.columnFavoriteKeyLabels_fk;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CodeOrderColumn {
                get {
                    return this.columnCodeOrder;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FavoriteKeyLabelsRow this[int index] {
                get {
                    return ((FavoriteKeyLabelsRow)(this.Rows[index]));
                }
            }
            
            public event FavoriteKeyLabelsRowChangeEventHandler FavoriteKeyLabelsRowChanging;
            
            public event FavoriteKeyLabelsRowChangeEventHandler FavoriteKeyLabelsRowChanged;
            
            public event FavoriteKeyLabelsRowChangeEventHandler FavoriteKeyLabelsRowDeleting;
            
            public event FavoriteKeyLabelsRowChangeEventHandler FavoriteKeyLabelsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFavoriteKeyLabelsRow(FavoriteKeyLabelsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FavoriteKeyLabelsRow AddFavoriteKeyLabelsRow(string Label, FavoriteKeyChannelTableRow parentFavoriteKeyChannelTableRowByFavoriteKeyChannelTable_FavoriteKeyLabels) {
                FavoriteKeyLabelsRow rowFavoriteKeyLabelsRow = ((FavoriteKeyLabelsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Label,
                        null,
                        null};
                if ((parentFavoriteKeyChannelTableRowByFavoriteKeyChannelTable_FavoriteKeyLabels != null)) {
                    columnValuesArray[1] = parentFavoriteKeyChannelTableRowByFavoriteKeyChannelTable_FavoriteKeyLabels[3];
                }
                rowFavoriteKeyLabelsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFavoriteKeyLabelsRow);
                return rowFavoriteKeyLabelsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                FavoriteKeyLabelsDataTable cln = ((FavoriteKeyLabelsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FavoriteKeyLabelsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLabel = base.Columns["Label"];
                this.columnFavoriteKeyLabels_fk = base.Columns["FavoriteKeyLabels_fk"];
                this.columnCodeOrder = base.Columns["CodeOrder"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLabel = new global::System.Data.DataColumn("Label", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnLabel);
                this.columnFavoriteKeyLabels_fk = new global::System.Data.DataColumn("FavoriteKeyLabels_fk", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnFavoriteKeyLabels_fk);
                this.columnCodeOrder = new global::System.Data.DataColumn("CodeOrder", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnCodeOrder);
                this.columnLabel.AllowDBNull = false;
                this.columnLabel.Namespace = "";
                this.columnLabel.DefaultValue = ((string)("nothing"));
                this.columnFavoriteKeyLabels_fk.AllowDBNull = false;
                this.columnFavoriteKeyLabels_fk.Namespace = "";
                this.columnCodeOrder.AutoIncrement = true;
                this.columnCodeOrder.AutoIncrementSeed = 1;
                this.columnCodeOrder.AllowDBNull = false;
                this.columnCodeOrder.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FavoriteKeyLabelsRow NewFavoriteKeyLabelsRow() {
                return ((FavoriteKeyLabelsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FavoriteKeyLabelsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(FavoriteKeyLabelsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FavoriteKeyLabelsRowChanged != null)) {
                    this.FavoriteKeyLabelsRowChanged(this, new FavoriteKeyLabelsRowChangeEvent(((FavoriteKeyLabelsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FavoriteKeyLabelsRowChanging != null)) {
                    this.FavoriteKeyLabelsRowChanging(this, new FavoriteKeyLabelsRowChangeEvent(((FavoriteKeyLabelsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FavoriteKeyLabelsRowDeleted != null)) {
                    this.FavoriteKeyLabelsRowDeleted(this, new FavoriteKeyLabelsRowChangeEvent(((FavoriteKeyLabelsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FavoriteKeyLabelsRowDeleting != null)) {
                    this.FavoriteKeyLabelsRowDeleting(this, new FavoriteKeyLabelsRowChangeEvent(((FavoriteKeyLabelsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFavoriteKeyLabelsRow(FavoriteKeyLabelsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DeviceImagesDS ds = new DeviceImagesDS();
                xs.Add(ds.GetSchemaSerializable());
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FavoriteKeyLabelsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LearnedKeysTableDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnModeKeyCode;
            
            private global::System.Data.DataColumn columnKeyCd;
            
            private global::System.Data.DataColumn columnLearnedKeyEntries_fk;
            
            private global::System.Data.DataColumn columnActive;
            
            private global::System.Data.DataColumn columnUserLocked;
            
            private global::System.Data.DataColumn columnServiceLocked;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LearnedKeysTableDataTable() {
                this.TableName = "LearnedKeysTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LearnedKeysTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LearnedKeysTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModeKeyCodeColumn {
                get {
                    return this.columnModeKeyCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KeyCdColumn {
                get {
                    return this.columnKeyCd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LearnedKeyEntries_fkColumn {
                get {
                    return this.columnLearnedKeyEntries_fk;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActiveColumn {
                get {
                    return this.columnActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserLockedColumn {
                get {
                    return this.columnUserLocked;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ServiceLockedColumn {
                get {
                    return this.columnServiceLocked;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LearnedKeysTableRow this[int index] {
                get {
                    return ((LearnedKeysTableRow)(this.Rows[index]));
                }
            }
            
            public event LearnedKeysTableRowChangeEventHandler LearnedKeysTableRowChanging;
            
            public event LearnedKeysTableRowChangeEventHandler LearnedKeysTableRowChanged;
            
            public event LearnedKeysTableRowChangeEventHandler LearnedKeysTableRowDeleting;
            
            public event LearnedKeysTableRowChangeEventHandler LearnedKeysTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLearnedKeysTableRow(LearnedKeysTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LearnedKeysTableRow AddLearnedKeysTableRow(byte ModeKeyCode, byte KeyCd, bool Active, bool UserLocked, bool ServiceLocked) {
                LearnedKeysTableRow rowLearnedKeysTableRow = ((LearnedKeysTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ModeKeyCode,
                        KeyCd,
                        null,
                        Active,
                        UserLocked,
                        ServiceLocked};
                rowLearnedKeysTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLearnedKeysTableRow);
                return rowLearnedKeysTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LearnedKeysTableDataTable cln = ((LearnedKeysTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LearnedKeysTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnModeKeyCode = base.Columns["ModeKeyCode"];
                this.columnKeyCd = base.Columns["KeyCd"];
                this.columnLearnedKeyEntries_fk = base.Columns["LearnedKeyEntries_fk"];
                this.columnActive = base.Columns["Active"];
                this.columnUserLocked = base.Columns["UserLocked"];
                this.columnServiceLocked = base.Columns["ServiceLocked"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnModeKeyCode = new global::System.Data.DataColumn("ModeKeyCode", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnModeKeyCode);
                this.columnKeyCd = new global::System.Data.DataColumn("KeyCd", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnKeyCd);
                this.columnLearnedKeyEntries_fk = new global::System.Data.DataColumn("LearnedKeyEntries_fk", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnLearnedKeyEntries_fk);
                this.columnActive = new global::System.Data.DataColumn("Active", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnActive);
                this.columnUserLocked = new global::System.Data.DataColumn("UserLocked", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnUserLocked);
                this.columnServiceLocked = new global::System.Data.DataColumn("ServiceLocked", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnServiceLocked);
                this.columnModeKeyCode.AllowDBNull = false;
                this.columnModeKeyCode.Namespace = "";
                this.columnModeKeyCode.DefaultValue = ((byte)(0));
                this.columnKeyCd.AllowDBNull = false;
                this.columnKeyCd.Namespace = "";
                this.columnKeyCd.DefaultValue = ((byte)(0));
                this.columnLearnedKeyEntries_fk.AutoIncrement = true;
                this.columnLearnedKeyEntries_fk.AutoIncrementSeed = 1;
                this.columnLearnedKeyEntries_fk.AllowDBNull = false;
                this.columnLearnedKeyEntries_fk.Namespace = "";
                this.columnActive.AllowDBNull = false;
                this.columnActive.Namespace = "";
                this.columnActive.DefaultValue = ((bool)(false));
                this.columnUserLocked.AllowDBNull = false;
                this.columnUserLocked.Namespace = "";
                this.columnUserLocked.DefaultValue = ((bool)(false));
                this.columnServiceLocked.AllowDBNull = false;
                this.columnServiceLocked.Namespace = "";
                this.columnServiceLocked.DefaultValue = ((bool)(false));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LearnedKeysTableRow NewLearnedKeysTableRow() {
                return ((LearnedKeysTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LearnedKeysTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LearnedKeysTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LearnedKeysTableRowChanged != null)) {
                    this.LearnedKeysTableRowChanged(this, new LearnedKeysTableRowChangeEvent(((LearnedKeysTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LearnedKeysTableRowChanging != null)) {
                    this.LearnedKeysTableRowChanging(this, new LearnedKeysTableRowChangeEvent(((LearnedKeysTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LearnedKeysTableRowDeleted != null)) {
                    this.LearnedKeysTableRowDeleted(this, new LearnedKeysTableRowChangeEvent(((LearnedKeysTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LearnedKeysTableRowDeleting != null)) {
                    this.LearnedKeysTableRowDeleting(this, new LearnedKeysTableRowChangeEvent(((LearnedKeysTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLearnedKeysTableRow(LearnedKeysTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DeviceImagesDS ds = new DeviceImagesDS();
                xs.Add(ds.GetSchemaSerializable());
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LearnedKeysTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LearnedKeyEntriesDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnLearnedEntry;
            
            private global::System.Data.DataColumn columnLearnedKeyEntries_fk;
            
            private global::System.Data.DataColumn columnCodeOrder;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LearnedKeyEntriesDataTable() {
                this.TableName = "LearnedKeyEntries";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LearnedKeyEntriesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LearnedKeyEntriesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LearnedEntryColumn {
                get {
                    return this.columnLearnedEntry;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LearnedKeyEntries_fkColumn {
                get {
                    return this.columnLearnedKeyEntries_fk;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CodeOrderColumn {
                get {
                    return this.columnCodeOrder;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LearnedKeyEntriesRow this[int index] {
                get {
                    return ((LearnedKeyEntriesRow)(this.Rows[index]));
                }
            }
            
            public event LearnedKeyEntriesRowChangeEventHandler LearnedKeyEntriesRowChanging;
            
            public event LearnedKeyEntriesRowChangeEventHandler LearnedKeyEntriesRowChanged;
            
            public event LearnedKeyEntriesRowChangeEventHandler LearnedKeyEntriesRowDeleting;
            
            public event LearnedKeyEntriesRowChangeEventHandler LearnedKeyEntriesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLearnedKeyEntriesRow(LearnedKeyEntriesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LearnedKeyEntriesRow AddLearnedKeyEntriesRow(byte LearnedEntry, LearnedKeysTableRow parentLearnedKeysTableRowByLearnedKeysTable_LearnedKeyEntries) {
                LearnedKeyEntriesRow rowLearnedKeyEntriesRow = ((LearnedKeyEntriesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        LearnedEntry,
                        null,
                        null};
                if ((parentLearnedKeysTableRowByLearnedKeysTable_LearnedKeyEntries != null)) {
                    columnValuesArray[1] = parentLearnedKeysTableRowByLearnedKeysTable_LearnedKeyEntries[2];
                }
                rowLearnedKeyEntriesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLearnedKeyEntriesRow);
                return rowLearnedKeyEntriesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LearnedKeyEntriesDataTable cln = ((LearnedKeyEntriesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LearnedKeyEntriesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLearnedEntry = base.Columns["LearnedEntry"];
                this.columnLearnedKeyEntries_fk = base.Columns["LearnedKeyEntries_fk"];
                this.columnCodeOrder = base.Columns["CodeOrder"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLearnedEntry = new global::System.Data.DataColumn("LearnedEntry", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnLearnedEntry);
                this.columnLearnedKeyEntries_fk = new global::System.Data.DataColumn("LearnedKeyEntries_fk", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnLearnedKeyEntries_fk);
                this.columnCodeOrder = new global::System.Data.DataColumn("CodeOrder", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnCodeOrder);
                this.columnLearnedEntry.AllowDBNull = false;
                this.columnLearnedEntry.Namespace = "";
                this.columnLearnedEntry.DefaultValue = ((byte)(0));
                this.columnLearnedKeyEntries_fk.AllowDBNull = false;
                this.columnLearnedKeyEntries_fk.Namespace = "";
                this.columnCodeOrder.AutoIncrement = true;
                this.columnCodeOrder.AutoIncrementSeed = 1;
                this.columnCodeOrder.AllowDBNull = false;
                this.columnCodeOrder.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LearnedKeyEntriesRow NewLearnedKeyEntriesRow() {
                return ((LearnedKeyEntriesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LearnedKeyEntriesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LearnedKeyEntriesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LearnedKeyEntriesRowChanged != null)) {
                    this.LearnedKeyEntriesRowChanged(this, new LearnedKeyEntriesRowChangeEvent(((LearnedKeyEntriesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LearnedKeyEntriesRowChanging != null)) {
                    this.LearnedKeyEntriesRowChanging(this, new LearnedKeyEntriesRowChangeEvent(((LearnedKeyEntriesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LearnedKeyEntriesRowDeleted != null)) {
                    this.LearnedKeyEntriesRowDeleted(this, new LearnedKeyEntriesRowChangeEvent(((LearnedKeyEntriesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LearnedKeyEntriesRowDeleting != null)) {
                    this.LearnedKeyEntriesRowDeleting(this, new LearnedKeyEntriesRowChangeEvent(((LearnedKeyEntriesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLearnedKeyEntriesRow(LearnedKeyEntriesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DeviceImagesDS ds = new DeviceImagesDS();
                xs.Add(ds.GetSchemaSerializable());
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LearnedKeyEntriesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DevicesDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnDBDevType;
            
            private global::System.Data.DataColumn columnDBDevID;
            
            private global::System.Data.DataColumn columnModeKeyCode;
            
            private global::System.Data.DataColumn columnKeyCd;
            
            private global::System.Data.DataColumn columnExecutorNumber;
            
            private global::System.Data.DataColumn columnExecutor_fk;
            
            private global::System.Data.DataColumn columnPrefix_fk;
            
            private global::System.Data.DataColumn columnActive;
            
            private global::System.Data.DataColumn columnUserLocked;
            
            private global::System.Data.DataColumn columnServiceLocked;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DevicesDataTable() {
                this.TableName = "Devices";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DevicesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DevicesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DBDevTypeColumn {
                get {
                    return this.columnDBDevType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DBDevIDColumn {
                get {
                    return this.columnDBDevID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModeKeyCodeColumn {
                get {
                    return this.columnModeKeyCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KeyCdColumn {
                get {
                    return this.columnKeyCd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExecutorNumberColumn {
                get {
                    return this.columnExecutorNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Executor_fkColumn {
                get {
                    return this.columnExecutor_fk;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Prefix_fkColumn {
                get {
                    return this.columnPrefix_fk;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActiveColumn {
                get {
                    return this.columnActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserLockedColumn {
                get {
                    return this.columnUserLocked;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ServiceLockedColumn {
                get {
                    return this.columnServiceLocked;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DevicesRow this[int index] {
                get {
                    return ((DevicesRow)(this.Rows[index]));
                }
            }
            
            public event DevicesRowChangeEventHandler DevicesRowChanging;
            
            public event DevicesRowChangeEventHandler DevicesRowChanged;
            
            public event DevicesRowChangeEventHandler DevicesRowDeleting;
            
            public event DevicesRowChangeEventHandler DevicesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDevicesRow(DevicesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DevicesRow AddDevicesRow(byte DBDevType, ushort DBDevID, byte ModeKeyCode, byte KeyCd, ushort ExecutorNumber, bool Active, bool UserLocked, bool ServiceLocked) {
                DevicesRow rowDevicesRow = ((DevicesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        DBDevType,
                        DBDevID,
                        ModeKeyCode,
                        KeyCd,
                        ExecutorNumber,
                        null,
                        null,
                        Active,
                        UserLocked,
                        ServiceLocked};
                rowDevicesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDevicesRow);
                return rowDevicesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DevicesRow FindByDBDevTypeDBDevID(byte DBDevType, ushort DBDevID) {
                return ((DevicesRow)(this.Rows.Find(new object[] {
                            DBDevType,
                            DBDevID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DevicesDataTable cln = ((DevicesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DevicesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDBDevType = base.Columns["DBDevType"];
                this.columnDBDevID = base.Columns["DBDevID"];
                this.columnModeKeyCode = base.Columns["ModeKeyCode"];
                this.columnKeyCd = base.Columns["KeyCd"];
                this.columnExecutorNumber = base.Columns["ExecutorNumber"];
                this.columnExecutor_fk = base.Columns["Executor_fk"];
                this.columnPrefix_fk = base.Columns["Prefix_fk"];
                this.columnActive = base.Columns["Active"];
                this.columnUserLocked = base.Columns["UserLocked"];
                this.columnServiceLocked = base.Columns["ServiceLocked"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDBDevType = new global::System.Data.DataColumn("DBDevType", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDBDevType);
                this.columnDBDevID = new global::System.Data.DataColumn("DBDevID", typeof(ushort), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDBDevID);
                this.columnModeKeyCode = new global::System.Data.DataColumn("ModeKeyCode", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnModeKeyCode);
                this.columnKeyCd = new global::System.Data.DataColumn("KeyCd", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnKeyCd);
                this.columnExecutorNumber = new global::System.Data.DataColumn("ExecutorNumber", typeof(ushort), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnExecutorNumber);
                this.columnExecutor_fk = new global::System.Data.DataColumn("Executor_fk", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnExecutor_fk);
                this.columnPrefix_fk = new global::System.Data.DataColumn("Prefix_fk", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnPrefix_fk);
                this.columnActive = new global::System.Data.DataColumn("Active", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnActive);
                this.columnUserLocked = new global::System.Data.DataColumn("UserLocked", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnUserLocked);
                this.columnServiceLocked = new global::System.Data.DataColumn("ServiceLocked", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnServiceLocked);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnDBDevType,
                                this.columnDBDevID}, true));
                this.columnDBDevType.AllowDBNull = false;
                this.columnDBDevType.Namespace = "";
                this.columnDBDevType.DefaultValue = ((byte)(0));
                this.columnDBDevID.AllowDBNull = false;
                this.columnDBDevID.Namespace = "";
                this.columnDBDevID.DefaultValue = ((ushort)(0));
                this.columnModeKeyCode.AllowDBNull = false;
                this.columnModeKeyCode.Namespace = "";
                this.columnModeKeyCode.DefaultValue = ((byte)(0));
                this.columnKeyCd.AllowDBNull = false;
                this.columnKeyCd.Namespace = "";
                this.columnKeyCd.DefaultValue = ((byte)(0));
                this.columnExecutorNumber.AllowDBNull = false;
                this.columnExecutorNumber.Namespace = "";
                this.columnExecutorNumber.DefaultValue = ((ushort)(0));
                this.columnExecutor_fk.AutoIncrement = true;
                this.columnExecutor_fk.AutoIncrementSeed = 1;
                this.columnExecutor_fk.AllowDBNull = false;
                this.columnExecutor_fk.Namespace = "";
                this.columnPrefix_fk.AutoIncrement = true;
                this.columnPrefix_fk.AutoIncrementSeed = 1;
                this.columnPrefix_fk.AllowDBNull = false;
                this.columnPrefix_fk.Namespace = "";
                this.columnActive.AllowDBNull = false;
                this.columnActive.Namespace = "";
                this.columnActive.DefaultValue = ((bool)(false));
                this.columnUserLocked.AllowDBNull = false;
                this.columnUserLocked.Namespace = "";
                this.columnUserLocked.DefaultValue = ((bool)(false));
                this.columnServiceLocked.AllowDBNull = false;
                this.columnServiceLocked.Namespace = "";
                this.columnServiceLocked.DefaultValue = ((bool)(false));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DevicesRow NewDevicesRow() {
                return ((DevicesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DevicesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DevicesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DevicesRowChanged != null)) {
                    this.DevicesRowChanged(this, new DevicesRowChangeEvent(((DevicesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DevicesRowChanging != null)) {
                    this.DevicesRowChanging(this, new DevicesRowChangeEvent(((DevicesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DevicesRowDeleted != null)) {
                    this.DevicesRowDeleted(this, new DevicesRowChangeEvent(((DevicesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DevicesRowDeleting != null)) {
                    this.DevicesRowDeleting(this, new DevicesRowChangeEvent(((DevicesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDevicesRow(DevicesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DeviceImagesDS ds = new DeviceImagesDS();
                xs.Add(ds.GetSchemaSerializable());
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DevicesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ExecutorsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnExecutorCode;
            
            private global::System.Data.DataColumn columnExecutor_fk;
            
            private global::System.Data.DataColumn columnCodeOrder;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExecutorsDataTable() {
                this.TableName = "Executors";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ExecutorsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ExecutorsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExecutorCodeColumn {
                get {
                    return this.columnExecutorCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Executor_fkColumn {
                get {
                    return this.columnExecutor_fk;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CodeOrderColumn {
                get {
                    return this.columnCodeOrder;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExecutorsRow this[int index] {
                get {
                    return ((ExecutorsRow)(this.Rows[index]));
                }
            }
            
            public event ExecutorsRowChangeEventHandler ExecutorsRowChanging;
            
            public event ExecutorsRowChangeEventHandler ExecutorsRowChanged;
            
            public event ExecutorsRowChangeEventHandler ExecutorsRowDeleting;
            
            public event ExecutorsRowChangeEventHandler ExecutorsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddExecutorsRow(ExecutorsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExecutorsRow AddExecutorsRow(ushort ExecutorCode, DevicesRow parentDevicesRowByDevicesToExecutors) {
                ExecutorsRow rowExecutorsRow = ((ExecutorsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ExecutorCode,
                        null,
                        null};
                if ((parentDevicesRowByDevicesToExecutors != null)) {
                    columnValuesArray[1] = parentDevicesRowByDevicesToExecutors[5];
                }
                rowExecutorsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowExecutorsRow);
                return rowExecutorsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ExecutorsDataTable cln = ((ExecutorsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ExecutorsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnExecutorCode = base.Columns["ExecutorCode"];
                this.columnExecutor_fk = base.Columns["Executor_fk"];
                this.columnCodeOrder = base.Columns["CodeOrder"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnExecutorCode = new global::System.Data.DataColumn("ExecutorCode", typeof(ushort), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnExecutorCode);
                this.columnExecutor_fk = new global::System.Data.DataColumn("Executor_fk", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnExecutor_fk);
                this.columnCodeOrder = new global::System.Data.DataColumn("CodeOrder", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnCodeOrder);
                this.columnExecutorCode.AllowDBNull = false;
                this.columnExecutorCode.Namespace = "";
                this.columnExecutor_fk.AllowDBNull = false;
                this.columnExecutor_fk.Namespace = "";
                this.columnCodeOrder.AutoIncrement = true;
                this.columnCodeOrder.AutoIncrementSeed = 1;
                this.columnCodeOrder.AllowDBNull = false;
                this.columnCodeOrder.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExecutorsRow NewExecutorsRow() {
                return ((ExecutorsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ExecutorsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ExecutorsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ExecutorsRowChanged != null)) {
                    this.ExecutorsRowChanged(this, new ExecutorsRowChangeEvent(((ExecutorsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ExecutorsRowChanging != null)) {
                    this.ExecutorsRowChanging(this, new ExecutorsRowChangeEvent(((ExecutorsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ExecutorsRowDeleted != null)) {
                    this.ExecutorsRowDeleted(this, new ExecutorsRowChangeEvent(((ExecutorsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ExecutorsRowDeleting != null)) {
                    this.ExecutorsRowDeleting(this, new ExecutorsRowChangeEvent(((ExecutorsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveExecutorsRow(ExecutorsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DeviceImagesDS ds = new DeviceImagesDS();
                xs.Add(ds.GetSchemaSerializable());
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ExecutorsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PrefixesDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnPrefixCode;
            
            private global::System.Data.DataColumn columnPrefix_fk;
            
            private global::System.Data.DataColumn columnCodeOrder;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrefixesDataTable() {
                this.TableName = "Prefixes";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PrefixesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PrefixesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PrefixCodeColumn {
                get {
                    return this.columnPrefixCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Prefix_fkColumn {
                get {
                    return this.columnPrefix_fk;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CodeOrderColumn {
                get {
                    return this.columnCodeOrder;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrefixesRow this[int index] {
                get {
                    return ((PrefixesRow)(this.Rows[index]));
                }
            }
            
            public event PrefixesRowChangeEventHandler PrefixesRowChanging;
            
            public event PrefixesRowChangeEventHandler PrefixesRowChanged;
            
            public event PrefixesRowChangeEventHandler PrefixesRowDeleting;
            
            public event PrefixesRowChangeEventHandler PrefixesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPrefixesRow(PrefixesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrefixesRow AddPrefixesRow(byte PrefixCode, DevicesRow parentDevicesRowByDevicesToPrefixes) {
                PrefixesRow rowPrefixesRow = ((PrefixesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        PrefixCode,
                        null,
                        null};
                if ((parentDevicesRowByDevicesToPrefixes != null)) {
                    columnValuesArray[1] = parentDevicesRowByDevicesToPrefixes[6];
                }
                rowPrefixesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPrefixesRow);
                return rowPrefixesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PrefixesDataTable cln = ((PrefixesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PrefixesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPrefixCode = base.Columns["PrefixCode"];
                this.columnPrefix_fk = base.Columns["Prefix_fk"];
                this.columnCodeOrder = base.Columns["CodeOrder"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPrefixCode = new global::System.Data.DataColumn("PrefixCode", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnPrefixCode);
                this.columnPrefix_fk = new global::System.Data.DataColumn("Prefix_fk", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnPrefix_fk);
                this.columnCodeOrder = new global::System.Data.DataColumn("CodeOrder", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnCodeOrder);
                this.columnPrefixCode.AllowDBNull = false;
                this.columnPrefixCode.Namespace = "";
                this.columnPrefix_fk.AllowDBNull = false;
                this.columnPrefix_fk.Namespace = "";
                this.columnCodeOrder.AutoIncrement = true;
                this.columnCodeOrder.AutoIncrementSeed = 1;
                this.columnCodeOrder.AllowDBNull = false;
                this.columnCodeOrder.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrefixesRow NewPrefixesRow() {
                return ((PrefixesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PrefixesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PrefixesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PrefixesRowChanged != null)) {
                    this.PrefixesRowChanged(this, new PrefixesRowChangeEvent(((PrefixesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PrefixesRowChanging != null)) {
                    this.PrefixesRowChanging(this, new PrefixesRowChangeEvent(((PrefixesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PrefixesRowDeleted != null)) {
                    this.PrefixesRowDeleted(this, new PrefixesRowChangeEvent(((PrefixesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PrefixesRowDeleting != null)) {
                    this.PrefixesRowDeleting(this, new PrefixesRowChangeEvent(((PrefixesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePrefixesRow(PrefixesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DeviceImagesDS ds = new DeviceImagesDS();
                xs.Add(ds.GetSchemaSerializable());
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PrefixesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class KeyIRsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnKeyIRCode;
            
            private global::System.Data.DataColumn columnKey_fk;
            
            private global::System.Data.DataColumn columnCodeOrder;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KeyIRsDataTable() {
                this.TableName = "KeyIRs";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal KeyIRsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected KeyIRsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KeyIRCodeColumn {
                get {
                    return this.columnKeyIRCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Key_fkColumn {
                get {
                    return this.columnKey_fk;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CodeOrderColumn {
                get {
                    return this.columnCodeOrder;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KeyIRsRow this[int index] {
                get {
                    return ((KeyIRsRow)(this.Rows[index]));
                }
            }
            
            public event KeyIRsRowChangeEventHandler KeyIRsRowChanging;
            
            public event KeyIRsRowChangeEventHandler KeyIRsRowChanged;
            
            public event KeyIRsRowChangeEventHandler KeyIRsRowDeleting;
            
            public event KeyIRsRowChangeEventHandler KeyIRsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddKeyIRsRow(KeyIRsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KeyIRsRow AddKeyIRsRow(ushort KeyIRCode, KeysRow parentKeysRowByKeysToKeysIR) {
                KeyIRsRow rowKeyIRsRow = ((KeyIRsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        KeyIRCode,
                        null,
                        null};
                if ((parentKeysRowByKeysToKeysIR != null)) {
                    columnValuesArray[1] = parentKeysRowByKeysToKeysIR[7];
                }
                rowKeyIRsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowKeyIRsRow);
                return rowKeyIRsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                KeyIRsDataTable cln = ((KeyIRsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new KeyIRsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnKeyIRCode = base.Columns["KeyIRCode"];
                this.columnKey_fk = base.Columns["Key_fk"];
                this.columnCodeOrder = base.Columns["CodeOrder"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnKeyIRCode = new global::System.Data.DataColumn("KeyIRCode", typeof(ushort), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnKeyIRCode);
                this.columnKey_fk = new global::System.Data.DataColumn("Key_fk", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnKey_fk);
                this.columnCodeOrder = new global::System.Data.DataColumn("CodeOrder", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnCodeOrder);
                this.columnKeyIRCode.AllowDBNull = false;
                this.columnKeyIRCode.Namespace = "";
                this.columnKey_fk.AllowDBNull = false;
                this.columnKey_fk.Namespace = "";
                this.columnCodeOrder.AutoIncrement = true;
                this.columnCodeOrder.AutoIncrementSeed = 1;
                this.columnCodeOrder.AllowDBNull = false;
                this.columnCodeOrder.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KeyIRsRow NewKeyIRsRow() {
                return ((KeyIRsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new KeyIRsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(KeyIRsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.KeyIRsRowChanged != null)) {
                    this.KeyIRsRowChanged(this, new KeyIRsRowChangeEvent(((KeyIRsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.KeyIRsRowChanging != null)) {
                    this.KeyIRsRowChanging(this, new KeyIRsRowChangeEvent(((KeyIRsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.KeyIRsRowDeleted != null)) {
                    this.KeyIRsRowDeleted(this, new KeyIRsRowChangeEvent(((KeyIRsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.KeyIRsRowDeleting != null)) {
                    this.KeyIRsRowDeleting(this, new KeyIRsRowChangeEvent(((KeyIRsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveKeyIRsRow(KeyIRsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DeviceImagesDS ds = new DeviceImagesDS();
                xs.Add(ds.GetSchemaSerializable());
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "KeyIRsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ModesDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnDBDevType;
            
            private global::System.Data.DataColumn columnDBDevID;
            
            private global::System.Data.DataColumn columnModeKeyCode;
            
            private global::System.Data.DataColumn columnKeyCd;
            
            private global::System.Data.DataColumn columnActive;
            
            private global::System.Data.DataColumn columnUserLocked;
            
            private global::System.Data.DataColumn columnServiceLocked;
            
            private global::System.Data.DataColumn columnAudioSource;
            
            private global::System.Data.DataColumn columnVideoSource;
            
            private global::System.Data.DataColumn columnChannelSource;
            
            private global::System.Data.DataColumn columnModeFlag;
            
            private global::System.Data.DataColumn columnFont;
            
            private global::System.Data.DataColumn columnLength;
            
            private global::System.Data.DataColumn columnLabel;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModesDataTable() {
                this.TableName = "Modes";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ModesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ModesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DBDevTypeColumn {
                get {
                    return this.columnDBDevType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DBDevIDColumn {
                get {
                    return this.columnDBDevID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModeKeyCodeColumn {
                get {
                    return this.columnModeKeyCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KeyCdColumn {
                get {
                    return this.columnKeyCd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActiveColumn {
                get {
                    return this.columnActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserLockedColumn {
                get {
                    return this.columnUserLocked;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ServiceLockedColumn {
                get {
                    return this.columnServiceLocked;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AudioSourceColumn {
                get {
                    return this.columnAudioSource;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VideoSourceColumn {
                get {
                    return this.columnVideoSource;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ChannelSourceColumn {
                get {
                    return this.columnChannelSource;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModeFlagColumn {
                get {
                    return this.columnModeFlag;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FontColumn {
                get {
                    return this.columnFont;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LengthColumn {
                get {
                    return this.columnLength;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LabelColumn {
                get {
                    return this.columnLabel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModesRow this[int index] {
                get {
                    return ((ModesRow)(this.Rows[index]));
                }
            }
            
            public event ModesRowChangeEventHandler ModesRowChanging;
            
            public event ModesRowChangeEventHandler ModesRowChanged;
            
            public event ModesRowChangeEventHandler ModesRowDeleting;
            
            public event ModesRowChangeEventHandler ModesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddModesRow(ModesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModesRow AddModesRow(byte DBDevType, ushort DBDevID, byte ModeKeyCode, byte KeyCd, bool Active, bool UserLocked, bool ServiceLocked, byte AudioSource, byte VideoSource, byte ChannelSource, byte ModeFlag, byte Font, byte Length, string Label) {
                ModesRow rowModesRow = ((ModesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        DBDevType,
                        DBDevID,
                        ModeKeyCode,
                        KeyCd,
                        Active,
                        UserLocked,
                        ServiceLocked,
                        AudioSource,
                        VideoSource,
                        ChannelSource,
                        ModeFlag,
                        Font,
                        Length,
                        Label};
                rowModesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowModesRow);
                return rowModesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ModesDataTable cln = ((ModesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ModesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDBDevType = base.Columns["DBDevType"];
                this.columnDBDevID = base.Columns["DBDevID"];
                this.columnModeKeyCode = base.Columns["ModeKeyCode"];
                this.columnKeyCd = base.Columns["KeyCd"];
                this.columnActive = base.Columns["Active"];
                this.columnUserLocked = base.Columns["UserLocked"];
                this.columnServiceLocked = base.Columns["ServiceLocked"];
                this.columnAudioSource = base.Columns["AudioSource"];
                this.columnVideoSource = base.Columns["VideoSource"];
                this.columnChannelSource = base.Columns["ChannelSource"];
                this.columnModeFlag = base.Columns["ModeFlag"];
                this.columnFont = base.Columns["Font"];
                this.columnLength = base.Columns["Length"];
                this.columnLabel = base.Columns["Label"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDBDevType = new global::System.Data.DataColumn("DBDevType", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDBDevType);
                this.columnDBDevID = new global::System.Data.DataColumn("DBDevID", typeof(ushort), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDBDevID);
                this.columnModeKeyCode = new global::System.Data.DataColumn("ModeKeyCode", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnModeKeyCode);
                this.columnKeyCd = new global::System.Data.DataColumn("KeyCd", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnKeyCd);
                this.columnActive = new global::System.Data.DataColumn("Active", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnActive);
                this.columnUserLocked = new global::System.Data.DataColumn("UserLocked", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnUserLocked);
                this.columnServiceLocked = new global::System.Data.DataColumn("ServiceLocked", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnServiceLocked);
                this.columnAudioSource = new global::System.Data.DataColumn("AudioSource", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnAudioSource);
                this.columnVideoSource = new global::System.Data.DataColumn("VideoSource", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnVideoSource);
                this.columnChannelSource = new global::System.Data.DataColumn("ChannelSource", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnChannelSource);
                this.columnModeFlag = new global::System.Data.DataColumn("ModeFlag", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnModeFlag);
                this.columnFont = new global::System.Data.DataColumn("Font", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnFont);
                this.columnLength = new global::System.Data.DataColumn("Length", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnLength);
                this.columnLabel = new global::System.Data.DataColumn("Label", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnLabel);
                this.columnDBDevType.AllowDBNull = false;
                this.columnDBDevType.Namespace = "";
                this.columnDBDevType.DefaultValue = ((byte)(0));
                this.columnDBDevID.AllowDBNull = false;
                this.columnDBDevID.Namespace = "";
                this.columnDBDevID.DefaultValue = ((ushort)(0));
                this.columnModeKeyCode.AllowDBNull = false;
                this.columnModeKeyCode.Namespace = "";
                this.columnModeKeyCode.DefaultValue = ((byte)(0));
                this.columnKeyCd.AllowDBNull = false;
                this.columnKeyCd.Namespace = "";
                this.columnKeyCd.DefaultValue = ((byte)(0));
                this.columnActive.AllowDBNull = false;
                this.columnActive.Namespace = "";
                this.columnActive.DefaultValue = ((bool)(false));
                this.columnUserLocked.AllowDBNull = false;
                this.columnUserLocked.Namespace = "";
                this.columnUserLocked.DefaultValue = ((bool)(false));
                this.columnServiceLocked.AllowDBNull = false;
                this.columnServiceLocked.Namespace = "";
                this.columnServiceLocked.DefaultValue = ((bool)(false));
                this.columnAudioSource.AllowDBNull = false;
                this.columnAudioSource.Namespace = "";
                this.columnAudioSource.DefaultValue = ((byte)(0));
                this.columnVideoSource.AllowDBNull = false;
                this.columnVideoSource.Namespace = "";
                this.columnVideoSource.DefaultValue = ((byte)(0));
                this.columnChannelSource.AllowDBNull = false;
                this.columnChannelSource.Namespace = "";
                this.columnChannelSource.DefaultValue = ((byte)(0));
                this.columnModeFlag.AllowDBNull = false;
                this.columnModeFlag.Namespace = "";
                this.columnModeFlag.DefaultValue = ((byte)(255));
                this.columnFont.AllowDBNull = false;
                this.columnFont.Namespace = "";
                this.columnFont.DefaultValue = ((byte)(255));
                this.columnLength.AllowDBNull = false;
                this.columnLength.Namespace = "";
                this.columnLength.DefaultValue = ((byte)(255));
                this.columnLabel.AllowDBNull = false;
                this.columnLabel.Namespace = "";
                this.columnLabel.DefaultValue = ((string)("nothing"));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModesRow NewModesRow() {
                return ((ModesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ModesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ModesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ModesRowChanged != null)) {
                    this.ModesRowChanged(this, new ModesRowChangeEvent(((ModesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ModesRowChanging != null)) {
                    this.ModesRowChanging(this, new ModesRowChangeEvent(((ModesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ModesRowDeleted != null)) {
                    this.ModesRowDeleted(this, new ModesRowChangeEvent(((ModesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ModesRowDeleting != null)) {
                    this.ModesRowDeleting(this, new ModesRowChangeEvent(((ModesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveModesRow(ModesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DeviceImagesDS ds = new DeviceImagesDS();
                xs.Add(ds.GetSchemaSerializable());
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ModesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LCDSetupDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnModeKeyCode;
            
            private global::System.Data.DataColumn columnKeyCd;
            
            private global::System.Data.DataColumn columnActive;
            
            private global::System.Data.DataColumn columnUserLocked;
            
            private global::System.Data.DataColumn columnServiceLocked;
            
            private global::System.Data.DataColumn columnContrastLevel;
            
            private global::System.Data.DataColumn columnLCD_Timeout;
            
            private global::System.Data.DataColumn columnLanguage;
            
            private global::System.Data.DataColumn columnClockFormat;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LCDSetupDataTable() {
                this.TableName = "LCDSetup";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LCDSetupDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LCDSetupDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModeKeyCodeColumn {
                get {
                    return this.columnModeKeyCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KeyCdColumn {
                get {
                    return this.columnKeyCd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActiveColumn {
                get {
                    return this.columnActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserLockedColumn {
                get {
                    return this.columnUserLocked;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ServiceLockedColumn {
                get {
                    return this.columnServiceLocked;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ContrastLevelColumn {
                get {
                    return this.columnContrastLevel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LCD_TimeoutColumn {
                get {
                    return this.columnLCD_Timeout;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LanguageColumn {
                get {
                    return this.columnLanguage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClockFormatColumn {
                get {
                    return this.columnClockFormat;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LCDSetupRow this[int index] {
                get {
                    return ((LCDSetupRow)(this.Rows[index]));
                }
            }
            
            public event LCDSetupRowChangeEventHandler LCDSetupRowChanging;
            
            public event LCDSetupRowChangeEventHandler LCDSetupRowChanged;
            
            public event LCDSetupRowChangeEventHandler LCDSetupRowDeleting;
            
            public event LCDSetupRowChangeEventHandler LCDSetupRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLCDSetupRow(LCDSetupRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LCDSetupRow AddLCDSetupRow(byte ModeKeyCode, byte KeyCd, bool Active, bool UserLocked, bool ServiceLocked, byte ContrastLevel, byte LCD_Timeout, byte Language, byte ClockFormat) {
                LCDSetupRow rowLCDSetupRow = ((LCDSetupRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ModeKeyCode,
                        KeyCd,
                        Active,
                        UserLocked,
                        ServiceLocked,
                        ContrastLevel,
                        LCD_Timeout,
                        Language,
                        ClockFormat};
                rowLCDSetupRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLCDSetupRow);
                return rowLCDSetupRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LCDSetupDataTable cln = ((LCDSetupDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LCDSetupDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnModeKeyCode = base.Columns["ModeKeyCode"];
                this.columnKeyCd = base.Columns["KeyCd"];
                this.columnActive = base.Columns["Active"];
                this.columnUserLocked = base.Columns["UserLocked"];
                this.columnServiceLocked = base.Columns["ServiceLocked"];
                this.columnContrastLevel = base.Columns["ContrastLevel"];
                this.columnLCD_Timeout = base.Columns["LCD_Timeout"];
                this.columnLanguage = base.Columns["Language"];
                this.columnClockFormat = base.Columns["ClockFormat"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnModeKeyCode = new global::System.Data.DataColumn("ModeKeyCode", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnModeKeyCode);
                this.columnKeyCd = new global::System.Data.DataColumn("KeyCd", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnKeyCd);
                this.columnActive = new global::System.Data.DataColumn("Active", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnActive);
                this.columnUserLocked = new global::System.Data.DataColumn("UserLocked", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnUserLocked);
                this.columnServiceLocked = new global::System.Data.DataColumn("ServiceLocked", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnServiceLocked);
                this.columnContrastLevel = new global::System.Data.DataColumn("ContrastLevel", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnContrastLevel);
                this.columnLCD_Timeout = new global::System.Data.DataColumn("LCD_Timeout", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnLCD_Timeout);
                this.columnLanguage = new global::System.Data.DataColumn("Language", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnLanguage);
                this.columnClockFormat = new global::System.Data.DataColumn("ClockFormat", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnClockFormat);
                this.columnModeKeyCode.AllowDBNull = false;
                this.columnModeKeyCode.Namespace = "";
                this.columnModeKeyCode.DefaultValue = ((byte)(0));
                this.columnKeyCd.AllowDBNull = false;
                this.columnKeyCd.Namespace = "";
                this.columnKeyCd.DefaultValue = ((byte)(0));
                this.columnActive.AllowDBNull = false;
                this.columnActive.Namespace = "";
                this.columnActive.DefaultValue = ((bool)(false));
                this.columnUserLocked.AllowDBNull = false;
                this.columnUserLocked.Namespace = "";
                this.columnUserLocked.DefaultValue = ((bool)(false));
                this.columnServiceLocked.AllowDBNull = false;
                this.columnServiceLocked.Namespace = "";
                this.columnServiceLocked.DefaultValue = ((bool)(false));
                this.columnContrastLevel.AllowDBNull = false;
                this.columnContrastLevel.Namespace = "";
                this.columnContrastLevel.DefaultValue = ((byte)(0));
                this.columnLCD_Timeout.AllowDBNull = false;
                this.columnLCD_Timeout.Namespace = "";
                this.columnLCD_Timeout.DefaultValue = ((byte)(0));
                this.columnLanguage.AllowDBNull = false;
                this.columnLanguage.Namespace = "";
                this.columnLanguage.DefaultValue = ((byte)(0));
                this.columnClockFormat.AllowDBNull = false;
                this.columnClockFormat.Namespace = "";
                this.columnClockFormat.DefaultValue = ((byte)(0));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LCDSetupRow NewLCDSetupRow() {
                return ((LCDSetupRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LCDSetupRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LCDSetupRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LCDSetupRowChanged != null)) {
                    this.LCDSetupRowChanged(this, new LCDSetupRowChangeEvent(((LCDSetupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LCDSetupRowChanging != null)) {
                    this.LCDSetupRowChanging(this, new LCDSetupRowChangeEvent(((LCDSetupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LCDSetupRowDeleted != null)) {
                    this.LCDSetupRowDeleted(this, new LCDSetupRowChangeEvent(((LCDSetupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LCDSetupRowDeleting != null)) {
                    this.LCDSetupRowDeleting(this, new LCDSetupRowChangeEvent(((LCDSetupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLCDSetupRow(LCDSetupRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DeviceImagesDS ds = new DeviceImagesDS();
                xs.Add(ds.GetSchemaSerializable());
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LCDSetupDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TimersSetupDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnModeKeyCode;
            
            private global::System.Data.DataColumn columnKeyCd;
            
            private global::System.Data.DataColumn columnActive;
            
            private global::System.Data.DataColumn columnUserLocked;
            
            private global::System.Data.DataColumn columnServiceLocked;
            
            private global::System.Data.DataColumn columnBacklightTimeout;
            
            private global::System.Data.DataColumn columnStuckKeyTimeout;
            
            private global::System.Data.DataColumn columnProgrammingModeTimeout;
            
            private global::System.Data.DataColumn columnPowerKeyMacroDelay;
            
            private global::System.Data.DataColumn columnRegularKeyMacroDelay;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TimersSetupDataTable() {
                this.TableName = "TimersSetup";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TimersSetupDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TimersSetupDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModeKeyCodeColumn {
                get {
                    return this.columnModeKeyCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KeyCdColumn {
                get {
                    return this.columnKeyCd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActiveColumn {
                get {
                    return this.columnActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserLockedColumn {
                get {
                    return this.columnUserLocked;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ServiceLockedColumn {
                get {
                    return this.columnServiceLocked;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BacklightTimeoutColumn {
                get {
                    return this.columnBacklightTimeout;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StuckKeyTimeoutColumn {
                get {
                    return this.columnStuckKeyTimeout;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProgrammingModeTimeoutColumn {
                get {
                    return this.columnProgrammingModeTimeout;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PowerKeyMacroDelayColumn {
                get {
                    return this.columnPowerKeyMacroDelay;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RegularKeyMacroDelayColumn {
                get {
                    return this.columnRegularKeyMacroDelay;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TimersSetupRow this[int index] {
                get {
                    return ((TimersSetupRow)(this.Rows[index]));
                }
            }
            
            public event TimersSetupRowChangeEventHandler TimersSetupRowChanging;
            
            public event TimersSetupRowChangeEventHandler TimersSetupRowChanged;
            
            public event TimersSetupRowChangeEventHandler TimersSetupRowDeleting;
            
            public event TimersSetupRowChangeEventHandler TimersSetupRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTimersSetupRow(TimersSetupRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TimersSetupRow AddTimersSetupRow(byte ModeKeyCode, byte KeyCd, bool Active, bool UserLocked, bool ServiceLocked, byte BacklightTimeout, byte StuckKeyTimeout, byte ProgrammingModeTimeout, byte PowerKeyMacroDelay, byte RegularKeyMacroDelay) {
                TimersSetupRow rowTimersSetupRow = ((TimersSetupRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ModeKeyCode,
                        KeyCd,
                        Active,
                        UserLocked,
                        ServiceLocked,
                        BacklightTimeout,
                        StuckKeyTimeout,
                        ProgrammingModeTimeout,
                        PowerKeyMacroDelay,
                        RegularKeyMacroDelay};
                rowTimersSetupRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTimersSetupRow);
                return rowTimersSetupRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TimersSetupDataTable cln = ((TimersSetupDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TimersSetupDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnModeKeyCode = base.Columns["ModeKeyCode"];
                this.columnKeyCd = base.Columns["KeyCd"];
                this.columnActive = base.Columns["Active"];
                this.columnUserLocked = base.Columns["UserLocked"];
                this.columnServiceLocked = base.Columns["ServiceLocked"];
                this.columnBacklightTimeout = base.Columns["BacklightTimeout"];
                this.columnStuckKeyTimeout = base.Columns["StuckKeyTimeout"];
                this.columnProgrammingModeTimeout = base.Columns["ProgrammingModeTimeout"];
                this.columnPowerKeyMacroDelay = base.Columns["PowerKeyMacroDelay"];
                this.columnRegularKeyMacroDelay = base.Columns["RegularKeyMacroDelay"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnModeKeyCode = new global::System.Data.DataColumn("ModeKeyCode", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnModeKeyCode);
                this.columnKeyCd = new global::System.Data.DataColumn("KeyCd", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnKeyCd);
                this.columnActive = new global::System.Data.DataColumn("Active", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnActive);
                this.columnUserLocked = new global::System.Data.DataColumn("UserLocked", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnUserLocked);
                this.columnServiceLocked = new global::System.Data.DataColumn("ServiceLocked", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnServiceLocked);
                this.columnBacklightTimeout = new global::System.Data.DataColumn("BacklightTimeout", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnBacklightTimeout);
                this.columnStuckKeyTimeout = new global::System.Data.DataColumn("StuckKeyTimeout", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnStuckKeyTimeout);
                this.columnProgrammingModeTimeout = new global::System.Data.DataColumn("ProgrammingModeTimeout", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnProgrammingModeTimeout);
                this.columnPowerKeyMacroDelay = new global::System.Data.DataColumn("PowerKeyMacroDelay", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnPowerKeyMacroDelay);
                this.columnRegularKeyMacroDelay = new global::System.Data.DataColumn("RegularKeyMacroDelay", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnRegularKeyMacroDelay);
                this.columnModeKeyCode.AllowDBNull = false;
                this.columnModeKeyCode.Namespace = "";
                this.columnModeKeyCode.DefaultValue = ((byte)(0));
                this.columnKeyCd.AllowDBNull = false;
                this.columnKeyCd.Namespace = "";
                this.columnKeyCd.DefaultValue = ((byte)(0));
                this.columnActive.AllowDBNull = false;
                this.columnActive.Namespace = "";
                this.columnActive.DefaultValue = ((bool)(false));
                this.columnUserLocked.AllowDBNull = false;
                this.columnUserLocked.Namespace = "";
                this.columnUserLocked.DefaultValue = ((bool)(false));
                this.columnServiceLocked.AllowDBNull = false;
                this.columnServiceLocked.Namespace = "";
                this.columnServiceLocked.DefaultValue = ((bool)(false));
                this.columnBacklightTimeout.AllowDBNull = false;
                this.columnBacklightTimeout.Namespace = "";
                this.columnBacklightTimeout.DefaultValue = ((byte)(0));
                this.columnStuckKeyTimeout.AllowDBNull = false;
                this.columnStuckKeyTimeout.Namespace = "";
                this.columnStuckKeyTimeout.DefaultValue = ((byte)(0));
                this.columnProgrammingModeTimeout.AllowDBNull = false;
                this.columnProgrammingModeTimeout.Namespace = "";
                this.columnProgrammingModeTimeout.DefaultValue = ((byte)(0));
                this.columnPowerKeyMacroDelay.AllowDBNull = false;
                this.columnPowerKeyMacroDelay.Namespace = "";
                this.columnPowerKeyMacroDelay.DefaultValue = ((byte)(0));
                this.columnRegularKeyMacroDelay.AllowDBNull = false;
                this.columnRegularKeyMacroDelay.Namespace = "";
                this.columnRegularKeyMacroDelay.DefaultValue = ((byte)(0));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TimersSetupRow NewTimersSetupRow() {
                return ((TimersSetupRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TimersSetupRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TimersSetupRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TimersSetupRowChanged != null)) {
                    this.TimersSetupRowChanged(this, new TimersSetupRowChangeEvent(((TimersSetupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TimersSetupRowChanging != null)) {
                    this.TimersSetupRowChanging(this, new TimersSetupRowChangeEvent(((TimersSetupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TimersSetupRowDeleted != null)) {
                    this.TimersSetupRowDeleted(this, new TimersSetupRowChangeEvent(((TimersSetupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TimersSetupRowDeleting != null)) {
                    this.TimersSetupRowDeleting(this, new TimersSetupRowChangeEvent(((TimersSetupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTimersSetupRow(TimersSetupRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DeviceImagesDS ds = new DeviceImagesDS();
                xs.Add(ds.GetSchemaSerializable());
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TimersSetupDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SIORegistryDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnModeKeyCode;
            
            private global::System.Data.DataColumn columnKeyCd;
            
            private global::System.Data.DataColumn columnActive;
            
            private global::System.Data.DataColumn columnUserLocked;
            
            private global::System.Data.DataColumn columnServiceLocked;
            
            private global::System.Data.DataColumn columnRegistrySetting;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SIORegistryDataTable() {
                this.TableName = "SIORegistry";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SIORegistryDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SIORegistryDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModeKeyCodeColumn {
                get {
                    return this.columnModeKeyCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KeyCdColumn {
                get {
                    return this.columnKeyCd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActiveColumn {
                get {
                    return this.columnActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserLockedColumn {
                get {
                    return this.columnUserLocked;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ServiceLockedColumn {
                get {
                    return this.columnServiceLocked;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RegistrySettingColumn {
                get {
                    return this.columnRegistrySetting;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SIORegistryRow this[int index] {
                get {
                    return ((SIORegistryRow)(this.Rows[index]));
                }
            }
            
            public event SIORegistryRowChangeEventHandler SIORegistryRowChanging;
            
            public event SIORegistryRowChangeEventHandler SIORegistryRowChanged;
            
            public event SIORegistryRowChangeEventHandler SIORegistryRowDeleting;
            
            public event SIORegistryRowChangeEventHandler SIORegistryRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSIORegistryRow(SIORegistryRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SIORegistryRow AddSIORegistryRow(byte ModeKeyCode, byte KeyCd, bool Active, bool UserLocked, bool ServiceLocked, ushort RegistrySetting) {
                SIORegistryRow rowSIORegistryRow = ((SIORegistryRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ModeKeyCode,
                        KeyCd,
                        Active,
                        UserLocked,
                        ServiceLocked,
                        RegistrySetting};
                rowSIORegistryRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSIORegistryRow);
                return rowSIORegistryRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SIORegistryDataTable cln = ((SIORegistryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SIORegistryDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnModeKeyCode = base.Columns["ModeKeyCode"];
                this.columnKeyCd = base.Columns["KeyCd"];
                this.columnActive = base.Columns["Active"];
                this.columnUserLocked = base.Columns["UserLocked"];
                this.columnServiceLocked = base.Columns["ServiceLocked"];
                this.columnRegistrySetting = base.Columns["RegistrySetting"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnModeKeyCode = new global::System.Data.DataColumn("ModeKeyCode", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnModeKeyCode);
                this.columnKeyCd = new global::System.Data.DataColumn("KeyCd", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnKeyCd);
                this.columnActive = new global::System.Data.DataColumn("Active", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnActive);
                this.columnUserLocked = new global::System.Data.DataColumn("UserLocked", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnUserLocked);
                this.columnServiceLocked = new global::System.Data.DataColumn("ServiceLocked", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnServiceLocked);
                this.columnRegistrySetting = new global::System.Data.DataColumn("RegistrySetting", typeof(ushort), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnRegistrySetting);
                this.columnModeKeyCode.AllowDBNull = false;
                this.columnModeKeyCode.Namespace = "";
                this.columnModeKeyCode.DefaultValue = ((byte)(0));
                this.columnKeyCd.AllowDBNull = false;
                this.columnKeyCd.Namespace = "";
                this.columnKeyCd.DefaultValue = ((byte)(0));
                this.columnActive.AllowDBNull = false;
                this.columnActive.Namespace = "";
                this.columnActive.DefaultValue = ((bool)(false));
                this.columnUserLocked.AllowDBNull = false;
                this.columnUserLocked.Namespace = "";
                this.columnUserLocked.DefaultValue = ((bool)(false));
                this.columnServiceLocked.AllowDBNull = false;
                this.columnServiceLocked.Namespace = "";
                this.columnServiceLocked.DefaultValue = ((bool)(false));
                this.columnRegistrySetting.AllowDBNull = false;
                this.columnRegistrySetting.Namespace = "";
                this.columnRegistrySetting.DefaultValue = ((ushort)(0));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SIORegistryRow NewSIORegistryRow() {
                return ((SIORegistryRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SIORegistryRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SIORegistryRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SIORegistryRowChanged != null)) {
                    this.SIORegistryRowChanged(this, new SIORegistryRowChangeEvent(((SIORegistryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SIORegistryRowChanging != null)) {
                    this.SIORegistryRowChanging(this, new SIORegistryRowChangeEvent(((SIORegistryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SIORegistryRowDeleted != null)) {
                    this.SIORegistryRowDeleted(this, new SIORegistryRowChangeEvent(((SIORegistryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SIORegistryRowDeleting != null)) {
                    this.SIORegistryRowDeleting(this, new SIORegistryRowChangeEvent(((SIORegistryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSIORegistryRow(SIORegistryRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DeviceImagesDS ds = new DeviceImagesDS();
                xs.Add(ds.GetSchemaSerializable());
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SIORegistryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class KeyMoverDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnModeKeyCode;
            
            private global::System.Data.DataColumn columnKeyCd;
            
            private global::System.Data.DataColumn columnActive;
            
            private global::System.Data.DataColumn columnUserLocked;
            
            private global::System.Data.DataColumn columnServiceLocked;
            
            private global::System.Data.DataColumn columnSourceDBDevType;
            
            private global::System.Data.DataColumn columnSourceSourceDBDevID;
            
            private global::System.Data.DataColumn columnSourceKey;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KeyMoverDataTable() {
                this.TableName = "KeyMover";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal KeyMoverDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected KeyMoverDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModeKeyCodeColumn {
                get {
                    return this.columnModeKeyCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KeyCdColumn {
                get {
                    return this.columnKeyCd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActiveColumn {
                get {
                    return this.columnActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserLockedColumn {
                get {
                    return this.columnUserLocked;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ServiceLockedColumn {
                get {
                    return this.columnServiceLocked;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SourceDBDevTypeColumn {
                get {
                    return this.columnSourceDBDevType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SourceSourceDBDevIDColumn {
                get {
                    return this.columnSourceSourceDBDevID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SourceKeyColumn {
                get {
                    return this.columnSourceKey;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KeyMoverRow this[int index] {
                get {
                    return ((KeyMoverRow)(this.Rows[index]));
                }
            }
            
            public event KeyMoverRowChangeEventHandler KeyMoverRowChanging;
            
            public event KeyMoverRowChangeEventHandler KeyMoverRowChanged;
            
            public event KeyMoverRowChangeEventHandler KeyMoverRowDeleting;
            
            public event KeyMoverRowChangeEventHandler KeyMoverRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddKeyMoverRow(KeyMoverRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KeyMoverRow AddKeyMoverRow(byte ModeKeyCode, byte KeyCd, bool Active, bool UserLocked, bool ServiceLocked, byte SourceDBDevType, ushort SourceSourceDBDevID, byte SourceKey) {
                KeyMoverRow rowKeyMoverRow = ((KeyMoverRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ModeKeyCode,
                        KeyCd,
                        Active,
                        UserLocked,
                        ServiceLocked,
                        SourceDBDevType,
                        SourceSourceDBDevID,
                        SourceKey};
                rowKeyMoverRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowKeyMoverRow);
                return rowKeyMoverRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                KeyMoverDataTable cln = ((KeyMoverDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new KeyMoverDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnModeKeyCode = base.Columns["ModeKeyCode"];
                this.columnKeyCd = base.Columns["KeyCd"];
                this.columnActive = base.Columns["Active"];
                this.columnUserLocked = base.Columns["UserLocked"];
                this.columnServiceLocked = base.Columns["ServiceLocked"];
                this.columnSourceDBDevType = base.Columns["SourceDBDevType"];
                this.columnSourceSourceDBDevID = base.Columns["SourceSourceDBDevID"];
                this.columnSourceKey = base.Columns["SourceKey"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnModeKeyCode = new global::System.Data.DataColumn("ModeKeyCode", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnModeKeyCode);
                this.columnKeyCd = new global::System.Data.DataColumn("KeyCd", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnKeyCd);
                this.columnActive = new global::System.Data.DataColumn("Active", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnActive);
                this.columnUserLocked = new global::System.Data.DataColumn("UserLocked", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnUserLocked);
                this.columnServiceLocked = new global::System.Data.DataColumn("ServiceLocked", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnServiceLocked);
                this.columnSourceDBDevType = new global::System.Data.DataColumn("SourceDBDevType", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSourceDBDevType);
                this.columnSourceSourceDBDevID = new global::System.Data.DataColumn("SourceSourceDBDevID", typeof(ushort), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSourceSourceDBDevID);
                this.columnSourceKey = new global::System.Data.DataColumn("SourceKey", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSourceKey);
                this.columnModeKeyCode.AllowDBNull = false;
                this.columnModeKeyCode.Namespace = "";
                this.columnModeKeyCode.DefaultValue = ((byte)(0));
                this.columnKeyCd.AllowDBNull = false;
                this.columnKeyCd.Namespace = "";
                this.columnKeyCd.DefaultValue = ((byte)(0));
                this.columnActive.AllowDBNull = false;
                this.columnActive.Namespace = "";
                this.columnActive.DefaultValue = ((bool)(false));
                this.columnUserLocked.AllowDBNull = false;
                this.columnUserLocked.Namespace = "";
                this.columnUserLocked.DefaultValue = ((bool)(false));
                this.columnServiceLocked.AllowDBNull = false;
                this.columnServiceLocked.Namespace = "";
                this.columnServiceLocked.DefaultValue = ((bool)(false));
                this.columnSourceDBDevType.AllowDBNull = false;
                this.columnSourceDBDevType.Namespace = "";
                this.columnSourceDBDevType.DefaultValue = ((byte)(0));
                this.columnSourceSourceDBDevID.AllowDBNull = false;
                this.columnSourceSourceDBDevID.Namespace = "";
                this.columnSourceSourceDBDevID.DefaultValue = ((ushort)(0));
                this.columnSourceKey.AllowDBNull = false;
                this.columnSourceKey.Namespace = "";
                this.columnSourceKey.DefaultValue = ((byte)(0));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KeyMoverRow NewKeyMoverRow() {
                return ((KeyMoverRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new KeyMoverRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(KeyMoverRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.KeyMoverRowChanged != null)) {
                    this.KeyMoverRowChanged(this, new KeyMoverRowChangeEvent(((KeyMoverRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.KeyMoverRowChanging != null)) {
                    this.KeyMoverRowChanging(this, new KeyMoverRowChangeEvent(((KeyMoverRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.KeyMoverRowDeleted != null)) {
                    this.KeyMoverRowDeleted(this, new KeyMoverRowChangeEvent(((KeyMoverRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.KeyMoverRowDeleting != null)) {
                    this.KeyMoverRowDeleting(this, new KeyMoverRowChangeEvent(((KeyMoverRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveKeyMoverRow(KeyMoverRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DeviceImagesDS ds = new DeviceImagesDS();
                xs.Add(ds.GetSchemaSerializable());
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "KeyMoverDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SynthMoverDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnModeKeyCode;
            
            private global::System.Data.DataColumn columnKeyCd;
            
            private global::System.Data.DataColumn columnActive;
            
            private global::System.Data.DataColumn columnUserLocked;
            
            private global::System.Data.DataColumn columnServiceLocked;
            
            private global::System.Data.DataColumn columnSourceDBDevType;
            
            private global::System.Data.DataColumn columnSourceSourceDBDevID;
            
            private global::System.Data.DataColumn columnSynthValue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SynthMoverDataTable() {
                this.TableName = "SynthMover";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SynthMoverDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SynthMoverDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModeKeyCodeColumn {
                get {
                    return this.columnModeKeyCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KeyCdColumn {
                get {
                    return this.columnKeyCd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActiveColumn {
                get {
                    return this.columnActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserLockedColumn {
                get {
                    return this.columnUserLocked;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ServiceLockedColumn {
                get {
                    return this.columnServiceLocked;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SourceDBDevTypeColumn {
                get {
                    return this.columnSourceDBDevType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SourceSourceDBDevIDColumn {
                get {
                    return this.columnSourceSourceDBDevID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SynthValueColumn {
                get {
                    return this.columnSynthValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SynthMoverRow this[int index] {
                get {
                    return ((SynthMoverRow)(this.Rows[index]));
                }
            }
            
            public event SynthMoverRowChangeEventHandler SynthMoverRowChanging;
            
            public event SynthMoverRowChangeEventHandler SynthMoverRowChanged;
            
            public event SynthMoverRowChangeEventHandler SynthMoverRowDeleting;
            
            public event SynthMoverRowChangeEventHandler SynthMoverRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSynthMoverRow(SynthMoverRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SynthMoverRow AddSynthMoverRow(byte ModeKeyCode, byte KeyCd, bool Active, bool UserLocked, bool ServiceLocked, byte SourceDBDevType, ushort SourceSourceDBDevID, int SynthValue) {
                SynthMoverRow rowSynthMoverRow = ((SynthMoverRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ModeKeyCode,
                        KeyCd,
                        Active,
                        UserLocked,
                        ServiceLocked,
                        SourceDBDevType,
                        SourceSourceDBDevID,
                        SynthValue};
                rowSynthMoverRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSynthMoverRow);
                return rowSynthMoverRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SynthMoverDataTable cln = ((SynthMoverDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SynthMoverDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnModeKeyCode = base.Columns["ModeKeyCode"];
                this.columnKeyCd = base.Columns["KeyCd"];
                this.columnActive = base.Columns["Active"];
                this.columnUserLocked = base.Columns["UserLocked"];
                this.columnServiceLocked = base.Columns["ServiceLocked"];
                this.columnSourceDBDevType = base.Columns["SourceDBDevType"];
                this.columnSourceSourceDBDevID = base.Columns["SourceSourceDBDevID"];
                this.columnSynthValue = base.Columns["SynthValue"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnModeKeyCode = new global::System.Data.DataColumn("ModeKeyCode", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnModeKeyCode);
                this.columnKeyCd = new global::System.Data.DataColumn("KeyCd", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnKeyCd);
                this.columnActive = new global::System.Data.DataColumn("Active", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnActive);
                this.columnUserLocked = new global::System.Data.DataColumn("UserLocked", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnUserLocked);
                this.columnServiceLocked = new global::System.Data.DataColumn("ServiceLocked", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnServiceLocked);
                this.columnSourceDBDevType = new global::System.Data.DataColumn("SourceDBDevType", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSourceDBDevType);
                this.columnSourceSourceDBDevID = new global::System.Data.DataColumn("SourceSourceDBDevID", typeof(ushort), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSourceSourceDBDevID);
                this.columnSynthValue = new global::System.Data.DataColumn("SynthValue", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSynthValue);
                this.columnModeKeyCode.AllowDBNull = false;
                this.columnModeKeyCode.Namespace = "";
                this.columnModeKeyCode.DefaultValue = ((byte)(0));
                this.columnKeyCd.AllowDBNull = false;
                this.columnKeyCd.Namespace = "";
                this.columnKeyCd.DefaultValue = ((byte)(0));
                this.columnActive.AllowDBNull = false;
                this.columnActive.Namespace = "";
                this.columnActive.DefaultValue = ((bool)(false));
                this.columnUserLocked.AllowDBNull = false;
                this.columnUserLocked.Namespace = "";
                this.columnUserLocked.DefaultValue = ((bool)(false));
                this.columnServiceLocked.AllowDBNull = false;
                this.columnServiceLocked.Namespace = "";
                this.columnServiceLocked.DefaultValue = ((bool)(false));
                this.columnSourceDBDevType.AllowDBNull = false;
                this.columnSourceDBDevType.Namespace = "";
                this.columnSourceDBDevType.DefaultValue = ((byte)(0));
                this.columnSourceSourceDBDevID.AllowDBNull = false;
                this.columnSourceSourceDBDevID.Namespace = "";
                this.columnSourceSourceDBDevID.DefaultValue = ((ushort)(0));
                this.columnSynthValue.AllowDBNull = false;
                this.columnSynthValue.Namespace = "";
                this.columnSynthValue.DefaultValue = ((int)(0));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SynthMoverRow NewSynthMoverRow() {
                return ((SynthMoverRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SynthMoverRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SynthMoverRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SynthMoverRowChanged != null)) {
                    this.SynthMoverRowChanged(this, new SynthMoverRowChangeEvent(((SynthMoverRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SynthMoverRowChanging != null)) {
                    this.SynthMoverRowChanging(this, new SynthMoverRowChangeEvent(((SynthMoverRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SynthMoverRowDeleted != null)) {
                    this.SynthMoverRowDeleted(this, new SynthMoverRowChangeEvent(((SynthMoverRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SynthMoverRowDeleting != null)) {
                    this.SynthMoverRowDeleting(this, new SynthMoverRowChangeEvent(((SynthMoverRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSynthMoverRow(SynthMoverRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DeviceImagesDS ds = new DeviceImagesDS();
                xs.Add(ds.GetSchemaSerializable());
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SynthMoverDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PunchThruTableDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnModeKeyCode;
            
            private global::System.Data.DataColumn columnKeyCd;
            
            private global::System.Data.DataColumn columnPunchThruEntries_fk;
            
            private global::System.Data.DataColumn columnActive;
            
            private global::System.Data.DataColumn columnUserLocked;
            
            private global::System.Data.DataColumn columnServiceLocked;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PunchThruTableDataTable() {
                this.TableName = "PunchThruTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PunchThruTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PunchThruTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModeKeyCodeColumn {
                get {
                    return this.columnModeKeyCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KeyCdColumn {
                get {
                    return this.columnKeyCd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PunchThruEntries_fkColumn {
                get {
                    return this.columnPunchThruEntries_fk;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActiveColumn {
                get {
                    return this.columnActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserLockedColumn {
                get {
                    return this.columnUserLocked;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ServiceLockedColumn {
                get {
                    return this.columnServiceLocked;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PunchThruTableRow this[int index] {
                get {
                    return ((PunchThruTableRow)(this.Rows[index]));
                }
            }
            
            public event PunchThruTableRowChangeEventHandler PunchThruTableRowChanging;
            
            public event PunchThruTableRowChangeEventHandler PunchThruTableRowChanged;
            
            public event PunchThruTableRowChangeEventHandler PunchThruTableRowDeleting;
            
            public event PunchThruTableRowChangeEventHandler PunchThruTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPunchThruTableRow(PunchThruTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PunchThruTableRow AddPunchThruTableRow(byte ModeKeyCode, byte KeyCd, bool Active, bool UserLocked, bool ServiceLocked) {
                PunchThruTableRow rowPunchThruTableRow = ((PunchThruTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ModeKeyCode,
                        KeyCd,
                        null,
                        Active,
                        UserLocked,
                        ServiceLocked};
                rowPunchThruTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPunchThruTableRow);
                return rowPunchThruTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PunchThruTableDataTable cln = ((PunchThruTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PunchThruTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnModeKeyCode = base.Columns["ModeKeyCode"];
                this.columnKeyCd = base.Columns["KeyCd"];
                this.columnPunchThruEntries_fk = base.Columns["PunchThruEntries_fk"];
                this.columnActive = base.Columns["Active"];
                this.columnUserLocked = base.Columns["UserLocked"];
                this.columnServiceLocked = base.Columns["ServiceLocked"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnModeKeyCode = new global::System.Data.DataColumn("ModeKeyCode", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnModeKeyCode);
                this.columnKeyCd = new global::System.Data.DataColumn("KeyCd", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnKeyCd);
                this.columnPunchThruEntries_fk = new global::System.Data.DataColumn("PunchThruEntries_fk", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnPunchThruEntries_fk);
                this.columnActive = new global::System.Data.DataColumn("Active", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnActive);
                this.columnUserLocked = new global::System.Data.DataColumn("UserLocked", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnUserLocked);
                this.columnServiceLocked = new global::System.Data.DataColumn("ServiceLocked", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnServiceLocked);
                this.columnModeKeyCode.AllowDBNull = false;
                this.columnModeKeyCode.Namespace = "";
                this.columnModeKeyCode.DefaultValue = ((byte)(0));
                this.columnKeyCd.AllowDBNull = false;
                this.columnKeyCd.Namespace = "";
                this.columnKeyCd.DefaultValue = ((byte)(0));
                this.columnPunchThruEntries_fk.AutoIncrement = true;
                this.columnPunchThruEntries_fk.AutoIncrementSeed = 1;
                this.columnPunchThruEntries_fk.AllowDBNull = false;
                this.columnPunchThruEntries_fk.Namespace = "";
                this.columnActive.AllowDBNull = false;
                this.columnActive.Namespace = "";
                this.columnActive.DefaultValue = ((bool)(false));
                this.columnUserLocked.AllowDBNull = false;
                this.columnUserLocked.Namespace = "";
                this.columnUserLocked.DefaultValue = ((bool)(false));
                this.columnServiceLocked.AllowDBNull = false;
                this.columnServiceLocked.Namespace = "";
                this.columnServiceLocked.DefaultValue = ((bool)(false));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PunchThruTableRow NewPunchThruTableRow() {
                return ((PunchThruTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PunchThruTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PunchThruTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PunchThruTableRowChanged != null)) {
                    this.PunchThruTableRowChanged(this, new PunchThruTableRowChangeEvent(((PunchThruTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PunchThruTableRowChanging != null)) {
                    this.PunchThruTableRowChanging(this, new PunchThruTableRowChangeEvent(((PunchThruTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PunchThruTableRowDeleted != null)) {
                    this.PunchThruTableRowDeleted(this, new PunchThruTableRowChangeEvent(((PunchThruTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PunchThruTableRowDeleting != null)) {
                    this.PunchThruTableRowDeleting(this, new PunchThruTableRowChangeEvent(((PunchThruTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePunchThruTableRow(PunchThruTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DeviceImagesDS ds = new DeviceImagesDS();
                xs.Add(ds.GetSchemaSerializable());
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PunchThruTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PunchThruEntriesDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnKeyToPunchThru;
            
            private global::System.Data.DataColumn columnTargetMode;
            
            private global::System.Data.DataColumn columnPunchThruEntries_fk;
            
            private global::System.Data.DataColumn columnCodeOrder;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PunchThruEntriesDataTable() {
                this.TableName = "PunchThruEntries";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PunchThruEntriesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PunchThruEntriesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KeyToPunchThruColumn {
                get {
                    return this.columnKeyToPunchThru;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TargetModeColumn {
                get {
                    return this.columnTargetMode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PunchThruEntries_fkColumn {
                get {
                    return this.columnPunchThruEntries_fk;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CodeOrderColumn {
                get {
                    return this.columnCodeOrder;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PunchThruEntriesRow this[int index] {
                get {
                    return ((PunchThruEntriesRow)(this.Rows[index]));
                }
            }
            
            public event PunchThruEntriesRowChangeEventHandler PunchThruEntriesRowChanging;
            
            public event PunchThruEntriesRowChangeEventHandler PunchThruEntriesRowChanged;
            
            public event PunchThruEntriesRowChangeEventHandler PunchThruEntriesRowDeleting;
            
            public event PunchThruEntriesRowChangeEventHandler PunchThruEntriesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPunchThruEntriesRow(PunchThruEntriesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PunchThruEntriesRow AddPunchThruEntriesRow(byte KeyToPunchThru, byte TargetMode, PunchThruTableRow parentPunchThruTableRowByPunchThruTable_PunchThruEntries) {
                PunchThruEntriesRow rowPunchThruEntriesRow = ((PunchThruEntriesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        KeyToPunchThru,
                        TargetMode,
                        null,
                        null};
                if ((parentPunchThruTableRowByPunchThruTable_PunchThruEntries != null)) {
                    columnValuesArray[2] = parentPunchThruTableRowByPunchThruTable_PunchThruEntries[2];
                }
                rowPunchThruEntriesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPunchThruEntriesRow);
                return rowPunchThruEntriesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PunchThruEntriesDataTable cln = ((PunchThruEntriesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PunchThruEntriesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnKeyToPunchThru = base.Columns["KeyToPunchThru"];
                this.columnTargetMode = base.Columns["TargetMode"];
                this.columnPunchThruEntries_fk = base.Columns["PunchThruEntries_fk"];
                this.columnCodeOrder = base.Columns["CodeOrder"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnKeyToPunchThru = new global::System.Data.DataColumn("KeyToPunchThru", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnKeyToPunchThru);
                this.columnTargetMode = new global::System.Data.DataColumn("TargetMode", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnTargetMode);
                this.columnPunchThruEntries_fk = new global::System.Data.DataColumn("PunchThruEntries_fk", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnPunchThruEntries_fk);
                this.columnCodeOrder = new global::System.Data.DataColumn("CodeOrder", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnCodeOrder);
                this.columnKeyToPunchThru.AllowDBNull = false;
                this.columnKeyToPunchThru.Namespace = "";
                this.columnKeyToPunchThru.DefaultValue = ((byte)(0));
                this.columnTargetMode.AllowDBNull = false;
                this.columnTargetMode.Namespace = "";
                this.columnTargetMode.DefaultValue = ((byte)(0));
                this.columnPunchThruEntries_fk.AllowDBNull = false;
                this.columnPunchThruEntries_fk.Namespace = "";
                this.columnCodeOrder.AutoIncrement = true;
                this.columnCodeOrder.AutoIncrementSeed = 1;
                this.columnCodeOrder.AllowDBNull = false;
                this.columnCodeOrder.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PunchThruEntriesRow NewPunchThruEntriesRow() {
                return ((PunchThruEntriesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PunchThruEntriesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PunchThruEntriesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PunchThruEntriesRowChanged != null)) {
                    this.PunchThruEntriesRowChanged(this, new PunchThruEntriesRowChangeEvent(((PunchThruEntriesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PunchThruEntriesRowChanging != null)) {
                    this.PunchThruEntriesRowChanging(this, new PunchThruEntriesRowChangeEvent(((PunchThruEntriesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PunchThruEntriesRowDeleted != null)) {
                    this.PunchThruEntriesRowDeleted(this, new PunchThruEntriesRowChangeEvent(((PunchThruEntriesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PunchThruEntriesRowDeleting != null)) {
                    this.PunchThruEntriesRowDeleting(this, new PunchThruEntriesRowChangeEvent(((PunchThruEntriesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePunchThruEntriesRow(PunchThruEntriesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DeviceImagesDS ds = new DeviceImagesDS();
                xs.Add(ds.GetSchemaSerializable());
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PunchThruEntriesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class QuickSearchTableDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnModeKeyCode;
            
            private global::System.Data.DataColumn columnKeyCd;
            
            private global::System.Data.DataColumn columnQuickSearchEntries_fk;
            
            private global::System.Data.DataColumn columnActive;
            
            private global::System.Data.DataColumn columnUserLocked;
            
            private global::System.Data.DataColumn columnServiceLocked;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuickSearchTableDataTable() {
                this.TableName = "QuickSearchTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal QuickSearchTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected QuickSearchTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModeKeyCodeColumn {
                get {
                    return this.columnModeKeyCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KeyCdColumn {
                get {
                    return this.columnKeyCd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QuickSearchEntries_fkColumn {
                get {
                    return this.columnQuickSearchEntries_fk;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActiveColumn {
                get {
                    return this.columnActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserLockedColumn {
                get {
                    return this.columnUserLocked;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ServiceLockedColumn {
                get {
                    return this.columnServiceLocked;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuickSearchTableRow this[int index] {
                get {
                    return ((QuickSearchTableRow)(this.Rows[index]));
                }
            }
            
            public event QuickSearchTableRowChangeEventHandler QuickSearchTableRowChanging;
            
            public event QuickSearchTableRowChangeEventHandler QuickSearchTableRowChanged;
            
            public event QuickSearchTableRowChangeEventHandler QuickSearchTableRowDeleting;
            
            public event QuickSearchTableRowChangeEventHandler QuickSearchTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddQuickSearchTableRow(QuickSearchTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuickSearchTableRow AddQuickSearchTableRow(byte ModeKeyCode, byte KeyCd, bool Active, bool UserLocked, bool ServiceLocked) {
                QuickSearchTableRow rowQuickSearchTableRow = ((QuickSearchTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ModeKeyCode,
                        KeyCd,
                        null,
                        Active,
                        UserLocked,
                        ServiceLocked};
                rowQuickSearchTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowQuickSearchTableRow);
                return rowQuickSearchTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                QuickSearchTableDataTable cln = ((QuickSearchTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new QuickSearchTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnModeKeyCode = base.Columns["ModeKeyCode"];
                this.columnKeyCd = base.Columns["KeyCd"];
                this.columnQuickSearchEntries_fk = base.Columns["QuickSearchEntries_fk"];
                this.columnActive = base.Columns["Active"];
                this.columnUserLocked = base.Columns["UserLocked"];
                this.columnServiceLocked = base.Columns["ServiceLocked"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnModeKeyCode = new global::System.Data.DataColumn("ModeKeyCode", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnModeKeyCode);
                this.columnKeyCd = new global::System.Data.DataColumn("KeyCd", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnKeyCd);
                this.columnQuickSearchEntries_fk = new global::System.Data.DataColumn("QuickSearchEntries_fk", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnQuickSearchEntries_fk);
                this.columnActive = new global::System.Data.DataColumn("Active", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnActive);
                this.columnUserLocked = new global::System.Data.DataColumn("UserLocked", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnUserLocked);
                this.columnServiceLocked = new global::System.Data.DataColumn("ServiceLocked", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnServiceLocked);
                this.columnModeKeyCode.AllowDBNull = false;
                this.columnModeKeyCode.Namespace = "";
                this.columnModeKeyCode.DefaultValue = ((byte)(0));
                this.columnKeyCd.AllowDBNull = false;
                this.columnKeyCd.Namespace = "";
                this.columnKeyCd.DefaultValue = ((byte)(0));
                this.columnQuickSearchEntries_fk.AutoIncrement = true;
                this.columnQuickSearchEntries_fk.AutoIncrementSeed = 1;
                this.columnQuickSearchEntries_fk.AllowDBNull = false;
                this.columnQuickSearchEntries_fk.Namespace = "";
                this.columnActive.AllowDBNull = false;
                this.columnActive.Namespace = "";
                this.columnActive.DefaultValue = ((bool)(false));
                this.columnUserLocked.AllowDBNull = false;
                this.columnUserLocked.Namespace = "";
                this.columnUserLocked.DefaultValue = ((bool)(false));
                this.columnServiceLocked.AllowDBNull = false;
                this.columnServiceLocked.Namespace = "";
                this.columnServiceLocked.DefaultValue = ((bool)(false));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuickSearchTableRow NewQuickSearchTableRow() {
                return ((QuickSearchTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new QuickSearchTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(QuickSearchTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.QuickSearchTableRowChanged != null)) {
                    this.QuickSearchTableRowChanged(this, new QuickSearchTableRowChangeEvent(((QuickSearchTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.QuickSearchTableRowChanging != null)) {
                    this.QuickSearchTableRowChanging(this, new QuickSearchTableRowChangeEvent(((QuickSearchTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.QuickSearchTableRowDeleted != null)) {
                    this.QuickSearchTableRowDeleted(this, new QuickSearchTableRowChangeEvent(((QuickSearchTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.QuickSearchTableRowDeleting != null)) {
                    this.QuickSearchTableRowDeleting(this, new QuickSearchTableRowChangeEvent(((QuickSearchTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveQuickSearchTableRow(QuickSearchTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DeviceImagesDS ds = new DeviceImagesDS();
                xs.Add(ds.GetSchemaSerializable());
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "QuickSearchTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class QuickSearchEntriesDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnDBDevType;
            
            private global::System.Data.DataColumn columnDBDevID;
            
            private global::System.Data.DataColumn columnQuickSearchEntries_fk;
            
            private global::System.Data.DataColumn columnCodeOrder;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuickSearchEntriesDataTable() {
                this.TableName = "QuickSearchEntries";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal QuickSearchEntriesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected QuickSearchEntriesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DBDevTypeColumn {
                get {
                    return this.columnDBDevType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DBDevIDColumn {
                get {
                    return this.columnDBDevID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QuickSearchEntries_fkColumn {
                get {
                    return this.columnQuickSearchEntries_fk;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CodeOrderColumn {
                get {
                    return this.columnCodeOrder;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuickSearchEntriesRow this[int index] {
                get {
                    return ((QuickSearchEntriesRow)(this.Rows[index]));
                }
            }
            
            public event QuickSearchEntriesRowChangeEventHandler QuickSearchEntriesRowChanging;
            
            public event QuickSearchEntriesRowChangeEventHandler QuickSearchEntriesRowChanged;
            
            public event QuickSearchEntriesRowChangeEventHandler QuickSearchEntriesRowDeleting;
            
            public event QuickSearchEntriesRowChangeEventHandler QuickSearchEntriesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddQuickSearchEntriesRow(QuickSearchEntriesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuickSearchEntriesRow AddQuickSearchEntriesRow(byte DBDevType, ushort DBDevID, QuickSearchTableRow parentQuickSearchTableRowByQuickSearchTable_QuickSearchEntries) {
                QuickSearchEntriesRow rowQuickSearchEntriesRow = ((QuickSearchEntriesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        DBDevType,
                        DBDevID,
                        null,
                        null};
                if ((parentQuickSearchTableRowByQuickSearchTable_QuickSearchEntries != null)) {
                    columnValuesArray[2] = parentQuickSearchTableRowByQuickSearchTable_QuickSearchEntries[2];
                }
                rowQuickSearchEntriesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowQuickSearchEntriesRow);
                return rowQuickSearchEntriesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                QuickSearchEntriesDataTable cln = ((QuickSearchEntriesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new QuickSearchEntriesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDBDevType = base.Columns["DBDevType"];
                this.columnDBDevID = base.Columns["DBDevID"];
                this.columnQuickSearchEntries_fk = base.Columns["QuickSearchEntries_fk"];
                this.columnCodeOrder = base.Columns["CodeOrder"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDBDevType = new global::System.Data.DataColumn("DBDevType", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDBDevType);
                this.columnDBDevID = new global::System.Data.DataColumn("DBDevID", typeof(ushort), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDBDevID);
                this.columnQuickSearchEntries_fk = new global::System.Data.DataColumn("QuickSearchEntries_fk", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnQuickSearchEntries_fk);
                this.columnCodeOrder = new global::System.Data.DataColumn("CodeOrder", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnCodeOrder);
                this.columnDBDevType.AllowDBNull = false;
                this.columnDBDevType.Namespace = "";
                this.columnDBDevType.DefaultValue = ((byte)(0));
                this.columnDBDevID.AllowDBNull = false;
                this.columnDBDevID.Namespace = "";
                this.columnDBDevID.DefaultValue = ((ushort)(0));
                this.columnQuickSearchEntries_fk.AllowDBNull = false;
                this.columnQuickSearchEntries_fk.Namespace = "";
                this.columnCodeOrder.AutoIncrement = true;
                this.columnCodeOrder.AutoIncrementSeed = 1;
                this.columnCodeOrder.AllowDBNull = false;
                this.columnCodeOrder.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuickSearchEntriesRow NewQuickSearchEntriesRow() {
                return ((QuickSearchEntriesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new QuickSearchEntriesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(QuickSearchEntriesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.QuickSearchEntriesRowChanged != null)) {
                    this.QuickSearchEntriesRowChanged(this, new QuickSearchEntriesRowChangeEvent(((QuickSearchEntriesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.QuickSearchEntriesRowChanging != null)) {
                    this.QuickSearchEntriesRowChanging(this, new QuickSearchEntriesRowChangeEvent(((QuickSearchEntriesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.QuickSearchEntriesRowDeleted != null)) {
                    this.QuickSearchEntriesRowDeleted(this, new QuickSearchEntriesRowChangeEvent(((QuickSearchEntriesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.QuickSearchEntriesRowDeleting != null)) {
                    this.QuickSearchEntriesRowDeleting(this, new QuickSearchEntriesRowChangeEvent(((QuickSearchEntriesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveQuickSearchEntriesRow(QuickSearchEntriesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DeviceImagesDS ds = new DeviceImagesDS();
                xs.Add(ds.GetSchemaSerializable());
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "QuickSearchEntriesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class KeysRow : global::System.Data.DataRow {
            
            private KeysDataTable tableKeys;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal KeysRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableKeys = ((KeysDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte DBDevType {
                get {
                    return ((byte)(this[this.tableKeys.DBDevTypeColumn]));
                }
                set {
                    this[this.tableKeys.DBDevTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ushort DBDevID {
                get {
                    return ((ushort)(this[this.tableKeys.DBDevIDColumn]));
                }
                set {
                    this[this.tableKeys.DBDevIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte Mode {
                get {
                    return ((byte)(this[this.tableKeys.ModeColumn]));
                }
                set {
                    this[this.tableKeys.ModeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte KeyCd {
                get {
                    return ((byte)(this[this.tableKeys.KeyCdColumn]));
                }
                set {
                    this[this.tableKeys.KeyCdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ushort OutRon {
                get {
                    return ((ushort)(this[this.tableKeys.OutRonColumn]));
                }
                set {
                    this[this.tableKeys.OutRonColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ushort ExecutorNumber {
                get {
                    return ((ushort)(this[this.tableKeys.ExecutorNumberColumn]));
                }
                set {
                    this[this.tableKeys.ExecutorNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ushort GenericKeyId {
                get {
                    return ((ushort)(this[this.tableKeys.GenericKeyIdColumn]));
                }
                set {
                    this[this.tableKeys.GenericKeyIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Key_fk {
                get {
                    return ((int)(this[this.tableKeys.Key_fkColumn]));
                }
                set {
                    this[this.tableKeys.Key_fkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Active {
                get {
                    return ((bool)(this[this.tableKeys.ActiveColumn]));
                }
                set {
                    this[this.tableKeys.ActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool UserLocked {
                get {
                    return ((bool)(this[this.tableKeys.UserLockedColumn]));
                }
                set {
                    this[this.tableKeys.UserLockedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ServiceLocked {
                get {
                    return ((bool)(this[this.tableKeys.ServiceLockedColumn]));
                }
                set {
                    this[this.tableKeys.ServiceLockedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DevicesRow DevicesRowParent {
                get {
                    return ((DevicesRow)(this.GetParentRow(this.Table.ParentRelations["Devices_Keys"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Devices_Keys"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KeyIRsRow[] GetKeyIRsRows() {
                if ((this.Table.ChildRelations["KeysToKeysIR"] == null)) {
                    return new KeyIRsRow[0];
                }
                else {
                    return ((KeyIRsRow[])(base.GetChildRows(this.Table.ChildRelations["KeysToKeysIR"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class StandardMacrosRow : global::System.Data.DataRow {
            
            private StandardMacrosDataTable tableStandardMacros;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StandardMacrosRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableStandardMacros = ((StandardMacrosDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte ModeKeyCode {
                get {
                    return ((byte)(this[this.tableStandardMacros.ModeKeyCodeColumn]));
                }
                set {
                    this[this.tableStandardMacros.ModeKeyCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte KeyCd {
                get {
                    return ((byte)(this[this.tableStandardMacros.KeyCdColumn]));
                }
                set {
                    this[this.tableStandardMacros.KeyCdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Macro_fk {
                get {
                    return ((int)(this[this.tableStandardMacros.Macro_fkColumn]));
                }
                set {
                    this[this.tableStandardMacros.Macro_fkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Active {
                get {
                    return ((bool)(this[this.tableStandardMacros.ActiveColumn]));
                }
                set {
                    this[this.tableStandardMacros.ActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool UserLocked {
                get {
                    return ((bool)(this[this.tableStandardMacros.UserLockedColumn]));
                }
                set {
                    this[this.tableStandardMacros.UserLockedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ServiceLocked {
                get {
                    return ((bool)(this[this.tableStandardMacros.ServiceLockedColumn]));
                }
                set {
                    this[this.tableStandardMacros.ServiceLockedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MacroStepsRow[] GetMacroStepsRows() {
                if ((this.Table.ChildRelations["StandardMacros_MacroSteps"] == null)) {
                    return new MacroStepsRow[0];
                }
                else {
                    return ((MacroStepsRow[])(base.GetChildRows(this.Table.ChildRelations["StandardMacros_MacroSteps"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MacroStepsRow : global::System.Data.DataRow {
            
            private MacroStepsDataTable tableMacroSteps;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MacroStepsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMacroSteps = ((MacroStepsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte StepVal {
                get {
                    return ((byte)(this[this.tableMacroSteps.StepValColumn]));
                }
                set {
                    this[this.tableMacroSteps.StepValColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Macro_fk {
                get {
                    return ((int)(this[this.tableMacroSteps.Macro_fkColumn]));
                }
                set {
                    this[this.tableMacroSteps.Macro_fkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CodeOrder {
                get {
                    return ((int)(this[this.tableMacroSteps.CodeOrderColumn]));
                }
                set {
                    this[this.tableMacroSteps.CodeOrderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StandardMacrosRow StandardMacrosRowParent {
                get {
                    return ((StandardMacrosRow)(this.GetParentRow(this.Table.ParentRelations["StandardMacros_MacroSteps"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["StandardMacros_MacroSteps"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ActivityLabelsRow : global::System.Data.DataRow {
            
            private ActivityLabelsDataTable tableActivityLabels;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ActivityLabelsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableActivityLabels = ((ActivityLabelsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte ModeKeyCode {
                get {
                    return ((byte)(this[this.tableActivityLabels.ModeKeyCodeColumn]));
                }
                set {
                    this[this.tableActivityLabels.ModeKeyCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte KeyCd {
                get {
                    return ((byte)(this[this.tableActivityLabels.KeyCdColumn]));
                }
                set {
                    this[this.tableActivityLabels.KeyCdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ActivityLabel_fk {
                get {
                    return ((int)(this[this.tableActivityLabels.ActivityLabel_fkColumn]));
                }
                set {
                    this[this.tableActivityLabels.ActivityLabel_fkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Active {
                get {
                    return ((bool)(this[this.tableActivityLabels.ActiveColumn]));
                }
                set {
                    this[this.tableActivityLabels.ActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool UserLocked {
                get {
                    return ((bool)(this[this.tableActivityLabels.UserLockedColumn]));
                }
                set {
                    this[this.tableActivityLabels.UserLockedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ServiceLocked {
                get {
                    return ((bool)(this[this.tableActivityLabels.ServiceLockedColumn]));
                }
                set {
                    this[this.tableActivityLabels.ServiceLockedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LabelsTableRow[] GetLabelsTableRows() {
                if ((this.Table.ChildRelations["ActivityLabels_LabelsTable"] == null)) {
                    return new LabelsTableRow[0];
                }
                else {
                    return ((LabelsTableRow[])(base.GetChildRows(this.Table.ChildRelations["ActivityLabels_LabelsTable"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LabelsTableRow : global::System.Data.DataRow {
            
            private LabelsTableDataTable tableLabelsTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LabelsTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLabelsTable = ((LabelsTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Label {
                get {
                    return ((string)(this[this.tableLabelsTable.LabelColumn]));
                }
                set {
                    this[this.tableLabelsTable.LabelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte KeyCd {
                get {
                    return ((byte)(this[this.tableLabelsTable.KeyCdColumn]));
                }
                set {
                    this[this.tableLabelsTable.KeyCdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ActivityLabel_fk {
                get {
                    return ((int)(this[this.tableLabelsTable.ActivityLabel_fkColumn]));
                }
                set {
                    this[this.tableLabelsTable.ActivityLabel_fkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CodeOrder {
                get {
                    return ((int)(this[this.tableLabelsTable.CodeOrderColumn]));
                }
                set {
                    this[this.tableLabelsTable.CodeOrderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActivityLabelsRow ActivityLabelsRowParent {
                get {
                    return ((ActivityLabelsRow)(this.GetParentRow(this.Table.ParentRelations["ActivityLabels_LabelsTable"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ActivityLabels_LabelsTable"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SoftKeyLabelTableRow : global::System.Data.DataRow {
            
            private SoftKeyLabelTableDataTable tableSoftKeyLabelTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SoftKeyLabelTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSoftKeyLabelTable = ((SoftKeyLabelTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte ModeKeyCode {
                get {
                    return ((byte)(this[this.tableSoftKeyLabelTable.ModeKeyCodeColumn]));
                }
                set {
                    this[this.tableSoftKeyLabelTable.ModeKeyCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte KeyCd {
                get {
                    return ((byte)(this[this.tableSoftKeyLabelTable.KeyCdColumn]));
                }
                set {
                    this[this.tableSoftKeyLabelTable.KeyCdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SoftKeyEntries_fk {
                get {
                    return ((int)(this[this.tableSoftKeyLabelTable.SoftKeyEntries_fkColumn]));
                }
                set {
                    this[this.tableSoftKeyLabelTable.SoftKeyEntries_fkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte NumberOfSoftKeys {
                get {
                    return ((byte)(this[this.tableSoftKeyLabelTable.NumberOfSoftKeysColumn]));
                }
                set {
                    this[this.tableSoftKeyLabelTable.NumberOfSoftKeysColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Active {
                get {
                    return ((bool)(this[this.tableSoftKeyLabelTable.ActiveColumn]));
                }
                set {
                    this[this.tableSoftKeyLabelTable.ActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool UserLocked {
                get {
                    return ((bool)(this[this.tableSoftKeyLabelTable.UserLockedColumn]));
                }
                set {
                    this[this.tableSoftKeyLabelTable.UserLockedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ServiceLocked {
                get {
                    return ((bool)(this[this.tableSoftKeyLabelTable.ServiceLockedColumn]));
                }
                set {
                    this[this.tableSoftKeyLabelTable.ServiceLockedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SoftKeyEntriesRow[] GetSoftKeyEntriesRows() {
                if ((this.Table.ChildRelations["SoftKeyLabelTable_SoftKeyEntries"] == null)) {
                    return new SoftKeyEntriesRow[0];
                }
                else {
                    return ((SoftKeyEntriesRow[])(base.GetChildRows(this.Table.ChildRelations["SoftKeyLabelTable_SoftKeyEntries"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SoftKeyEntriesRow : global::System.Data.DataRow {
            
            private SoftKeyEntriesDataTable tableSoftKeyEntries;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SoftKeyEntriesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSoftKeyEntries = ((SoftKeyEntriesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte KeyCd {
                get {
                    return ((byte)(this[this.tableSoftKeyEntries.KeyCdColumn]));
                }
                set {
                    this[this.tableSoftKeyEntries.KeyCdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Label {
                get {
                    return ((string)(this[this.tableSoftKeyEntries.LabelColumn]));
                }
                set {
                    this[this.tableSoftKeyEntries.LabelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SoftKeyEntries_fk {
                get {
                    return ((int)(this[this.tableSoftKeyEntries.SoftKeyEntries_fkColumn]));
                }
                set {
                    this[this.tableSoftKeyEntries.SoftKeyEntries_fkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CodeOrder {
                get {
                    return ((int)(this[this.tableSoftKeyEntries.CodeOrderColumn]));
                }
                set {
                    this[this.tableSoftKeyEntries.CodeOrderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SoftKeyLabelTableRow SoftKeyLabelTableRowParent {
                get {
                    return ((SoftKeyLabelTableRow)(this.GetParentRow(this.Table.ParentRelations["SoftKeyLabelTable_SoftKeyEntries"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["SoftKeyLabelTable_SoftKeyEntries"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FavoriteKeyChannelTableRow : global::System.Data.DataRow {
            
            private FavoriteKeyChannelTableDataTable tableFavoriteKeyChannelTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FavoriteKeyChannelTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFavoriteKeyChannelTable = ((FavoriteKeyChannelTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte ModeKeyCode {
                get {
                    return ((byte)(this[this.tableFavoriteKeyChannelTable.ModeKeyCodeColumn]));
                }
                set {
                    this[this.tableFavoriteKeyChannelTable.ModeKeyCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte KeyCd {
                get {
                    return ((byte)(this[this.tableFavoriteKeyChannelTable.KeyCdColumn]));
                }
                set {
                    this[this.tableFavoriteKeyChannelTable.KeyCdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FavoriteKeyEntries_fk {
                get {
                    return ((int)(this[this.tableFavoriteKeyChannelTable.FavoriteKeyEntries_fkColumn]));
                }
                set {
                    this[this.tableFavoriteKeyChannelTable.FavoriteKeyEntries_fkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FavoriteKeyLabels_fk {
                get {
                    return ((int)(this[this.tableFavoriteKeyChannelTable.FavoriteKeyLabels_fkColumn]));
                }
                set {
                    this[this.tableFavoriteKeyChannelTable.FavoriteKeyLabels_fkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte NumberOfChannels {
                get {
                    return ((byte)(this[this.tableFavoriteKeyChannelTable.NumberOfChannelsColumn]));
                }
                set {
                    this[this.tableFavoriteKeyChannelTable.NumberOfChannelsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte ChannelEnterKeyCode {
                get {
                    return ((byte)(this[this.tableFavoriteKeyChannelTable.ChannelEnterKeyCodeColumn]));
                }
                set {
                    this[this.tableFavoriteKeyChannelTable.ChannelEnterKeyCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte NumberOfFixedSizeDigits {
                get {
                    return ((byte)(this[this.tableFavoriteKeyChannelTable.NumberOfFixedSizeDigitsColumn]));
                }
                set {
                    this[this.tableFavoriteKeyChannelTable.NumberOfFixedSizeDigitsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Active {
                get {
                    return ((bool)(this[this.tableFavoriteKeyChannelTable.ActiveColumn]));
                }
                set {
                    this[this.tableFavoriteKeyChannelTable.ActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool UserLocked {
                get {
                    return ((bool)(this[this.tableFavoriteKeyChannelTable.UserLockedColumn]));
                }
                set {
                    this[this.tableFavoriteKeyChannelTable.UserLockedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ServiceLocked {
                get {
                    return ((bool)(this[this.tableFavoriteKeyChannelTable.ServiceLockedColumn]));
                }
                set {
                    this[this.tableFavoriteKeyChannelTable.ServiceLockedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FavoriteKeyEntriesRow[] GetFavoriteKeyEntriesRows() {
                if ((this.Table.ChildRelations["FavoriteKeyChannelTable_FavoriteKeyEntries"] == null)) {
                    return new FavoriteKeyEntriesRow[0];
                }
                else {
                    return ((FavoriteKeyEntriesRow[])(base.GetChildRows(this.Table.ChildRelations["FavoriteKeyChannelTable_FavoriteKeyEntries"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FavoriteKeyLabelsRow[] GetFavoriteKeyLabelsRows() {
                if ((this.Table.ChildRelations["FavoriteKeyChannelTable_FavoriteKeyLabels"] == null)) {
                    return new FavoriteKeyLabelsRow[0];
                }
                else {
                    return ((FavoriteKeyLabelsRow[])(base.GetChildRows(this.Table.ChildRelations["FavoriteKeyChannelTable_FavoriteKeyLabels"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FavoriteKeyEntriesRow : global::System.Data.DataRow {
            
            private FavoriteKeyEntriesDataTable tableFavoriteKeyEntries;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FavoriteKeyEntriesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFavoriteKeyEntries = ((FavoriteKeyEntriesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte FavoriteEntry {
                get {
                    return ((byte)(this[this.tableFavoriteKeyEntries.FavoriteEntryColumn]));
                }
                set {
                    this[this.tableFavoriteKeyEntries.FavoriteEntryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FavoriteKeyEntries_fk {
                get {
                    return ((int)(this[this.tableFavoriteKeyEntries.FavoriteKeyEntries_fkColumn]));
                }
                set {
                    this[this.tableFavoriteKeyEntries.FavoriteKeyEntries_fkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CodeOrder {
                get {
                    return ((int)(this[this.tableFavoriteKeyEntries.CodeOrderColumn]));
                }
                set {
                    this[this.tableFavoriteKeyEntries.CodeOrderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FavoriteKeyChannelTableRow FavoriteKeyChannelTableRowParent {
                get {
                    return ((FavoriteKeyChannelTableRow)(this.GetParentRow(this.Table.ParentRelations["FavoriteKeyChannelTable_FavoriteKeyEntries"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FavoriteKeyChannelTable_FavoriteKeyEntries"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FavoriteKeyLabelsRow : global::System.Data.DataRow {
            
            private FavoriteKeyLabelsDataTable tableFavoriteKeyLabels;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FavoriteKeyLabelsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFavoriteKeyLabels = ((FavoriteKeyLabelsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Label {
                get {
                    return ((string)(this[this.tableFavoriteKeyLabels.LabelColumn]));
                }
                set {
                    this[this.tableFavoriteKeyLabels.LabelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FavoriteKeyLabels_fk {
                get {
                    return ((int)(this[this.tableFavoriteKeyLabels.FavoriteKeyLabels_fkColumn]));
                }
                set {
                    this[this.tableFavoriteKeyLabels.FavoriteKeyLabels_fkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CodeOrder {
                get {
                    return ((int)(this[this.tableFavoriteKeyLabels.CodeOrderColumn]));
                }
                set {
                    this[this.tableFavoriteKeyLabels.CodeOrderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FavoriteKeyChannelTableRow FavoriteKeyChannelTableRowParent {
                get {
                    return ((FavoriteKeyChannelTableRow)(this.GetParentRow(this.Table.ParentRelations["FavoriteKeyChannelTable_FavoriteKeyLabels"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FavoriteKeyChannelTable_FavoriteKeyLabels"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LearnedKeysTableRow : global::System.Data.DataRow {
            
            private LearnedKeysTableDataTable tableLearnedKeysTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LearnedKeysTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLearnedKeysTable = ((LearnedKeysTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte ModeKeyCode {
                get {
                    return ((byte)(this[this.tableLearnedKeysTable.ModeKeyCodeColumn]));
                }
                set {
                    this[this.tableLearnedKeysTable.ModeKeyCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte KeyCd {
                get {
                    return ((byte)(this[this.tableLearnedKeysTable.KeyCdColumn]));
                }
                set {
                    this[this.tableLearnedKeysTable.KeyCdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LearnedKeyEntries_fk {
                get {
                    return ((int)(this[this.tableLearnedKeysTable.LearnedKeyEntries_fkColumn]));
                }
                set {
                    this[this.tableLearnedKeysTable.LearnedKeyEntries_fkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Active {
                get {
                    return ((bool)(this[this.tableLearnedKeysTable.ActiveColumn]));
                }
                set {
                    this[this.tableLearnedKeysTable.ActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool UserLocked {
                get {
                    return ((bool)(this[this.tableLearnedKeysTable.UserLockedColumn]));
                }
                set {
                    this[this.tableLearnedKeysTable.UserLockedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ServiceLocked {
                get {
                    return ((bool)(this[this.tableLearnedKeysTable.ServiceLockedColumn]));
                }
                set {
                    this[this.tableLearnedKeysTable.ServiceLockedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LearnedKeyEntriesRow[] GetLearnedKeyEntriesRows() {
                if ((this.Table.ChildRelations["LearnedKeysTable_LearnedKeyEntries"] == null)) {
                    return new LearnedKeyEntriesRow[0];
                }
                else {
                    return ((LearnedKeyEntriesRow[])(base.GetChildRows(this.Table.ChildRelations["LearnedKeysTable_LearnedKeyEntries"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LearnedKeyEntriesRow : global::System.Data.DataRow {
            
            private LearnedKeyEntriesDataTable tableLearnedKeyEntries;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LearnedKeyEntriesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLearnedKeyEntries = ((LearnedKeyEntriesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte LearnedEntry {
                get {
                    return ((byte)(this[this.tableLearnedKeyEntries.LearnedEntryColumn]));
                }
                set {
                    this[this.tableLearnedKeyEntries.LearnedEntryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LearnedKeyEntries_fk {
                get {
                    return ((int)(this[this.tableLearnedKeyEntries.LearnedKeyEntries_fkColumn]));
                }
                set {
                    this[this.tableLearnedKeyEntries.LearnedKeyEntries_fkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CodeOrder {
                get {
                    return ((int)(this[this.tableLearnedKeyEntries.CodeOrderColumn]));
                }
                set {
                    this[this.tableLearnedKeyEntries.CodeOrderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LearnedKeysTableRow LearnedKeysTableRowParent {
                get {
                    return ((LearnedKeysTableRow)(this.GetParentRow(this.Table.ParentRelations["LearnedKeysTable_LearnedKeyEntries"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["LearnedKeysTable_LearnedKeyEntries"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DevicesRow : global::System.Data.DataRow {
            
            private DevicesDataTable tableDevices;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DevicesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDevices = ((DevicesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte DBDevType {
                get {
                    return ((byte)(this[this.tableDevices.DBDevTypeColumn]));
                }
                set {
                    this[this.tableDevices.DBDevTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ushort DBDevID {
                get {
                    return ((ushort)(this[this.tableDevices.DBDevIDColumn]));
                }
                set {
                    this[this.tableDevices.DBDevIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte ModeKeyCode {
                get {
                    return ((byte)(this[this.tableDevices.ModeKeyCodeColumn]));
                }
                set {
                    this[this.tableDevices.ModeKeyCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte KeyCd {
                get {
                    return ((byte)(this[this.tableDevices.KeyCdColumn]));
                }
                set {
                    this[this.tableDevices.KeyCdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ushort ExecutorNumber {
                get {
                    return ((ushort)(this[this.tableDevices.ExecutorNumberColumn]));
                }
                set {
                    this[this.tableDevices.ExecutorNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Executor_fk {
                get {
                    return ((int)(this[this.tableDevices.Executor_fkColumn]));
                }
                set {
                    this[this.tableDevices.Executor_fkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Prefix_fk {
                get {
                    return ((int)(this[this.tableDevices.Prefix_fkColumn]));
                }
                set {
                    this[this.tableDevices.Prefix_fkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Active {
                get {
                    return ((bool)(this[this.tableDevices.ActiveColumn]));
                }
                set {
                    this[this.tableDevices.ActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool UserLocked {
                get {
                    return ((bool)(this[this.tableDevices.UserLockedColumn]));
                }
                set {
                    this[this.tableDevices.UserLockedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ServiceLocked {
                get {
                    return ((bool)(this[this.tableDevices.ServiceLockedColumn]));
                }
                set {
                    this[this.tableDevices.ServiceLockedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExecutorsRow[] GetExecutorsRows() {
                if ((this.Table.ChildRelations["DevicesToExecutors"] == null)) {
                    return new ExecutorsRow[0];
                }
                else {
                    return ((ExecutorsRow[])(base.GetChildRows(this.Table.ChildRelations["DevicesToExecutors"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrefixesRow[] GetPrefixesRows() {
                if ((this.Table.ChildRelations["DevicesToPrefixes"] == null)) {
                    return new PrefixesRow[0];
                }
                else {
                    return ((PrefixesRow[])(base.GetChildRows(this.Table.ChildRelations["DevicesToPrefixes"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KeysRow[] GetKeysRows() {
                if ((this.Table.ChildRelations["Devices_Keys"] == null)) {
                    return new KeysRow[0];
                }
                else {
                    return ((KeysRow[])(base.GetChildRows(this.Table.ChildRelations["Devices_Keys"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ExecutorsRow : global::System.Data.DataRow {
            
            private ExecutorsDataTable tableExecutors;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ExecutorsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableExecutors = ((ExecutorsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ushort ExecutorCode {
                get {
                    return ((ushort)(this[this.tableExecutors.ExecutorCodeColumn]));
                }
                set {
                    this[this.tableExecutors.ExecutorCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Executor_fk {
                get {
                    return ((int)(this[this.tableExecutors.Executor_fkColumn]));
                }
                set {
                    this[this.tableExecutors.Executor_fkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CodeOrder {
                get {
                    return ((int)(this[this.tableExecutors.CodeOrderColumn]));
                }
                set {
                    this[this.tableExecutors.CodeOrderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DevicesRow DevicesRow {
                get {
                    return ((DevicesRow)(this.GetParentRow(this.Table.ParentRelations["DevicesToExecutors"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["DevicesToExecutors"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PrefixesRow : global::System.Data.DataRow {
            
            private PrefixesDataTable tablePrefixes;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PrefixesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePrefixes = ((PrefixesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte PrefixCode {
                get {
                    return ((byte)(this[this.tablePrefixes.PrefixCodeColumn]));
                }
                set {
                    this[this.tablePrefixes.PrefixCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Prefix_fk {
                get {
                    return ((int)(this[this.tablePrefixes.Prefix_fkColumn]));
                }
                set {
                    this[this.tablePrefixes.Prefix_fkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CodeOrder {
                get {
                    return ((int)(this[this.tablePrefixes.CodeOrderColumn]));
                }
                set {
                    this[this.tablePrefixes.CodeOrderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DevicesRow DevicesRow {
                get {
                    return ((DevicesRow)(this.GetParentRow(this.Table.ParentRelations["DevicesToPrefixes"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["DevicesToPrefixes"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class KeyIRsRow : global::System.Data.DataRow {
            
            private KeyIRsDataTable tableKeyIRs;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal KeyIRsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableKeyIRs = ((KeyIRsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ushort KeyIRCode {
                get {
                    return ((ushort)(this[this.tableKeyIRs.KeyIRCodeColumn]));
                }
                set {
                    this[this.tableKeyIRs.KeyIRCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Key_fk {
                get {
                    return ((int)(this[this.tableKeyIRs.Key_fkColumn]));
                }
                set {
                    this[this.tableKeyIRs.Key_fkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CodeOrder {
                get {
                    return ((int)(this[this.tableKeyIRs.CodeOrderColumn]));
                }
                set {
                    this[this.tableKeyIRs.CodeOrderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KeysRow KeysRow {
                get {
                    return ((KeysRow)(this.GetParentRow(this.Table.ParentRelations["KeysToKeysIR"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["KeysToKeysIR"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ModesRow : global::System.Data.DataRow {
            
            private ModesDataTable tableModes;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ModesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableModes = ((ModesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte DBDevType {
                get {
                    return ((byte)(this[this.tableModes.DBDevTypeColumn]));
                }
                set {
                    this[this.tableModes.DBDevTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ushort DBDevID {
                get {
                    return ((ushort)(this[this.tableModes.DBDevIDColumn]));
                }
                set {
                    this[this.tableModes.DBDevIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte ModeKeyCode {
                get {
                    return ((byte)(this[this.tableModes.ModeKeyCodeColumn]));
                }
                set {
                    this[this.tableModes.ModeKeyCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte KeyCd {
                get {
                    return ((byte)(this[this.tableModes.KeyCdColumn]));
                }
                set {
                    this[this.tableModes.KeyCdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Active {
                get {
                    return ((bool)(this[this.tableModes.ActiveColumn]));
                }
                set {
                    this[this.tableModes.ActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool UserLocked {
                get {
                    return ((bool)(this[this.tableModes.UserLockedColumn]));
                }
                set {
                    this[this.tableModes.UserLockedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ServiceLocked {
                get {
                    return ((bool)(this[this.tableModes.ServiceLockedColumn]));
                }
                set {
                    this[this.tableModes.ServiceLockedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte AudioSource {
                get {
                    return ((byte)(this[this.tableModes.AudioSourceColumn]));
                }
                set {
                    this[this.tableModes.AudioSourceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte VideoSource {
                get {
                    return ((byte)(this[this.tableModes.VideoSourceColumn]));
                }
                set {
                    this[this.tableModes.VideoSourceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte ChannelSource {
                get {
                    return ((byte)(this[this.tableModes.ChannelSourceColumn]));
                }
                set {
                    this[this.tableModes.ChannelSourceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte ModeFlag {
                get {
                    return ((byte)(this[this.tableModes.ModeFlagColumn]));
                }
                set {
                    this[this.tableModes.ModeFlagColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte Font {
                get {
                    return ((byte)(this[this.tableModes.FontColumn]));
                }
                set {
                    this[this.tableModes.FontColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte Length {
                get {
                    return ((byte)(this[this.tableModes.LengthColumn]));
                }
                set {
                    this[this.tableModes.LengthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Label {
                get {
                    return ((string)(this[this.tableModes.LabelColumn]));
                }
                set {
                    this[this.tableModes.LabelColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LCDSetupRow : global::System.Data.DataRow {
            
            private LCDSetupDataTable tableLCDSetup;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LCDSetupRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLCDSetup = ((LCDSetupDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte ModeKeyCode {
                get {
                    return ((byte)(this[this.tableLCDSetup.ModeKeyCodeColumn]));
                }
                set {
                    this[this.tableLCDSetup.ModeKeyCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte KeyCd {
                get {
                    return ((byte)(this[this.tableLCDSetup.KeyCdColumn]));
                }
                set {
                    this[this.tableLCDSetup.KeyCdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Active {
                get {
                    return ((bool)(this[this.tableLCDSetup.ActiveColumn]));
                }
                set {
                    this[this.tableLCDSetup.ActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool UserLocked {
                get {
                    return ((bool)(this[this.tableLCDSetup.UserLockedColumn]));
                }
                set {
                    this[this.tableLCDSetup.UserLockedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ServiceLocked {
                get {
                    return ((bool)(this[this.tableLCDSetup.ServiceLockedColumn]));
                }
                set {
                    this[this.tableLCDSetup.ServiceLockedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte ContrastLevel {
                get {
                    return ((byte)(this[this.tableLCDSetup.ContrastLevelColumn]));
                }
                set {
                    this[this.tableLCDSetup.ContrastLevelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte LCD_Timeout {
                get {
                    return ((byte)(this[this.tableLCDSetup.LCD_TimeoutColumn]));
                }
                set {
                    this[this.tableLCDSetup.LCD_TimeoutColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte Language {
                get {
                    return ((byte)(this[this.tableLCDSetup.LanguageColumn]));
                }
                set {
                    this[this.tableLCDSetup.LanguageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte ClockFormat {
                get {
                    return ((byte)(this[this.tableLCDSetup.ClockFormatColumn]));
                }
                set {
                    this[this.tableLCDSetup.ClockFormatColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TimersSetupRow : global::System.Data.DataRow {
            
            private TimersSetupDataTable tableTimersSetup;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TimersSetupRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTimersSetup = ((TimersSetupDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte ModeKeyCode {
                get {
                    return ((byte)(this[this.tableTimersSetup.ModeKeyCodeColumn]));
                }
                set {
                    this[this.tableTimersSetup.ModeKeyCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte KeyCd {
                get {
                    return ((byte)(this[this.tableTimersSetup.KeyCdColumn]));
                }
                set {
                    this[this.tableTimersSetup.KeyCdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Active {
                get {
                    return ((bool)(this[this.tableTimersSetup.ActiveColumn]));
                }
                set {
                    this[this.tableTimersSetup.ActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool UserLocked {
                get {
                    return ((bool)(this[this.tableTimersSetup.UserLockedColumn]));
                }
                set {
                    this[this.tableTimersSetup.UserLockedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ServiceLocked {
                get {
                    return ((bool)(this[this.tableTimersSetup.ServiceLockedColumn]));
                }
                set {
                    this[this.tableTimersSetup.ServiceLockedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte BacklightTimeout {
                get {
                    return ((byte)(this[this.tableTimersSetup.BacklightTimeoutColumn]));
                }
                set {
                    this[this.tableTimersSetup.BacklightTimeoutColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte StuckKeyTimeout {
                get {
                    return ((byte)(this[this.tableTimersSetup.StuckKeyTimeoutColumn]));
                }
                set {
                    this[this.tableTimersSetup.StuckKeyTimeoutColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte ProgrammingModeTimeout {
                get {
                    return ((byte)(this[this.tableTimersSetup.ProgrammingModeTimeoutColumn]));
                }
                set {
                    this[this.tableTimersSetup.ProgrammingModeTimeoutColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte PowerKeyMacroDelay {
                get {
                    return ((byte)(this[this.tableTimersSetup.PowerKeyMacroDelayColumn]));
                }
                set {
                    this[this.tableTimersSetup.PowerKeyMacroDelayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte RegularKeyMacroDelay {
                get {
                    return ((byte)(this[this.tableTimersSetup.RegularKeyMacroDelayColumn]));
                }
                set {
                    this[this.tableTimersSetup.RegularKeyMacroDelayColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SIORegistryRow : global::System.Data.DataRow {
            
            private SIORegistryDataTable tableSIORegistry;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SIORegistryRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSIORegistry = ((SIORegistryDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte ModeKeyCode {
                get {
                    return ((byte)(this[this.tableSIORegistry.ModeKeyCodeColumn]));
                }
                set {
                    this[this.tableSIORegistry.ModeKeyCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte KeyCd {
                get {
                    return ((byte)(this[this.tableSIORegistry.KeyCdColumn]));
                }
                set {
                    this[this.tableSIORegistry.KeyCdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Active {
                get {
                    return ((bool)(this[this.tableSIORegistry.ActiveColumn]));
                }
                set {
                    this[this.tableSIORegistry.ActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool UserLocked {
                get {
                    return ((bool)(this[this.tableSIORegistry.UserLockedColumn]));
                }
                set {
                    this[this.tableSIORegistry.UserLockedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ServiceLocked {
                get {
                    return ((bool)(this[this.tableSIORegistry.ServiceLockedColumn]));
                }
                set {
                    this[this.tableSIORegistry.ServiceLockedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ushort RegistrySetting {
                get {
                    return ((ushort)(this[this.tableSIORegistry.RegistrySettingColumn]));
                }
                set {
                    this[this.tableSIORegistry.RegistrySettingColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class KeyMoverRow : global::System.Data.DataRow {
            
            private KeyMoverDataTable tableKeyMover;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal KeyMoverRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableKeyMover = ((KeyMoverDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte ModeKeyCode {
                get {
                    return ((byte)(this[this.tableKeyMover.ModeKeyCodeColumn]));
                }
                set {
                    this[this.tableKeyMover.ModeKeyCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte KeyCd {
                get {
                    return ((byte)(this[this.tableKeyMover.KeyCdColumn]));
                }
                set {
                    this[this.tableKeyMover.KeyCdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Active {
                get {
                    return ((bool)(this[this.tableKeyMover.ActiveColumn]));
                }
                set {
                    this[this.tableKeyMover.ActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool UserLocked {
                get {
                    return ((bool)(this[this.tableKeyMover.UserLockedColumn]));
                }
                set {
                    this[this.tableKeyMover.UserLockedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ServiceLocked {
                get {
                    return ((bool)(this[this.tableKeyMover.ServiceLockedColumn]));
                }
                set {
                    this[this.tableKeyMover.ServiceLockedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte SourceDBDevType {
                get {
                    return ((byte)(this[this.tableKeyMover.SourceDBDevTypeColumn]));
                }
                set {
                    this[this.tableKeyMover.SourceDBDevTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ushort SourceSourceDBDevID {
                get {
                    return ((ushort)(this[this.tableKeyMover.SourceSourceDBDevIDColumn]));
                }
                set {
                    this[this.tableKeyMover.SourceSourceDBDevIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte SourceKey {
                get {
                    return ((byte)(this[this.tableKeyMover.SourceKeyColumn]));
                }
                set {
                    this[this.tableKeyMover.SourceKeyColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SynthMoverRow : global::System.Data.DataRow {
            
            private SynthMoverDataTable tableSynthMover;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SynthMoverRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSynthMover = ((SynthMoverDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte ModeKeyCode {
                get {
                    return ((byte)(this[this.tableSynthMover.ModeKeyCodeColumn]));
                }
                set {
                    this[this.tableSynthMover.ModeKeyCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte KeyCd {
                get {
                    return ((byte)(this[this.tableSynthMover.KeyCdColumn]));
                }
                set {
                    this[this.tableSynthMover.KeyCdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Active {
                get {
                    return ((bool)(this[this.tableSynthMover.ActiveColumn]));
                }
                set {
                    this[this.tableSynthMover.ActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool UserLocked {
                get {
                    return ((bool)(this[this.tableSynthMover.UserLockedColumn]));
                }
                set {
                    this[this.tableSynthMover.UserLockedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ServiceLocked {
                get {
                    return ((bool)(this[this.tableSynthMover.ServiceLockedColumn]));
                }
                set {
                    this[this.tableSynthMover.ServiceLockedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte SourceDBDevType {
                get {
                    return ((byte)(this[this.tableSynthMover.SourceDBDevTypeColumn]));
                }
                set {
                    this[this.tableSynthMover.SourceDBDevTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ushort SourceSourceDBDevID {
                get {
                    return ((ushort)(this[this.tableSynthMover.SourceSourceDBDevIDColumn]));
                }
                set {
                    this[this.tableSynthMover.SourceSourceDBDevIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SynthValue {
                get {
                    return ((int)(this[this.tableSynthMover.SynthValueColumn]));
                }
                set {
                    this[this.tableSynthMover.SynthValueColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PunchThruTableRow : global::System.Data.DataRow {
            
            private PunchThruTableDataTable tablePunchThruTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PunchThruTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePunchThruTable = ((PunchThruTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte ModeKeyCode {
                get {
                    return ((byte)(this[this.tablePunchThruTable.ModeKeyCodeColumn]));
                }
                set {
                    this[this.tablePunchThruTable.ModeKeyCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte KeyCd {
                get {
                    return ((byte)(this[this.tablePunchThruTable.KeyCdColumn]));
                }
                set {
                    this[this.tablePunchThruTable.KeyCdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PunchThruEntries_fk {
                get {
                    return ((int)(this[this.tablePunchThruTable.PunchThruEntries_fkColumn]));
                }
                set {
                    this[this.tablePunchThruTable.PunchThruEntries_fkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Active {
                get {
                    return ((bool)(this[this.tablePunchThruTable.ActiveColumn]));
                }
                set {
                    this[this.tablePunchThruTable.ActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool UserLocked {
                get {
                    return ((bool)(this[this.tablePunchThruTable.UserLockedColumn]));
                }
                set {
                    this[this.tablePunchThruTable.UserLockedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ServiceLocked {
                get {
                    return ((bool)(this[this.tablePunchThruTable.ServiceLockedColumn]));
                }
                set {
                    this[this.tablePunchThruTable.ServiceLockedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PunchThruEntriesRow[] GetPunchThruEntriesRows() {
                if ((this.Table.ChildRelations["PunchThruTable_PunchThruEntries"] == null)) {
                    return new PunchThruEntriesRow[0];
                }
                else {
                    return ((PunchThruEntriesRow[])(base.GetChildRows(this.Table.ChildRelations["PunchThruTable_PunchThruEntries"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PunchThruEntriesRow : global::System.Data.DataRow {
            
            private PunchThruEntriesDataTable tablePunchThruEntries;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PunchThruEntriesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePunchThruEntries = ((PunchThruEntriesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte KeyToPunchThru {
                get {
                    return ((byte)(this[this.tablePunchThruEntries.KeyToPunchThruColumn]));
                }
                set {
                    this[this.tablePunchThruEntries.KeyToPunchThruColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte TargetMode {
                get {
                    return ((byte)(this[this.tablePunchThruEntries.TargetModeColumn]));
                }
                set {
                    this[this.tablePunchThruEntries.TargetModeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PunchThruEntries_fk {
                get {
                    return ((int)(this[this.tablePunchThruEntries.PunchThruEntries_fkColumn]));
                }
                set {
                    this[this.tablePunchThruEntries.PunchThruEntries_fkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CodeOrder {
                get {
                    return ((int)(this[this.tablePunchThruEntries.CodeOrderColumn]));
                }
                set {
                    this[this.tablePunchThruEntries.CodeOrderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PunchThruTableRow PunchThruTableRowParent {
                get {
                    return ((PunchThruTableRow)(this.GetParentRow(this.Table.ParentRelations["PunchThruTable_PunchThruEntries"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["PunchThruTable_PunchThruEntries"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class QuickSearchTableRow : global::System.Data.DataRow {
            
            private QuickSearchTableDataTable tableQuickSearchTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal QuickSearchTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableQuickSearchTable = ((QuickSearchTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte ModeKeyCode {
                get {
                    return ((byte)(this[this.tableQuickSearchTable.ModeKeyCodeColumn]));
                }
                set {
                    this[this.tableQuickSearchTable.ModeKeyCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte KeyCd {
                get {
                    return ((byte)(this[this.tableQuickSearchTable.KeyCdColumn]));
                }
                set {
                    this[this.tableQuickSearchTable.KeyCdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int QuickSearchEntries_fk {
                get {
                    return ((int)(this[this.tableQuickSearchTable.QuickSearchEntries_fkColumn]));
                }
                set {
                    this[this.tableQuickSearchTable.QuickSearchEntries_fkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Active {
                get {
                    return ((bool)(this[this.tableQuickSearchTable.ActiveColumn]));
                }
                set {
                    this[this.tableQuickSearchTable.ActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool UserLocked {
                get {
                    return ((bool)(this[this.tableQuickSearchTable.UserLockedColumn]));
                }
                set {
                    this[this.tableQuickSearchTable.UserLockedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ServiceLocked {
                get {
                    return ((bool)(this[this.tableQuickSearchTable.ServiceLockedColumn]));
                }
                set {
                    this[this.tableQuickSearchTable.ServiceLockedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuickSearchEntriesRow[] GetQuickSearchEntriesRows() {
                if ((this.Table.ChildRelations["QuickSearchTable_QuickSearchEntries"] == null)) {
                    return new QuickSearchEntriesRow[0];
                }
                else {
                    return ((QuickSearchEntriesRow[])(base.GetChildRows(this.Table.ChildRelations["QuickSearchTable_QuickSearchEntries"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class QuickSearchEntriesRow : global::System.Data.DataRow {
            
            private QuickSearchEntriesDataTable tableQuickSearchEntries;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal QuickSearchEntriesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableQuickSearchEntries = ((QuickSearchEntriesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte DBDevType {
                get {
                    return ((byte)(this[this.tableQuickSearchEntries.DBDevTypeColumn]));
                }
                set {
                    this[this.tableQuickSearchEntries.DBDevTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ushort DBDevID {
                get {
                    return ((ushort)(this[this.tableQuickSearchEntries.DBDevIDColumn]));
                }
                set {
                    this[this.tableQuickSearchEntries.DBDevIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int QuickSearchEntries_fk {
                get {
                    return ((int)(this[this.tableQuickSearchEntries.QuickSearchEntries_fkColumn]));
                }
                set {
                    this[this.tableQuickSearchEntries.QuickSearchEntries_fkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CodeOrder {
                get {
                    return ((int)(this[this.tableQuickSearchEntries.CodeOrderColumn]));
                }
                set {
                    this[this.tableQuickSearchEntries.CodeOrderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuickSearchTableRow QuickSearchTableRowParent {
                get {
                    return ((QuickSearchTableRow)(this.GetParentRow(this.Table.ParentRelations["QuickSearchTable_QuickSearchEntries"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["QuickSearchTable_QuickSearchEntries"]);
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class KeysRowChangeEvent : global::System.EventArgs {
            
            private KeysRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KeysRowChangeEvent(KeysRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KeysRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class StandardMacrosRowChangeEvent : global::System.EventArgs {
            
            private StandardMacrosRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StandardMacrosRowChangeEvent(StandardMacrosRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StandardMacrosRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MacroStepsRowChangeEvent : global::System.EventArgs {
            
            private MacroStepsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MacroStepsRowChangeEvent(MacroStepsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MacroStepsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ActivityLabelsRowChangeEvent : global::System.EventArgs {
            
            private ActivityLabelsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActivityLabelsRowChangeEvent(ActivityLabelsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActivityLabelsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LabelsTableRowChangeEvent : global::System.EventArgs {
            
            private LabelsTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LabelsTableRowChangeEvent(LabelsTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LabelsTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SoftKeyLabelTableRowChangeEvent : global::System.EventArgs {
            
            private SoftKeyLabelTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SoftKeyLabelTableRowChangeEvent(SoftKeyLabelTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SoftKeyLabelTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SoftKeyEntriesRowChangeEvent : global::System.EventArgs {
            
            private SoftKeyEntriesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SoftKeyEntriesRowChangeEvent(SoftKeyEntriesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SoftKeyEntriesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FavoriteKeyChannelTableRowChangeEvent : global::System.EventArgs {
            
            private FavoriteKeyChannelTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FavoriteKeyChannelTableRowChangeEvent(FavoriteKeyChannelTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FavoriteKeyChannelTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FavoriteKeyEntriesRowChangeEvent : global::System.EventArgs {
            
            private FavoriteKeyEntriesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FavoriteKeyEntriesRowChangeEvent(FavoriteKeyEntriesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FavoriteKeyEntriesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FavoriteKeyLabelsRowChangeEvent : global::System.EventArgs {
            
            private FavoriteKeyLabelsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FavoriteKeyLabelsRowChangeEvent(FavoriteKeyLabelsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FavoriteKeyLabelsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LearnedKeysTableRowChangeEvent : global::System.EventArgs {
            
            private LearnedKeysTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LearnedKeysTableRowChangeEvent(LearnedKeysTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LearnedKeysTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LearnedKeyEntriesRowChangeEvent : global::System.EventArgs {
            
            private LearnedKeyEntriesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LearnedKeyEntriesRowChangeEvent(LearnedKeyEntriesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LearnedKeyEntriesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DevicesRowChangeEvent : global::System.EventArgs {
            
            private DevicesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DevicesRowChangeEvent(DevicesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DevicesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ExecutorsRowChangeEvent : global::System.EventArgs {
            
            private ExecutorsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExecutorsRowChangeEvent(ExecutorsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExecutorsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PrefixesRowChangeEvent : global::System.EventArgs {
            
            private PrefixesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrefixesRowChangeEvent(PrefixesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrefixesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class KeyIRsRowChangeEvent : global::System.EventArgs {
            
            private KeyIRsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KeyIRsRowChangeEvent(KeyIRsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KeyIRsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ModesRowChangeEvent : global::System.EventArgs {
            
            private ModesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModesRowChangeEvent(ModesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LCDSetupRowChangeEvent : global::System.EventArgs {
            
            private LCDSetupRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LCDSetupRowChangeEvent(LCDSetupRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LCDSetupRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TimersSetupRowChangeEvent : global::System.EventArgs {
            
            private TimersSetupRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TimersSetupRowChangeEvent(TimersSetupRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TimersSetupRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SIORegistryRowChangeEvent : global::System.EventArgs {
            
            private SIORegistryRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SIORegistryRowChangeEvent(SIORegistryRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SIORegistryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class KeyMoverRowChangeEvent : global::System.EventArgs {
            
            private KeyMoverRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KeyMoverRowChangeEvent(KeyMoverRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KeyMoverRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SynthMoverRowChangeEvent : global::System.EventArgs {
            
            private SynthMoverRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SynthMoverRowChangeEvent(SynthMoverRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SynthMoverRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PunchThruTableRowChangeEvent : global::System.EventArgs {
            
            private PunchThruTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PunchThruTableRowChangeEvent(PunchThruTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PunchThruTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PunchThruEntriesRowChangeEvent : global::System.EventArgs {
            
            private PunchThruEntriesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PunchThruEntriesRowChangeEvent(PunchThruEntriesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PunchThruEntriesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class QuickSearchTableRowChangeEvent : global::System.EventArgs {
            
            private QuickSearchTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuickSearchTableRowChangeEvent(QuickSearchTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuickSearchTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class QuickSearchEntriesRowChangeEvent : global::System.EventArgs {
            
            private QuickSearchEntriesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuickSearchEntriesRowChangeEvent(QuickSearchEntriesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuickSearchEntriesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591