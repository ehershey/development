//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1378
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace DBToXML {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("RemoteKeysDBToXMLDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class RemoteKeysDBToXMLDS : global::System.Data.DataSet {
        
        private RemoteKeysDataTable tableRemoteKeys;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public RemoteKeysDBToXMLDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected RemoteKeysDBToXMLDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["RemoteKeys"] != null)) {
                    base.Tables.Add(new RemoteKeysDataTable(ds.Tables["RemoteKeys"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RemoteKeysDataTable RemoteKeys {
            get {
                return this.tableRemoteKeys;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            RemoteKeysDBToXMLDS cln = ((RemoteKeysDBToXMLDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["RemoteKeys"] != null)) {
                    base.Tables.Add(new RemoteKeysDataTable(ds.Tables["RemoteKeys"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableRemoteKeys = ((RemoteKeysDataTable)(base.Tables["RemoteKeys"]));
            if ((initTable == true)) {
                if ((this.tableRemoteKeys != null)) {
                    this.tableRemoteKeys.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "RemoteKeysDBToXMLDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/RemoteKeysDBToXMLDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableRemoteKeys = new RemoteKeysDataTable();
            base.Tables.Add(this.tableRemoteKeys);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRemoteKeys() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            RemoteKeysDBToXMLDS ds = new RemoteKeysDBToXMLDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void RemoteKeysRowChangeEventHandler(object sender, RemoteKeysRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RemoteKeysDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnKeyName;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnKeyScanCode;
            
            private global::System.Data.DataColumn columnIRKey;
            
            private global::System.Data.DataColumn columnValidMacroTarget;
            
            private global::System.Data.DataColumn columnRemoteTypeID;
            
            private global::System.Data.DataColumn columnValidMoverTarget;
            
            private global::System.Data.DataColumn columnValidLearningTarget;
            
            private global::System.Data.DataColumn columnIsConfiguredKey;
            
            private global::System.Data.DataColumn columnIsSoftKey;
            
            private global::System.Data.DataColumn columnIsChannel;
            
            private global::System.Data.DataColumn columnIsDigit;
            
            private global::System.Data.DataColumn columnIsVolume;
            
            private global::System.Data.DataColumn columnIsTransport;
            
            private global::System.Data.DataColumn columnIsActivity;
            
            private global::System.Data.DataColumn columnIsSNS;
            
            private global::System.Data.DataColumn columnIsMode;
            
            private global::System.Data.DataColumn columnKeyFlags;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RemoteKeysDataTable() {
                this.TableName = "RemoteKeys";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RemoteKeysDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RemoteKeysDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KeyNameColumn {
                get {
                    return this.columnKeyName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KeyScanCodeColumn {
                get {
                    return this.columnKeyScanCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IRKeyColumn {
                get {
                    return this.columnIRKey;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValidMacroTargetColumn {
                get {
                    return this.columnValidMacroTarget;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RemoteTypeIDColumn {
                get {
                    return this.columnRemoteTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValidMoverTargetColumn {
                get {
                    return this.columnValidMoverTarget;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValidLearningTargetColumn {
                get {
                    return this.columnValidLearningTarget;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsConfiguredKeyColumn {
                get {
                    return this.columnIsConfiguredKey;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsSoftKeyColumn {
                get {
                    return this.columnIsSoftKey;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsChannelColumn {
                get {
                    return this.columnIsChannel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsDigitColumn {
                get {
                    return this.columnIsDigit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsVolumeColumn {
                get {
                    return this.columnIsVolume;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsTransportColumn {
                get {
                    return this.columnIsTransport;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsActivityColumn {
                get {
                    return this.columnIsActivity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsSNSColumn {
                get {
                    return this.columnIsSNS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsModeColumn {
                get {
                    return this.columnIsMode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KeyFlagsColumn {
                get {
                    return this.columnKeyFlags;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RemoteKeysRow this[int index] {
                get {
                    return ((RemoteKeysRow)(this.Rows[index]));
                }
            }
            
            public event RemoteKeysRowChangeEventHandler RemoteKeysRowChanging;
            
            public event RemoteKeysRowChangeEventHandler RemoteKeysRowChanged;
            
            public event RemoteKeysRowChangeEventHandler RemoteKeysRowDeleting;
            
            public event RemoteKeysRowChangeEventHandler RemoteKeysRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRemoteKeysRow(RemoteKeysRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RemoteKeysRow AddRemoteKeysRow(
                        string KeyName, 
                        string Description, 
                        int KeyScanCode, 
                        short IRKey, 
                        short ValidMacroTarget, 
                        int RemoteTypeID, 
                        short ValidMoverTarget, 
                        short ValidLearningTarget, 
                        short IsConfiguredKey, 
                        short IsSoftKey, 
                        short IsChannel, 
                        short IsDigit, 
                        short IsVolume, 
                        short IsTransport, 
                        short IsActivity, 
                        short IsSNS, 
                        short IsMode, 
                        byte[] KeyFlags) {
                RemoteKeysRow rowRemoteKeysRow = ((RemoteKeysRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        KeyName,
                        Description,
                        KeyScanCode,
                        IRKey,
                        ValidMacroTarget,
                        RemoteTypeID,
                        ValidMoverTarget,
                        ValidLearningTarget,
                        IsConfiguredKey,
                        IsSoftKey,
                        IsChannel,
                        IsDigit,
                        IsVolume,
                        IsTransport,
                        IsActivity,
                        IsSNS,
                        IsMode,
                        KeyFlags};
                rowRemoteKeysRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRemoteKeysRow);
                return rowRemoteKeysRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RemoteKeysRow FindByKeyNameRemoteTypeID(string KeyName, int RemoteTypeID) {
                return ((RemoteKeysRow)(this.Rows.Find(new object[] {
                            KeyName,
                            RemoteTypeID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                RemoteKeysDataTable cln = ((RemoteKeysDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new RemoteKeysDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnKeyName = base.Columns["KeyName"];
                this.columnDescription = base.Columns["Description"];
                this.columnKeyScanCode = base.Columns["KeyScanCode"];
                this.columnIRKey = base.Columns["IRKey"];
                this.columnValidMacroTarget = base.Columns["ValidMacroTarget"];
                this.columnRemoteTypeID = base.Columns["RemoteTypeID"];
                this.columnValidMoverTarget = base.Columns["ValidMoverTarget"];
                this.columnValidLearningTarget = base.Columns["ValidLearningTarget"];
                this.columnIsConfiguredKey = base.Columns["IsConfiguredKey"];
                this.columnIsSoftKey = base.Columns["IsSoftKey"];
                this.columnIsChannel = base.Columns["IsChannel"];
                this.columnIsDigit = base.Columns["IsDigit"];
                this.columnIsVolume = base.Columns["IsVolume"];
                this.columnIsTransport = base.Columns["IsTransport"];
                this.columnIsActivity = base.Columns["IsActivity"];
                this.columnIsSNS = base.Columns["IsSNS"];
                this.columnIsMode = base.Columns["IsMode"];
                this.columnKeyFlags = base.Columns["KeyFlags"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnKeyName = new global::System.Data.DataColumn("KeyName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKeyName);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnKeyScanCode = new global::System.Data.DataColumn("KeyScanCode", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKeyScanCode);
                this.columnIRKey = new global::System.Data.DataColumn("IRKey", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIRKey);
                this.columnValidMacroTarget = new global::System.Data.DataColumn("ValidMacroTarget", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValidMacroTarget);
                this.columnRemoteTypeID = new global::System.Data.DataColumn("RemoteTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemoteTypeID);
                this.columnValidMoverTarget = new global::System.Data.DataColumn("ValidMoverTarget", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValidMoverTarget);
                this.columnValidLearningTarget = new global::System.Data.DataColumn("ValidLearningTarget", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValidLearningTarget);
                this.columnIsConfiguredKey = new global::System.Data.DataColumn("IsConfiguredKey", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsConfiguredKey);
                this.columnIsSoftKey = new global::System.Data.DataColumn("IsSoftKey", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsSoftKey);
                this.columnIsChannel = new global::System.Data.DataColumn("IsChannel", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsChannel);
                this.columnIsDigit = new global::System.Data.DataColumn("IsDigit", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsDigit);
                this.columnIsVolume = new global::System.Data.DataColumn("IsVolume", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsVolume);
                this.columnIsTransport = new global::System.Data.DataColumn("IsTransport", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsTransport);
                this.columnIsActivity = new global::System.Data.DataColumn("IsActivity", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsActivity);
                this.columnIsSNS = new global::System.Data.DataColumn("IsSNS", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsSNS);
                this.columnIsMode = new global::System.Data.DataColumn("IsMode", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsMode);
                this.columnKeyFlags = new global::System.Data.DataColumn("KeyFlags", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKeyFlags);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnKeyName,
                                this.columnRemoteTypeID}, true));
                this.columnKeyName.AllowDBNull = false;
                this.columnKeyName.MaxLength = 50;
                this.columnDescription.AllowDBNull = false;
                this.columnDescription.MaxLength = 50;
                this.columnKeyScanCode.AllowDBNull = false;
                this.columnIRKey.AllowDBNull = false;
                this.columnValidMacroTarget.AllowDBNull = false;
                this.columnRemoteTypeID.AllowDBNull = false;
                this.columnValidMoverTarget.AllowDBNull = false;
                this.columnValidLearningTarget.AllowDBNull = false;
                this.columnIsConfiguredKey.AllowDBNull = false;
                this.columnIsSoftKey.AllowDBNull = false;
                this.columnIsChannel.AllowDBNull = false;
                this.columnIsDigit.AllowDBNull = false;
                this.columnIsVolume.AllowDBNull = false;
                this.columnIsTransport.AllowDBNull = false;
                this.columnIsActivity.AllowDBNull = false;
                this.columnIsSNS.AllowDBNull = false;
                this.columnIsMode.AllowDBNull = false;
                this.columnKeyFlags.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RemoteKeysRow NewRemoteKeysRow() {
                return ((RemoteKeysRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new RemoteKeysRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(RemoteKeysRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RemoteKeysRowChanged != null)) {
                    this.RemoteKeysRowChanged(this, new RemoteKeysRowChangeEvent(((RemoteKeysRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RemoteKeysRowChanging != null)) {
                    this.RemoteKeysRowChanging(this, new RemoteKeysRowChangeEvent(((RemoteKeysRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RemoteKeysRowDeleted != null)) {
                    this.RemoteKeysRowDeleted(this, new RemoteKeysRowChangeEvent(((RemoteKeysRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RemoteKeysRowDeleting != null)) {
                    this.RemoteKeysRowDeleting(this, new RemoteKeysRowChangeEvent(((RemoteKeysRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRemoteKeysRow(RemoteKeysRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RemoteKeysDBToXMLDS ds = new RemoteKeysDBToXMLDS();
                xs.Add(ds.GetSchemaSerializable());
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RemoteKeysDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RemoteKeysRow : global::System.Data.DataRow {
            
            private RemoteKeysDataTable tableRemoteKeys;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RemoteKeysRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRemoteKeys = ((RemoteKeysDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string KeyName {
                get {
                    return ((string)(this[this.tableRemoteKeys.KeyNameColumn]));
                }
                set {
                    this[this.tableRemoteKeys.KeyNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    return ((string)(this[this.tableRemoteKeys.DescriptionColumn]));
                }
                set {
                    this[this.tableRemoteKeys.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int KeyScanCode {
                get {
                    return ((int)(this[this.tableRemoteKeys.KeyScanCodeColumn]));
                }
                set {
                    this[this.tableRemoteKeys.KeyScanCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short IRKey {
                get {
                    return ((short)(this[this.tableRemoteKeys.IRKeyColumn]));
                }
                set {
                    this[this.tableRemoteKeys.IRKeyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short ValidMacroTarget {
                get {
                    return ((short)(this[this.tableRemoteKeys.ValidMacroTargetColumn]));
                }
                set {
                    this[this.tableRemoteKeys.ValidMacroTargetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RemoteTypeID {
                get {
                    return ((int)(this[this.tableRemoteKeys.RemoteTypeIDColumn]));
                }
                set {
                    this[this.tableRemoteKeys.RemoteTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short ValidMoverTarget {
                get {
                    return ((short)(this[this.tableRemoteKeys.ValidMoverTargetColumn]));
                }
                set {
                    this[this.tableRemoteKeys.ValidMoverTargetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short ValidLearningTarget {
                get {
                    return ((short)(this[this.tableRemoteKeys.ValidLearningTargetColumn]));
                }
                set {
                    this[this.tableRemoteKeys.ValidLearningTargetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short IsConfiguredKey {
                get {
                    return ((short)(this[this.tableRemoteKeys.IsConfiguredKeyColumn]));
                }
                set {
                    this[this.tableRemoteKeys.IsConfiguredKeyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short IsSoftKey {
                get {
                    return ((short)(this[this.tableRemoteKeys.IsSoftKeyColumn]));
                }
                set {
                    this[this.tableRemoteKeys.IsSoftKeyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short IsChannel {
                get {
                    return ((short)(this[this.tableRemoteKeys.IsChannelColumn]));
                }
                set {
                    this[this.tableRemoteKeys.IsChannelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short IsDigit {
                get {
                    return ((short)(this[this.tableRemoteKeys.IsDigitColumn]));
                }
                set {
                    this[this.tableRemoteKeys.IsDigitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short IsVolume {
                get {
                    return ((short)(this[this.tableRemoteKeys.IsVolumeColumn]));
                }
                set {
                    this[this.tableRemoteKeys.IsVolumeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short IsTransport {
                get {
                    return ((short)(this[this.tableRemoteKeys.IsTransportColumn]));
                }
                set {
                    this[this.tableRemoteKeys.IsTransportColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short IsActivity {
                get {
                    return ((short)(this[this.tableRemoteKeys.IsActivityColumn]));
                }
                set {
                    this[this.tableRemoteKeys.IsActivityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short IsSNS {
                get {
                    return ((short)(this[this.tableRemoteKeys.IsSNSColumn]));
                }
                set {
                    this[this.tableRemoteKeys.IsSNSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short IsMode {
                get {
                    return ((short)(this[this.tableRemoteKeys.IsModeColumn]));
                }
                set {
                    this[this.tableRemoteKeys.IsModeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] KeyFlags {
                get {
                    return ((byte[])(this[this.tableRemoteKeys.KeyFlagsColumn]));
                }
                set {
                    this[this.tableRemoteKeys.KeyFlagsColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RemoteKeysRowChangeEvent : global::System.EventArgs {
            
            private RemoteKeysRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RemoteKeysRowChangeEvent(RemoteKeysRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RemoteKeysRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace DBToXML.RemoteKeysDBToXMLDSTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class RemoteKeysTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public RemoteKeysTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "RemoteKeys";
            tableMapping.ColumnMappings.Add("KeyName", "KeyName");
            tableMapping.ColumnMappings.Add("Description", "Description");
            tableMapping.ColumnMappings.Add("KeyScanCode", "KeyScanCode");
            tableMapping.ColumnMappings.Add("IRKey", "IRKey");
            tableMapping.ColumnMappings.Add("ValidMacroTarget", "ValidMacroTarget");
            tableMapping.ColumnMappings.Add("RemoteTypeID", "RemoteTypeID");
            tableMapping.ColumnMappings.Add("ValidMoverTarget", "ValidMoverTarget");
            tableMapping.ColumnMappings.Add("ValidLearningTarget", "ValidLearningTarget");
            tableMapping.ColumnMappings.Add("IsConfiguredKey", "IsConfiguredKey");
            tableMapping.ColumnMappings.Add("IsSoftKey", "IsSoftKey");
            tableMapping.ColumnMappings.Add("IsChannel", "IsChannel");
            tableMapping.ColumnMappings.Add("IsDigit", "IsDigit");
            tableMapping.ColumnMappings.Add("IsVolume", "IsVolume");
            tableMapping.ColumnMappings.Add("IsTransport", "IsTransport");
            tableMapping.ColumnMappings.Add("IsActivity", "IsActivity");
            tableMapping.ColumnMappings.Add("IsSNS", "IsSNS");
            tableMapping.ColumnMappings.Add("IsMode", "IsMode");
            tableMapping.ColumnMappings.Add("KeyFlags", "KeyFlags");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[RemoteKeys] WHERE (([KeyName] = @Original_KeyName) AND ([Description] = @Original_Description) AND ([KeyScanCode] = @Original_KeyScanCode) AND ([IRKey] = @Original_IRKey) AND ([ValidMacroTarget] = @Original_ValidMacroTarget) AND ([RemoteTypeID] = @Original_RemoteTypeID) AND ([ValidMoverTarget] = @Original_ValidMoverTarget) AND ([ValidLearningTarget] = @Original_ValidLearningTarget) AND ([IsConfiguredKey] = @Original_IsConfiguredKey) AND ([IsSoftKey] = @Original_IsSoftKey) AND ([IsChannel] = @Original_IsChannel) AND ([IsDigit] = @Original_IsDigit) AND ([IsVolume] = @Original_IsVolume) AND ([IsTransport] = @Original_IsTransport) AND ([IsActivity] = @Original_IsActivity) AND ([IsSNS] = @Original_IsSNS) AND ([IsMode] = @Original_IsMode) AND ([KeyFlags] = @Original_KeyFlags))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_KeyName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "KeyName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Description", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Description", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_KeyScanCode", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "KeyScanCode", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IRKey", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IRKey", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ValidMacroTarget", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ValidMacroTarget", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RemoteTypeID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RemoteTypeID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ValidMoverTarget", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ValidMoverTarget", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ValidLearningTarget", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ValidLearningTarget", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IsConfiguredKey", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsConfiguredKey", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IsSoftKey", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsSoftKey", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IsChannel", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsChannel", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IsDigit", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsDigit", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IsVolume", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsVolume", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IsTransport", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsTransport", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IsActivity", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsActivity", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IsSNS", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsSNS", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IsMode", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsMode", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_KeyFlags", global::System.Data.SqlDbType.VarBinary, 0, global::System.Data.ParameterDirection.Input, 0, 0, "KeyFlags", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[RemoteKeys] ([KeyName], [Description], [KeyScanCode], [IRKey], [ValidMacroTarget], [RemoteTypeID], [ValidMoverTarget], [ValidLearningTarget], [IsConfiguredKey], [IsSoftKey], [IsChannel], [IsDigit], [IsVolume], [IsTransport], [IsActivity], [IsSNS], [IsMode], [KeyFlags]) VALUES (@KeyName, @Description, @KeyScanCode, @IRKey, @ValidMacroTarget, @RemoteTypeID, @ValidMoverTarget, @ValidLearningTarget, @IsConfiguredKey, @IsSoftKey, @IsChannel, @IsDigit, @IsVolume, @IsTransport, @IsActivity, @IsSNS, @IsMode, @KeyFlags);
SELECT KeyName, Description, KeyScanCode, IRKey, ValidMacroTarget, RemoteTypeID, ValidMoverTarget, ValidLearningTarget, IsConfiguredKey, IsSoftKey, IsChannel, IsDigit, IsVolume, IsTransport, IsActivity, IsSNS, IsMode, KeyFlags FROM RemoteKeys WHERE (KeyName = @KeyName) AND (RemoteTypeID = @RemoteTypeID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@KeyName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "KeyName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Description", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Description", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@KeyScanCode", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "KeyScanCode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IRKey", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IRKey", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ValidMacroTarget", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ValidMacroTarget", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RemoteTypeID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RemoteTypeID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ValidMoverTarget", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ValidMoverTarget", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ValidLearningTarget", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ValidLearningTarget", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsConfiguredKey", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsConfiguredKey", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsSoftKey", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsSoftKey", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsChannel", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsChannel", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsDigit", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsDigit", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsVolume", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsVolume", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsTransport", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsTransport", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsActivity", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsActivity", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsSNS", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsSNS", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsMode", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsMode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@KeyFlags", global::System.Data.SqlDbType.VarBinary, 0, global::System.Data.ParameterDirection.Input, 0, 0, "KeyFlags", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[RemoteKeys] SET [KeyName] = @KeyName, [Description] = @Description," +
                " [KeyScanCode] = @KeyScanCode, [IRKey] = @IRKey, [ValidMacroTarget] = @ValidMacr" +
                "oTarget, [RemoteTypeID] = @RemoteTypeID, [ValidMoverTarget] = @ValidMoverTarget," +
                " [ValidLearningTarget] = @ValidLearningTarget, [IsConfiguredKey] = @IsConfigured" +
                "Key, [IsSoftKey] = @IsSoftKey, [IsChannel] = @IsChannel, [IsDigit] = @IsDigit, [" +
                "IsVolume] = @IsVolume, [IsTransport] = @IsTransport, [IsActivity] = @IsActivity," +
                " [IsSNS] = @IsSNS, [IsMode] = @IsMode, [KeyFlags] = @KeyFlags WHERE (([KeyName] " +
                "= @Original_KeyName) AND ([Description] = @Original_Description) AND ([KeyScanCo" +
                "de] = @Original_KeyScanCode) AND ([IRKey] = @Original_IRKey) AND ([ValidMacroTar" +
                "get] = @Original_ValidMacroTarget) AND ([RemoteTypeID] = @Original_RemoteTypeID)" +
                " AND ([ValidMoverTarget] = @Original_ValidMoverTarget) AND ([ValidLearningTarget" +
                "] = @Original_ValidLearningTarget) AND ([IsConfiguredKey] = @Original_IsConfigur" +
                "edKey) AND ([IsSoftKey] = @Original_IsSoftKey) AND ([IsChannel] = @Original_IsCh" +
                "annel) AND ([IsDigit] = @Original_IsDigit) AND ([IsVolume] = @Original_IsVolume)" +
                " AND ([IsTransport] = @Original_IsTransport) AND ([IsActivity] = @Original_IsAct" +
                "ivity) AND ([IsSNS] = @Original_IsSNS) AND ([IsMode] = @Original_IsMode) AND ([K" +
                "eyFlags] = @Original_KeyFlags));\r\nSELECT KeyName, Description, KeyScanCode, IRKe" +
                "y, ValidMacroTarget, RemoteTypeID, ValidMoverTarget, ValidLearningTarget, IsConf" +
                "iguredKey, IsSoftKey, IsChannel, IsDigit, IsVolume, IsTransport, IsActivity, IsS" +
                "NS, IsMode, KeyFlags FROM RemoteKeys WHERE (KeyName = @KeyName) AND (RemoteTypeI" +
                "D = @RemoteTypeID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@KeyName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "KeyName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Description", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Description", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@KeyScanCode", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "KeyScanCode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IRKey", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IRKey", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ValidMacroTarget", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ValidMacroTarget", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RemoteTypeID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RemoteTypeID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ValidMoverTarget", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ValidMoverTarget", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ValidLearningTarget", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ValidLearningTarget", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsConfiguredKey", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsConfiguredKey", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsSoftKey", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsSoftKey", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsChannel", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsChannel", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsDigit", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsDigit", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsVolume", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsVolume", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsTransport", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsTransport", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsActivity", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsActivity", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsSNS", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsSNS", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsMode", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsMode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@KeyFlags", global::System.Data.SqlDbType.VarBinary, 0, global::System.Data.ParameterDirection.Input, 0, 0, "KeyFlags", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_KeyName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "KeyName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Description", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Description", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_KeyScanCode", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "KeyScanCode", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IRKey", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IRKey", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ValidMacroTarget", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ValidMacroTarget", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RemoteTypeID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RemoteTypeID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ValidMoverTarget", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ValidMoverTarget", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ValidLearningTarget", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ValidLearningTarget", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IsConfiguredKey", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsConfiguredKey", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IsSoftKey", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsSoftKey", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IsChannel", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsChannel", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IsDigit", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsDigit", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IsVolume", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsVolume", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IsTransport", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsTransport", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IsActivity", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsActivity", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IsSNS", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsSNS", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IsMode", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsMode", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_KeyFlags", global::System.Data.SqlDbType.VarBinary, 0, global::System.Data.ParameterDirection.Input, 0, 0, "KeyFlags", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DBToXML.Properties.Settings.Default.EzWebConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT KeyName, Description, KeyScanCode, IRKey, ValidMacroTarget, RemoteTypeID, " +
                "ValidMoverTarget, ValidLearningTarget, IsConfiguredKey, IsSoftKey, IsChannel, Is" +
                "Digit, IsVolume, IsTransport, IsActivity, IsSNS, IsMode, KeyFlags FROM dbo.Remot" +
                "eKeys";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(RemoteKeysDBToXMLDS.RemoteKeysDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual RemoteKeysDBToXMLDS.RemoteKeysDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            RemoteKeysDBToXMLDS.RemoteKeysDataTable dataTable = new RemoteKeysDBToXMLDS.RemoteKeysDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RemoteKeysDBToXMLDS.RemoteKeysDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RemoteKeysDBToXMLDS dataSet) {
            return this.Adapter.Update(dataSet, "RemoteKeys");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    string Original_KeyName, 
                    string Original_Description, 
                    int Original_KeyScanCode, 
                    short Original_IRKey, 
                    short Original_ValidMacroTarget, 
                    int Original_RemoteTypeID, 
                    short Original_ValidMoverTarget, 
                    short Original_ValidLearningTarget, 
                    short Original_IsConfiguredKey, 
                    short Original_IsSoftKey, 
                    short Original_IsChannel, 
                    short Original_IsDigit, 
                    short Original_IsVolume, 
                    short Original_IsTransport, 
                    short Original_IsActivity, 
                    short Original_IsSNS, 
                    short Original_IsMode, 
                    byte[] Original_KeyFlags) {
            if ((Original_KeyName == null)) {
                throw new global::System.ArgumentNullException("Original_KeyName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_KeyName));
            }
            if ((Original_Description == null)) {
                throw new global::System.ArgumentNullException("Original_Description");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_Description));
            }
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_KeyScanCode));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((short)(Original_IRKey));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((short)(Original_ValidMacroTarget));
            this.Adapter.DeleteCommand.Parameters[5].Value = ((int)(Original_RemoteTypeID));
            this.Adapter.DeleteCommand.Parameters[6].Value = ((short)(Original_ValidMoverTarget));
            this.Adapter.DeleteCommand.Parameters[7].Value = ((short)(Original_ValidLearningTarget));
            this.Adapter.DeleteCommand.Parameters[8].Value = ((short)(Original_IsConfiguredKey));
            this.Adapter.DeleteCommand.Parameters[9].Value = ((short)(Original_IsSoftKey));
            this.Adapter.DeleteCommand.Parameters[10].Value = ((short)(Original_IsChannel));
            this.Adapter.DeleteCommand.Parameters[11].Value = ((short)(Original_IsDigit));
            this.Adapter.DeleteCommand.Parameters[12].Value = ((short)(Original_IsVolume));
            this.Adapter.DeleteCommand.Parameters[13].Value = ((short)(Original_IsTransport));
            this.Adapter.DeleteCommand.Parameters[14].Value = ((short)(Original_IsActivity));
            this.Adapter.DeleteCommand.Parameters[15].Value = ((short)(Original_IsSNS));
            this.Adapter.DeleteCommand.Parameters[16].Value = ((short)(Original_IsMode));
            if ((Original_KeyFlags == null)) {
                throw new global::System.ArgumentNullException("Original_KeyFlags");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((byte[])(Original_KeyFlags));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    string KeyName, 
                    string Description, 
                    int KeyScanCode, 
                    short IRKey, 
                    short ValidMacroTarget, 
                    int RemoteTypeID, 
                    short ValidMoverTarget, 
                    short ValidLearningTarget, 
                    short IsConfiguredKey, 
                    short IsSoftKey, 
                    short IsChannel, 
                    short IsDigit, 
                    short IsVolume, 
                    short IsTransport, 
                    short IsActivity, 
                    short IsSNS, 
                    short IsMode, 
                    byte[] KeyFlags) {
            if ((KeyName == null)) {
                throw new global::System.ArgumentNullException("KeyName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(KeyName));
            }
            if ((Description == null)) {
                throw new global::System.ArgumentNullException("Description");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Description));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(KeyScanCode));
            this.Adapter.InsertCommand.Parameters[3].Value = ((short)(IRKey));
            this.Adapter.InsertCommand.Parameters[4].Value = ((short)(ValidMacroTarget));
            this.Adapter.InsertCommand.Parameters[5].Value = ((int)(RemoteTypeID));
            this.Adapter.InsertCommand.Parameters[6].Value = ((short)(ValidMoverTarget));
            this.Adapter.InsertCommand.Parameters[7].Value = ((short)(ValidLearningTarget));
            this.Adapter.InsertCommand.Parameters[8].Value = ((short)(IsConfiguredKey));
            this.Adapter.InsertCommand.Parameters[9].Value = ((short)(IsSoftKey));
            this.Adapter.InsertCommand.Parameters[10].Value = ((short)(IsChannel));
            this.Adapter.InsertCommand.Parameters[11].Value = ((short)(IsDigit));
            this.Adapter.InsertCommand.Parameters[12].Value = ((short)(IsVolume));
            this.Adapter.InsertCommand.Parameters[13].Value = ((short)(IsTransport));
            this.Adapter.InsertCommand.Parameters[14].Value = ((short)(IsActivity));
            this.Adapter.InsertCommand.Parameters[15].Value = ((short)(IsSNS));
            this.Adapter.InsertCommand.Parameters[16].Value = ((short)(IsMode));
            if ((KeyFlags == null)) {
                throw new global::System.ArgumentNullException("KeyFlags");
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = ((byte[])(KeyFlags));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string KeyName, 
                    string Description, 
                    int KeyScanCode, 
                    short IRKey, 
                    short ValidMacroTarget, 
                    int RemoteTypeID, 
                    short ValidMoverTarget, 
                    short ValidLearningTarget, 
                    short IsConfiguredKey, 
                    short IsSoftKey, 
                    short IsChannel, 
                    short IsDigit, 
                    short IsVolume, 
                    short IsTransport, 
                    short IsActivity, 
                    short IsSNS, 
                    short IsMode, 
                    byte[] KeyFlags, 
                    string Original_KeyName, 
                    string Original_Description, 
                    int Original_KeyScanCode, 
                    short Original_IRKey, 
                    short Original_ValidMacroTarget, 
                    int Original_RemoteTypeID, 
                    short Original_ValidMoverTarget, 
                    short Original_ValidLearningTarget, 
                    short Original_IsConfiguredKey, 
                    short Original_IsSoftKey, 
                    short Original_IsChannel, 
                    short Original_IsDigit, 
                    short Original_IsVolume, 
                    short Original_IsTransport, 
                    short Original_IsActivity, 
                    short Original_IsSNS, 
                    short Original_IsMode, 
                    byte[] Original_KeyFlags) {
            if ((KeyName == null)) {
                throw new global::System.ArgumentNullException("KeyName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(KeyName));
            }
            if ((Description == null)) {
                throw new global::System.ArgumentNullException("Description");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Description));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(KeyScanCode));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((short)(IRKey));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((short)(ValidMacroTarget));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(RemoteTypeID));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((short)(ValidMoverTarget));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((short)(ValidLearningTarget));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((short)(IsConfiguredKey));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((short)(IsSoftKey));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((short)(IsChannel));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((short)(IsDigit));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((short)(IsVolume));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((short)(IsTransport));
            this.Adapter.UpdateCommand.Parameters[14].Value = ((short)(IsActivity));
            this.Adapter.UpdateCommand.Parameters[15].Value = ((short)(IsSNS));
            this.Adapter.UpdateCommand.Parameters[16].Value = ((short)(IsMode));
            if ((KeyFlags == null)) {
                throw new global::System.ArgumentNullException("KeyFlags");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((byte[])(KeyFlags));
            }
            if ((Original_KeyName == null)) {
                throw new global::System.ArgumentNullException("Original_KeyName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(Original_KeyName));
            }
            if ((Original_Description == null)) {
                throw new global::System.ArgumentNullException("Original_Description");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Original_Description));
            }
            this.Adapter.UpdateCommand.Parameters[20].Value = ((int)(Original_KeyScanCode));
            this.Adapter.UpdateCommand.Parameters[21].Value = ((short)(Original_IRKey));
            this.Adapter.UpdateCommand.Parameters[22].Value = ((short)(Original_ValidMacroTarget));
            this.Adapter.UpdateCommand.Parameters[23].Value = ((int)(Original_RemoteTypeID));
            this.Adapter.UpdateCommand.Parameters[24].Value = ((short)(Original_ValidMoverTarget));
            this.Adapter.UpdateCommand.Parameters[25].Value = ((short)(Original_ValidLearningTarget));
            this.Adapter.UpdateCommand.Parameters[26].Value = ((short)(Original_IsConfiguredKey));
            this.Adapter.UpdateCommand.Parameters[27].Value = ((short)(Original_IsSoftKey));
            this.Adapter.UpdateCommand.Parameters[28].Value = ((short)(Original_IsChannel));
            this.Adapter.UpdateCommand.Parameters[29].Value = ((short)(Original_IsDigit));
            this.Adapter.UpdateCommand.Parameters[30].Value = ((short)(Original_IsVolume));
            this.Adapter.UpdateCommand.Parameters[31].Value = ((short)(Original_IsTransport));
            this.Adapter.UpdateCommand.Parameters[32].Value = ((short)(Original_IsActivity));
            this.Adapter.UpdateCommand.Parameters[33].Value = ((short)(Original_IsSNS));
            this.Adapter.UpdateCommand.Parameters[34].Value = ((short)(Original_IsMode));
            if ((Original_KeyFlags == null)) {
                throw new global::System.ArgumentNullException("Original_KeyFlags");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((byte[])(Original_KeyFlags));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
}

#pragma warning restore 1591