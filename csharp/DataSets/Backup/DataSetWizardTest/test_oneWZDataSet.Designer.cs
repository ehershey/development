//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace DataSetWizardTest {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("test_oneWZDataSet")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class test_oneWZDataSet : System.Data.DataSet {
        
        private ConfigurationsDataTable tableConfigurations;
        
        private deviceKeysDataTable tabledeviceKeys;
        
        private DevicesDataTable tableDevices;
        
        private LearnedKeysDataTable tableLearnedKeys;
        
        private UsersDataTable tableUsers;
        
        private System.Data.DataRelation relationFK_deviceKeys_Devices;
        
        private System.Data.DataRelation relationFK_deviceKeys_LearnedKeys;
        
        private System.Data.DataRelation relationFK_Devices_Configurations;
        
        private System.Data.DataRelation relationFK_LearnedKeys_Devices;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public test_oneWZDataSet() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected test_oneWZDataSet(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Configurations"] != null)) {
                    base.Tables.Add(new ConfigurationsDataTable(ds.Tables["Configurations"]));
                }
                if ((ds.Tables["deviceKeys"] != null)) {
                    base.Tables.Add(new deviceKeysDataTable(ds.Tables["deviceKeys"]));
                }
                if ((ds.Tables["Devices"] != null)) {
                    base.Tables.Add(new DevicesDataTable(ds.Tables["Devices"]));
                }
                if ((ds.Tables["LearnedKeys"] != null)) {
                    base.Tables.Add(new LearnedKeysDataTable(ds.Tables["LearnedKeys"]));
                }
                if ((ds.Tables["Users"] != null)) {
                    base.Tables.Add(new UsersDataTable(ds.Tables["Users"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ConfigurationsDataTable Configurations {
            get {
                return this.tableConfigurations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public deviceKeysDataTable deviceKeys {
            get {
                return this.tabledeviceKeys;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DevicesDataTable Devices {
            get {
                return this.tableDevices;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LearnedKeysDataTable LearnedKeys {
            get {
                return this.tableLearnedKeys;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UsersDataTable Users {
            get {
                return this.tableUsers;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            test_oneWZDataSet cln = ((test_oneWZDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Configurations"] != null)) {
                    base.Tables.Add(new ConfigurationsDataTable(ds.Tables["Configurations"]));
                }
                if ((ds.Tables["deviceKeys"] != null)) {
                    base.Tables.Add(new deviceKeysDataTable(ds.Tables["deviceKeys"]));
                }
                if ((ds.Tables["Devices"] != null)) {
                    base.Tables.Add(new DevicesDataTable(ds.Tables["Devices"]));
                }
                if ((ds.Tables["LearnedKeys"] != null)) {
                    base.Tables.Add(new LearnedKeysDataTable(ds.Tables["LearnedKeys"]));
                }
                if ((ds.Tables["Users"] != null)) {
                    base.Tables.Add(new UsersDataTable(ds.Tables["Users"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableConfigurations = ((ConfigurationsDataTable)(base.Tables["Configurations"]));
            if ((initTable == true)) {
                if ((this.tableConfigurations != null)) {
                    this.tableConfigurations.InitVars();
                }
            }
            this.tabledeviceKeys = ((deviceKeysDataTable)(base.Tables["deviceKeys"]));
            if ((initTable == true)) {
                if ((this.tabledeviceKeys != null)) {
                    this.tabledeviceKeys.InitVars();
                }
            }
            this.tableDevices = ((DevicesDataTable)(base.Tables["Devices"]));
            if ((initTable == true)) {
                if ((this.tableDevices != null)) {
                    this.tableDevices.InitVars();
                }
            }
            this.tableLearnedKeys = ((LearnedKeysDataTable)(base.Tables["LearnedKeys"]));
            if ((initTable == true)) {
                if ((this.tableLearnedKeys != null)) {
                    this.tableLearnedKeys.InitVars();
                }
            }
            this.tableUsers = ((UsersDataTable)(base.Tables["Users"]));
            if ((initTable == true)) {
                if ((this.tableUsers != null)) {
                    this.tableUsers.InitVars();
                }
            }
            this.relationFK_deviceKeys_Devices = this.Relations["FK_deviceKeys_Devices"];
            this.relationFK_deviceKeys_LearnedKeys = this.Relations["FK_deviceKeys_LearnedKeys"];
            this.relationFK_Devices_Configurations = this.Relations["FK_Devices_Configurations"];
            this.relationFK_LearnedKeys_Devices = this.Relations["FK_LearnedKeys_Devices"];
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "test_oneWZDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/test_oneWZDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableConfigurations = new ConfigurationsDataTable();
            base.Tables.Add(this.tableConfigurations);
            this.tabledeviceKeys = new deviceKeysDataTable();
            base.Tables.Add(this.tabledeviceKeys);
            this.tableDevices = new DevicesDataTable();
            base.Tables.Add(this.tableDevices);
            this.tableLearnedKeys = new LearnedKeysDataTable();
            base.Tables.Add(this.tableLearnedKeys);
            this.tableUsers = new UsersDataTable();
            base.Tables.Add(this.tableUsers);
            this.relationFK_deviceKeys_Devices = new System.Data.DataRelation("FK_deviceKeys_Devices", new System.Data.DataColumn[] {
                        this.tableDevices.UserIDColumn,
                        this.tableDevices.ConfigIDColumn,
                        this.tableDevices.DeviceIDColumn}, new System.Data.DataColumn[] {
                        this.tabledeviceKeys.UserIDColumn,
                        this.tabledeviceKeys.ConfigIDColumn,
                        this.tabledeviceKeys.DeviceIDColumn}, false);
            this.Relations.Add(this.relationFK_deviceKeys_Devices);
            this.relationFK_deviceKeys_LearnedKeys = new System.Data.DataRelation("FK_deviceKeys_LearnedKeys", new System.Data.DataColumn[] {
                        this.tableLearnedKeys.UserIDColumn,
                        this.tableLearnedKeys.ConfigIDColumn,
                        this.tableLearnedKeys.DeviceIDColumn,
                        this.tableLearnedKeys.LearnedIDColumn}, new System.Data.DataColumn[] {
                        this.tabledeviceKeys.UserIDColumn,
                        this.tabledeviceKeys.ConfigIDColumn,
                        this.tabledeviceKeys.DeviceIDColumn,
                        this.tabledeviceKeys.LearnedIDColumn}, false);
            this.Relations.Add(this.relationFK_deviceKeys_LearnedKeys);
            this.relationFK_Devices_Configurations = new System.Data.DataRelation("FK_Devices_Configurations", new System.Data.DataColumn[] {
                        this.tableConfigurations.UserIDColumn,
                        this.tableConfigurations.ConfigIDColumn}, new System.Data.DataColumn[] {
                        this.tableDevices.UserIDColumn,
                        this.tableDevices.ConfigIDColumn}, false);
            this.Relations.Add(this.relationFK_Devices_Configurations);
            this.relationFK_LearnedKeys_Devices = new System.Data.DataRelation("FK_LearnedKeys_Devices", new System.Data.DataColumn[] {
                        this.tableDevices.UserIDColumn,
                        this.tableDevices.ConfigIDColumn,
                        this.tableDevices.DeviceIDColumn}, new System.Data.DataColumn[] {
                        this.tableLearnedKeys.UserIDColumn,
                        this.tableLearnedKeys.ConfigIDColumn,
                        this.tableLearnedKeys.DeviceIDColumn}, false);
            this.Relations.Add(this.relationFK_LearnedKeys_Devices);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeConfigurations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedeviceKeys() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDevices() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLearnedKeys() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUsers() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            test_oneWZDataSet ds = new test_oneWZDataSet();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void ConfigurationsRowChangeEventHandler(object sender, ConfigurationsRowChangeEvent e);
        
        public delegate void deviceKeysRowChangeEventHandler(object sender, deviceKeysRowChangeEvent e);
        
        public delegate void DevicesRowChangeEventHandler(object sender, DevicesRowChangeEvent e);
        
        public delegate void LearnedKeysRowChangeEventHandler(object sender, LearnedKeysRowChangeEvent e);
        
        public delegate void UsersRowChangeEventHandler(object sender, UsersRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ConfigurationsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnUserID;
            
            private System.Data.DataColumn columnConfigID;
            
            private System.Data.DataColumn columnConfigurationName;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConfigurationsDataTable() {
                this.TableName = "Configurations";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ConfigurationsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ConfigurationsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ConfigIDColumn {
                get {
                    return this.columnConfigID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ConfigurationNameColumn {
                get {
                    return this.columnConfigurationName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConfigurationsRow this[int index] {
                get {
                    return ((ConfigurationsRow)(this.Rows[index]));
                }
            }
            
            public event ConfigurationsRowChangeEventHandler ConfigurationsRowChanging;
            
            public event ConfigurationsRowChangeEventHandler ConfigurationsRowChanged;
            
            public event ConfigurationsRowChangeEventHandler ConfigurationsRowDeleting;
            
            public event ConfigurationsRowChangeEventHandler ConfigurationsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddConfigurationsRow(ConfigurationsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConfigurationsRow AddConfigurationsRow(decimal UserID, decimal ConfigID, string ConfigurationName) {
                ConfigurationsRow rowConfigurationsRow = ((ConfigurationsRow)(this.NewRow()));
                rowConfigurationsRow.ItemArray = new object[] {
                        UserID,
                        ConfigID,
                        ConfigurationName};
                this.Rows.Add(rowConfigurationsRow);
                return rowConfigurationsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConfigurationsRow FindByUserIDConfigID(decimal UserID, decimal ConfigID) {
                return ((ConfigurationsRow)(this.Rows.Find(new object[] {
                            UserID,
                            ConfigID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ConfigurationsDataTable cln = ((ConfigurationsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ConfigurationsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUserID = base.Columns["UserID"];
                this.columnConfigID = base.Columns["ConfigID"];
                this.columnConfigurationName = base.Columns["ConfigurationName"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUserID = new System.Data.DataColumn("UserID", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserID);
                this.columnConfigID = new System.Data.DataColumn("ConfigID", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnConfigID);
                this.columnConfigurationName = new System.Data.DataColumn("ConfigurationName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnConfigurationName);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnUserID,
                                this.columnConfigID}, true));
                this.columnUserID.AllowDBNull = false;
                this.columnConfigID.AllowDBNull = false;
                this.columnConfigurationName.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConfigurationsRow NewConfigurationsRow() {
                return ((ConfigurationsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ConfigurationsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ConfigurationsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ConfigurationsRowChanged != null)) {
                    this.ConfigurationsRowChanged(this, new ConfigurationsRowChangeEvent(((ConfigurationsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ConfigurationsRowChanging != null)) {
                    this.ConfigurationsRowChanging(this, new ConfigurationsRowChangeEvent(((ConfigurationsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ConfigurationsRowDeleted != null)) {
                    this.ConfigurationsRowDeleted(this, new ConfigurationsRowChangeEvent(((ConfigurationsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ConfigurationsRowDeleting != null)) {
                    this.ConfigurationsRowDeleting(this, new ConfigurationsRowChangeEvent(((ConfigurationsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveConfigurationsRow(ConfigurationsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                test_oneWZDataSet ds = new test_oneWZDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ConfigurationsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class deviceKeysDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnUserID;
            
            private System.Data.DataColumn columnConfigID;
            
            private System.Data.DataColumn columnDeviceID;
            
            private System.Data.DataColumn columnKeyID;
            
            private System.Data.DataColumn columnKeyName;
            
            private System.Data.DataColumn columnLearnedID;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public deviceKeysDataTable() {
                this.TableName = "deviceKeys";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal deviceKeysDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected deviceKeysDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ConfigIDColumn {
                get {
                    return this.columnConfigID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DeviceIDColumn {
                get {
                    return this.columnDeviceID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn KeyIDColumn {
                get {
                    return this.columnKeyID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn KeyNameColumn {
                get {
                    return this.columnKeyName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LearnedIDColumn {
                get {
                    return this.columnLearnedID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public deviceKeysRow this[int index] {
                get {
                    return ((deviceKeysRow)(this.Rows[index]));
                }
            }
            
            public event deviceKeysRowChangeEventHandler deviceKeysRowChanging;
            
            public event deviceKeysRowChangeEventHandler deviceKeysRowChanged;
            
            public event deviceKeysRowChangeEventHandler deviceKeysRowDeleting;
            
            public event deviceKeysRowChangeEventHandler deviceKeysRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddeviceKeysRow(deviceKeysRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public deviceKeysRow AdddeviceKeysRow(decimal UserID, decimal ConfigID, decimal DeviceID, decimal KeyID, string KeyName, decimal LearnedID) {
                deviceKeysRow rowdeviceKeysRow = ((deviceKeysRow)(this.NewRow()));
                rowdeviceKeysRow.ItemArray = new object[] {
                        UserID,
                        ConfigID,
                        DeviceID,
                        KeyID,
                        KeyName,
                        LearnedID};
                this.Rows.Add(rowdeviceKeysRow);
                return rowdeviceKeysRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public deviceKeysRow FindByUserIDConfigIDDeviceIDKeyID(decimal UserID, decimal ConfigID, decimal DeviceID, decimal KeyID) {
                return ((deviceKeysRow)(this.Rows.Find(new object[] {
                            UserID,
                            ConfigID,
                            DeviceID,
                            KeyID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                deviceKeysDataTable cln = ((deviceKeysDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new deviceKeysDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUserID = base.Columns["UserID"];
                this.columnConfigID = base.Columns["ConfigID"];
                this.columnDeviceID = base.Columns["DeviceID"];
                this.columnKeyID = base.Columns["KeyID"];
                this.columnKeyName = base.Columns["KeyName"];
                this.columnLearnedID = base.Columns["LearnedID"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUserID = new System.Data.DataColumn("UserID", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserID);
                this.columnConfigID = new System.Data.DataColumn("ConfigID", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnConfigID);
                this.columnDeviceID = new System.Data.DataColumn("DeviceID", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeviceID);
                this.columnKeyID = new System.Data.DataColumn("KeyID", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnKeyID);
                this.columnKeyName = new System.Data.DataColumn("KeyName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnKeyName);
                this.columnLearnedID = new System.Data.DataColumn("LearnedID", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLearnedID);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnUserID,
                                this.columnConfigID,
                                this.columnDeviceID,
                                this.columnKeyID}, true));
                this.columnUserID.AllowDBNull = false;
                this.columnConfigID.AllowDBNull = false;
                this.columnDeviceID.AllowDBNull = false;
                this.columnKeyID.AllowDBNull = false;
                this.columnKeyName.AllowDBNull = false;
                this.columnKeyName.MaxLength = 60;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public deviceKeysRow NewdeviceKeysRow() {
                return ((deviceKeysRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new deviceKeysRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(deviceKeysRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.deviceKeysRowChanged != null)) {
                    this.deviceKeysRowChanged(this, new deviceKeysRowChangeEvent(((deviceKeysRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.deviceKeysRowChanging != null)) {
                    this.deviceKeysRowChanging(this, new deviceKeysRowChangeEvent(((deviceKeysRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.deviceKeysRowDeleted != null)) {
                    this.deviceKeysRowDeleted(this, new deviceKeysRowChangeEvent(((deviceKeysRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.deviceKeysRowDeleting != null)) {
                    this.deviceKeysRowDeleting(this, new deviceKeysRowChangeEvent(((deviceKeysRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedeviceKeysRow(deviceKeysRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                test_oneWZDataSet ds = new test_oneWZDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "deviceKeysDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DevicesDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnUserID;
            
            private System.Data.DataColumn columnConfigID;
            
            private System.Data.DataColumn columnDeviceID;
            
            private System.Data.DataColumn columnDeviceName;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DevicesDataTable() {
                this.TableName = "Devices";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DevicesDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DevicesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ConfigIDColumn {
                get {
                    return this.columnConfigID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DeviceIDColumn {
                get {
                    return this.columnDeviceID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DeviceNameColumn {
                get {
                    return this.columnDeviceName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DevicesRow this[int index] {
                get {
                    return ((DevicesRow)(this.Rows[index]));
                }
            }
            
            public event DevicesRowChangeEventHandler DevicesRowChanging;
            
            public event DevicesRowChangeEventHandler DevicesRowChanged;
            
            public event DevicesRowChangeEventHandler DevicesRowDeleting;
            
            public event DevicesRowChangeEventHandler DevicesRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDevicesRow(DevicesRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DevicesRow AddDevicesRow(decimal UserID, decimal ConfigID, decimal DeviceID, string DeviceName) {
                DevicesRow rowDevicesRow = ((DevicesRow)(this.NewRow()));
                rowDevicesRow.ItemArray = new object[] {
                        UserID,
                        ConfigID,
                        DeviceID,
                        DeviceName};
                this.Rows.Add(rowDevicesRow);
                return rowDevicesRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DevicesRow FindByUserIDConfigIDDeviceID(decimal UserID, decimal ConfigID, decimal DeviceID) {
                return ((DevicesRow)(this.Rows.Find(new object[] {
                            UserID,
                            ConfigID,
                            DeviceID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                DevicesDataTable cln = ((DevicesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new DevicesDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUserID = base.Columns["UserID"];
                this.columnConfigID = base.Columns["ConfigID"];
                this.columnDeviceID = base.Columns["DeviceID"];
                this.columnDeviceName = base.Columns["DeviceName"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUserID = new System.Data.DataColumn("UserID", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserID);
                this.columnConfigID = new System.Data.DataColumn("ConfigID", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnConfigID);
                this.columnDeviceID = new System.Data.DataColumn("DeviceID", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeviceID);
                this.columnDeviceName = new System.Data.DataColumn("DeviceName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeviceName);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnUserID,
                                this.columnConfigID,
                                this.columnDeviceID}, true));
                this.columnUserID.AllowDBNull = false;
                this.columnConfigID.AllowDBNull = false;
                this.columnDeviceID.AllowDBNull = false;
                this.columnDeviceName.AllowDBNull = false;
                this.columnDeviceName.MaxLength = 60;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DevicesRow NewDevicesRow() {
                return ((DevicesRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new DevicesRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(DevicesRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DevicesRowChanged != null)) {
                    this.DevicesRowChanged(this, new DevicesRowChangeEvent(((DevicesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DevicesRowChanging != null)) {
                    this.DevicesRowChanging(this, new DevicesRowChangeEvent(((DevicesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DevicesRowDeleted != null)) {
                    this.DevicesRowDeleted(this, new DevicesRowChangeEvent(((DevicesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DevicesRowDeleting != null)) {
                    this.DevicesRowDeleting(this, new DevicesRowChangeEvent(((DevicesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDevicesRow(DevicesRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                test_oneWZDataSet ds = new test_oneWZDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DevicesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LearnedKeysDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnUserID;
            
            private System.Data.DataColumn columnConfigID;
            
            private System.Data.DataColumn columnDeviceID;
            
            private System.Data.DataColumn columnLearnedID;
            
            private System.Data.DataColumn columnLearnedData;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LearnedKeysDataTable() {
                this.TableName = "LearnedKeys";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LearnedKeysDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LearnedKeysDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ConfigIDColumn {
                get {
                    return this.columnConfigID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DeviceIDColumn {
                get {
                    return this.columnDeviceID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LearnedIDColumn {
                get {
                    return this.columnLearnedID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LearnedDataColumn {
                get {
                    return this.columnLearnedData;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LearnedKeysRow this[int index] {
                get {
                    return ((LearnedKeysRow)(this.Rows[index]));
                }
            }
            
            public event LearnedKeysRowChangeEventHandler LearnedKeysRowChanging;
            
            public event LearnedKeysRowChangeEventHandler LearnedKeysRowChanged;
            
            public event LearnedKeysRowChangeEventHandler LearnedKeysRowDeleting;
            
            public event LearnedKeysRowChangeEventHandler LearnedKeysRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLearnedKeysRow(LearnedKeysRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LearnedKeysRow AddLearnedKeysRow(decimal UserID, decimal ConfigID, decimal DeviceID, decimal LearnedID, byte[] LearnedData) {
                LearnedKeysRow rowLearnedKeysRow = ((LearnedKeysRow)(this.NewRow()));
                rowLearnedKeysRow.ItemArray = new object[] {
                        UserID,
                        ConfigID,
                        DeviceID,
                        LearnedID,
                        LearnedData};
                this.Rows.Add(rowLearnedKeysRow);
                return rowLearnedKeysRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LearnedKeysRow FindByUserIDConfigIDDeviceIDLearnedID(decimal UserID, decimal ConfigID, decimal DeviceID, decimal LearnedID) {
                return ((LearnedKeysRow)(this.Rows.Find(new object[] {
                            UserID,
                            ConfigID,
                            DeviceID,
                            LearnedID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                LearnedKeysDataTable cln = ((LearnedKeysDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new LearnedKeysDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUserID = base.Columns["UserID"];
                this.columnConfigID = base.Columns["ConfigID"];
                this.columnDeviceID = base.Columns["DeviceID"];
                this.columnLearnedID = base.Columns["LearnedID"];
                this.columnLearnedData = base.Columns["LearnedData"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUserID = new System.Data.DataColumn("UserID", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserID);
                this.columnConfigID = new System.Data.DataColumn("ConfigID", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnConfigID);
                this.columnDeviceID = new System.Data.DataColumn("DeviceID", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeviceID);
                this.columnLearnedID = new System.Data.DataColumn("LearnedID", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLearnedID);
                this.columnLearnedData = new System.Data.DataColumn("LearnedData", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLearnedData);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnUserID,
                                this.columnConfigID,
                                this.columnDeviceID,
                                this.columnLearnedID}, true));
                this.columnUserID.AllowDBNull = false;
                this.columnConfigID.AllowDBNull = false;
                this.columnDeviceID.AllowDBNull = false;
                this.columnLearnedID.AllowDBNull = false;
                this.columnLearnedData.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LearnedKeysRow NewLearnedKeysRow() {
                return ((LearnedKeysRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new LearnedKeysRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(LearnedKeysRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LearnedKeysRowChanged != null)) {
                    this.LearnedKeysRowChanged(this, new LearnedKeysRowChangeEvent(((LearnedKeysRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LearnedKeysRowChanging != null)) {
                    this.LearnedKeysRowChanging(this, new LearnedKeysRowChangeEvent(((LearnedKeysRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LearnedKeysRowDeleted != null)) {
                    this.LearnedKeysRowDeleted(this, new LearnedKeysRowChangeEvent(((LearnedKeysRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LearnedKeysRowDeleting != null)) {
                    this.LearnedKeysRowDeleting(this, new LearnedKeysRowChangeEvent(((LearnedKeysRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLearnedKeysRow(LearnedKeysRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                test_oneWZDataSet ds = new test_oneWZDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LearnedKeysDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UsersDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnUserID;
            
            private System.Data.DataColumn columnUserName;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersDataTable() {
                this.TableName = "Users";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UsersDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UsersDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UserNameColumn {
                get {
                    return this.columnUserName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersRow this[int index] {
                get {
                    return ((UsersRow)(this.Rows[index]));
                }
            }
            
            public event UsersRowChangeEventHandler UsersRowChanging;
            
            public event UsersRowChangeEventHandler UsersRowChanged;
            
            public event UsersRowChangeEventHandler UsersRowDeleting;
            
            public event UsersRowChangeEventHandler UsersRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUsersRow(UsersRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersRow AddUsersRow(string UserName) {
                UsersRow rowUsersRow = ((UsersRow)(this.NewRow()));
                rowUsersRow.ItemArray = new object[] {
                        null,
                        UserName};
                this.Rows.Add(rowUsersRow);
                return rowUsersRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersRow FindByUserName(string UserName) {
                return ((UsersRow)(this.Rows.Find(new object[] {
                            UserName})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                UsersDataTable cln = ((UsersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new UsersDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUserID = base.Columns["UserID"];
                this.columnUserName = base.Columns["UserName"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUserID = new System.Data.DataColumn("UserID", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserID);
                this.columnUserName = new System.Data.DataColumn("UserName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserName);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnUserName}, true));
                this.columnUserID.AutoIncrement = true;
                this.columnUserID.AllowDBNull = false;
                this.columnUserID.ReadOnly = true;
                this.columnUserName.AllowDBNull = false;
                this.columnUserName.Unique = true;
                this.columnUserName.MaxLength = 60;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersRow NewUsersRow() {
                return ((UsersRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new UsersRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(UsersRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UsersRowChanged != null)) {
                    this.UsersRowChanged(this, new UsersRowChangeEvent(((UsersRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UsersRowChanging != null)) {
                    this.UsersRowChanging(this, new UsersRowChangeEvent(((UsersRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UsersRowDeleted != null)) {
                    this.UsersRowDeleted(this, new UsersRowChangeEvent(((UsersRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UsersRowDeleting != null)) {
                    this.UsersRowDeleting(this, new UsersRowChangeEvent(((UsersRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUsersRow(UsersRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                test_oneWZDataSet ds = new test_oneWZDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UsersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ConfigurationsRow : System.Data.DataRow {
            
            private ConfigurationsDataTable tableConfigurations;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ConfigurationsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableConfigurations = ((ConfigurationsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal UserID {
                get {
                    return ((decimal)(this[this.tableConfigurations.UserIDColumn]));
                }
                set {
                    this[this.tableConfigurations.UserIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ConfigID {
                get {
                    return ((decimal)(this[this.tableConfigurations.ConfigIDColumn]));
                }
                set {
                    this[this.tableConfigurations.ConfigIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ConfigurationName {
                get {
                    try {
                        return ((string)(this[this.tableConfigurations.ConfigurationNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ConfigurationName\' in table \'Configurations\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConfigurations.ConfigurationNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConfigurationNameNull() {
                return this.IsNull(this.tableConfigurations.ConfigurationNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConfigurationNameNull() {
                this[this.tableConfigurations.ConfigurationNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DevicesRow[] GetDevicesRows() {
                return ((DevicesRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Devices_Configurations"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class deviceKeysRow : System.Data.DataRow {
            
            private deviceKeysDataTable tabledeviceKeys;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal deviceKeysRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledeviceKeys = ((deviceKeysDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal UserID {
                get {
                    return ((decimal)(this[this.tabledeviceKeys.UserIDColumn]));
                }
                set {
                    this[this.tabledeviceKeys.UserIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ConfigID {
                get {
                    return ((decimal)(this[this.tabledeviceKeys.ConfigIDColumn]));
                }
                set {
                    this[this.tabledeviceKeys.ConfigIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DeviceID {
                get {
                    return ((decimal)(this[this.tabledeviceKeys.DeviceIDColumn]));
                }
                set {
                    this[this.tabledeviceKeys.DeviceIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal KeyID {
                get {
                    return ((decimal)(this[this.tabledeviceKeys.KeyIDColumn]));
                }
                set {
                    this[this.tabledeviceKeys.KeyIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string KeyName {
                get {
                    return ((string)(this[this.tabledeviceKeys.KeyNameColumn]));
                }
                set {
                    this[this.tabledeviceKeys.KeyNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LearnedID {
                get {
                    try {
                        return ((decimal)(this[this.tabledeviceKeys.LearnedIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'LearnedID\' in table \'deviceKeys\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledeviceKeys.LearnedIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DevicesRow DevicesRowParent {
                get {
                    return ((DevicesRow)(this.GetParentRow(this.Table.ParentRelations["FK_deviceKeys_Devices"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_deviceKeys_Devices"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LearnedKeysRow LearnedKeysRowParent {
                get {
                    return ((LearnedKeysRow)(this.GetParentRow(this.Table.ParentRelations["FK_deviceKeys_LearnedKeys"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_deviceKeys_LearnedKeys"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLearnedIDNull() {
                return this.IsNull(this.tabledeviceKeys.LearnedIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLearnedIDNull() {
                this[this.tabledeviceKeys.LearnedIDColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DevicesRow : System.Data.DataRow {
            
            private DevicesDataTable tableDevices;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DevicesRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDevices = ((DevicesDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal UserID {
                get {
                    return ((decimal)(this[this.tableDevices.UserIDColumn]));
                }
                set {
                    this[this.tableDevices.UserIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ConfigID {
                get {
                    return ((decimal)(this[this.tableDevices.ConfigIDColumn]));
                }
                set {
                    this[this.tableDevices.ConfigIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DeviceID {
                get {
                    return ((decimal)(this[this.tableDevices.DeviceIDColumn]));
                }
                set {
                    this[this.tableDevices.DeviceIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DeviceName {
                get {
                    return ((string)(this[this.tableDevices.DeviceNameColumn]));
                }
                set {
                    this[this.tableDevices.DeviceNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConfigurationsRow ConfigurationsRowParent {
                get {
                    return ((ConfigurationsRow)(this.GetParentRow(this.Table.ParentRelations["FK_Devices_Configurations"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Devices_Configurations"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public deviceKeysRow[] GetdeviceKeysRows() {
                return ((deviceKeysRow[])(base.GetChildRows(this.Table.ChildRelations["FK_deviceKeys_Devices"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LearnedKeysRow[] GetLearnedKeysRows() {
                return ((LearnedKeysRow[])(base.GetChildRows(this.Table.ChildRelations["FK_LearnedKeys_Devices"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LearnedKeysRow : System.Data.DataRow {
            
            private LearnedKeysDataTable tableLearnedKeys;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LearnedKeysRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLearnedKeys = ((LearnedKeysDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal UserID {
                get {
                    return ((decimal)(this[this.tableLearnedKeys.UserIDColumn]));
                }
                set {
                    this[this.tableLearnedKeys.UserIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ConfigID {
                get {
                    return ((decimal)(this[this.tableLearnedKeys.ConfigIDColumn]));
                }
                set {
                    this[this.tableLearnedKeys.ConfigIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DeviceID {
                get {
                    return ((decimal)(this[this.tableLearnedKeys.DeviceIDColumn]));
                }
                set {
                    this[this.tableLearnedKeys.DeviceIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LearnedID {
                get {
                    return ((decimal)(this[this.tableLearnedKeys.LearnedIDColumn]));
                }
                set {
                    this[this.tableLearnedKeys.LearnedIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] LearnedData {
                get {
                    return ((byte[])(this[this.tableLearnedKeys.LearnedDataColumn]));
                }
                set {
                    this[this.tableLearnedKeys.LearnedDataColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DevicesRow DevicesRowParent {
                get {
                    return ((DevicesRow)(this.GetParentRow(this.Table.ParentRelations["FK_LearnedKeys_Devices"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_LearnedKeys_Devices"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public deviceKeysRow[] GetdeviceKeysRows() {
                return ((deviceKeysRow[])(base.GetChildRows(this.Table.ChildRelations["FK_deviceKeys_LearnedKeys"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UsersRow : System.Data.DataRow {
            
            private UsersDataTable tableUsers;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UsersRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUsers = ((UsersDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal UserID {
                get {
                    return ((decimal)(this[this.tableUsers.UserIDColumn]));
                }
                set {
                    this[this.tableUsers.UserIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UserName {
                get {
                    return ((string)(this[this.tableUsers.UserNameColumn]));
                }
                set {
                    this[this.tableUsers.UserNameColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ConfigurationsRowChangeEvent : System.EventArgs {
            
            private ConfigurationsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConfigurationsRowChangeEvent(ConfigurationsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConfigurationsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class deviceKeysRowChangeEvent : System.EventArgs {
            
            private deviceKeysRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public deviceKeysRowChangeEvent(deviceKeysRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public deviceKeysRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DevicesRowChangeEvent : System.EventArgs {
            
            private DevicesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DevicesRowChangeEvent(DevicesRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DevicesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LearnedKeysRowChangeEvent : System.EventArgs {
            
            private LearnedKeysRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LearnedKeysRowChangeEvent(LearnedKeysRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LearnedKeysRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UsersRowChangeEvent : System.EventArgs {
            
            private UsersRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersRowChangeEvent(UsersRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace DataSetWizardTest.test_oneWZDataSetTableAdapters {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ConfigurationsTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ConfigurationsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Configurations";
            tableMapping.ColumnMappings.Add("UserID", "UserID");
            tableMapping.ColumnMappings.Add("ConfigID", "ConfigID");
            tableMapping.ColumnMappings.Add("ConfigurationName", "ConfigurationName");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Configurations] WHERE (([UserID] = @Original_UserID) AND ([Con" +
                "figID] = @Original_ConfigID) AND ((@IsNull_ConfigurationName = 1 AND [Configurat" +
                "ionName] IS NULL) OR ([ConfigurationName] = @Original_ConfigurationName)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UserID", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "UserID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ConfigID", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 6, 0, "ConfigID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_ConfigurationName", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ConfigurationName", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ConfigurationName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ConfigurationName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Configurations] ([UserID], [ConfigID], [ConfigurationName]) VA" +
                "LUES (@UserID, @ConfigID, @ConfigurationName);\r\nSELECT UserID, ConfigID, Configu" +
                "rationName FROM Configurations WHERE (ConfigID = @ConfigID) AND (UserID = @UserI" +
                "D)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserID", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "UserID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ConfigID", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 6, 0, "ConfigID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ConfigurationName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ConfigurationName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Configurations] SET [UserID] = @UserID, [ConfigID] = @ConfigID, [ConfigurationName] = @ConfigurationName WHERE (([UserID] = @Original_UserID) AND ([ConfigID] = @Original_ConfigID) AND ((@IsNull_ConfigurationName = 1 AND [ConfigurationName] IS NULL) OR ([ConfigurationName] = @Original_ConfigurationName)));
SELECT UserID, ConfigID, ConfigurationName FROM Configurations WHERE (ConfigID = @ConfigID) AND (UserID = @UserID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserID", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "UserID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ConfigID", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 6, 0, "ConfigID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ConfigurationName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ConfigurationName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UserID", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "UserID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ConfigID", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 6, 0, "ConfigID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_ConfigurationName", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ConfigurationName", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ConfigurationName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ConfigurationName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DataSetWizardTest.Properties.Settings.Default.test_oneConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT UserID, ConfigID, ConfigurationName FROM dbo.Configurations";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(test_oneWZDataSet.ConfigurationsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual test_oneWZDataSet.ConfigurationsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            test_oneWZDataSet.ConfigurationsDataTable dataTable = new test_oneWZDataSet.ConfigurationsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(test_oneWZDataSet.ConfigurationsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(test_oneWZDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Configurations");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(decimal Original_UserID, decimal Original_ConfigID, string Original_ConfigurationName) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((decimal)(Original_UserID));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((decimal)(Original_ConfigID));
            if ((Original_ConfigurationName == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_ConfigurationName));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(decimal UserID, decimal ConfigID, string ConfigurationName) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((decimal)(UserID));
            this.Adapter.InsertCommand.Parameters[1].Value = ((decimal)(ConfigID));
            if ((ConfigurationName == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(ConfigurationName));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(decimal UserID, decimal ConfigID, string ConfigurationName, decimal Original_UserID, decimal Original_ConfigID, string Original_ConfigurationName) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((decimal)(UserID));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((decimal)(ConfigID));
            if ((ConfigurationName == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(ConfigurationName));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((decimal)(Original_UserID));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((decimal)(Original_ConfigID));
            if ((Original_ConfigurationName == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_ConfigurationName));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class deviceKeysTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public deviceKeysTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "deviceKeys";
            tableMapping.ColumnMappings.Add("UserID", "UserID");
            tableMapping.ColumnMappings.Add("ConfigID", "ConfigID");
            tableMapping.ColumnMappings.Add("DeviceID", "DeviceID");
            tableMapping.ColumnMappings.Add("KeyID", "KeyID");
            tableMapping.ColumnMappings.Add("KeyName", "KeyName");
            tableMapping.ColumnMappings.Add("LearnedID", "LearnedID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[deviceKeys] WHERE (([UserID] = @Original_UserID) AND ([ConfigID] = @Original_ConfigID) AND ([DeviceID] = @Original_DeviceID) AND ([KeyID] = @Original_KeyID) AND ([KeyName] = @Original_KeyName) AND ((@IsNull_LearnedID = 1 AND [LearnedID] IS NULL) OR ([LearnedID] = @Original_LearnedID)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UserID", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "UserID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ConfigID", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 6, 0, "ConfigID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DeviceID", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 6, 0, "DeviceID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_KeyID", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 6, 0, "KeyID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_KeyName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "KeyName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_LearnedID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LearnedID", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LearnedID", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 6, 0, "LearnedID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[deviceKeys] ([UserID], [ConfigID], [DeviceID], [KeyID], [KeyName], [LearnedID]) VALUES (@UserID, @ConfigID, @DeviceID, @KeyID, @KeyName, @LearnedID);
SELECT UserID, ConfigID, DeviceID, KeyID, KeyName, LearnedID FROM deviceKeys WHERE (ConfigID = @ConfigID) AND (DeviceID = @DeviceID) AND (KeyID = @KeyID) AND (UserID = @UserID)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserID", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "UserID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ConfigID", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 6, 0, "ConfigID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DeviceID", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 6, 0, "DeviceID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@KeyID", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 6, 0, "KeyID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@KeyName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "KeyName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LearnedID", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 6, 0, "LearnedID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[deviceKeys] SET [UserID] = @UserID, [ConfigID] = @ConfigID, [DeviceID] = @DeviceID, [KeyID] = @KeyID, [KeyName] = @KeyName, [LearnedID] = @LearnedID WHERE (([UserID] = @Original_UserID) AND ([ConfigID] = @Original_ConfigID) AND ([DeviceID] = @Original_DeviceID) AND ([KeyID] = @Original_KeyID) AND ([KeyName] = @Original_KeyName) AND ((@IsNull_LearnedID = 1 AND [LearnedID] IS NULL) OR ([LearnedID] = @Original_LearnedID)));
SELECT UserID, ConfigID, DeviceID, KeyID, KeyName, LearnedID FROM deviceKeys WHERE (ConfigID = @ConfigID) AND (DeviceID = @DeviceID) AND (KeyID = @KeyID) AND (UserID = @UserID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserID", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "UserID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ConfigID", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 6, 0, "ConfigID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DeviceID", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 6, 0, "DeviceID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@KeyID", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 6, 0, "KeyID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@KeyName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "KeyName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LearnedID", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 6, 0, "LearnedID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UserID", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "UserID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ConfigID", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 6, 0, "ConfigID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DeviceID", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 6, 0, "DeviceID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_KeyID", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 6, 0, "KeyID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_KeyName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "KeyName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_LearnedID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LearnedID", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LearnedID", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 6, 0, "LearnedID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DataSetWizardTest.Properties.Settings.Default.test_oneConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT UserID, ConfigID, DeviceID, KeyID, KeyName, LearnedID FROM dbo.deviceKeys";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(test_oneWZDataSet.deviceKeysDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual test_oneWZDataSet.deviceKeysDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            test_oneWZDataSet.deviceKeysDataTable dataTable = new test_oneWZDataSet.deviceKeysDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(test_oneWZDataSet.deviceKeysDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(test_oneWZDataSet dataSet) {
            return this.Adapter.Update(dataSet, "deviceKeys");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(decimal Original_UserID, decimal Original_ConfigID, decimal Original_DeviceID, decimal Original_KeyID, string Original_KeyName, System.Nullable<decimal> Original_LearnedID) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((decimal)(Original_UserID));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((decimal)(Original_ConfigID));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((decimal)(Original_DeviceID));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((decimal)(Original_KeyID));
            if ((Original_KeyName == null)) {
                throw new System.ArgumentNullException("Original_KeyName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_KeyName));
            }
            if ((Original_LearnedID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((decimal)(Original_LearnedID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(decimal UserID, decimal ConfigID, decimal DeviceID, decimal KeyID, string KeyName, System.Nullable<decimal> LearnedID) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((decimal)(UserID));
            this.Adapter.InsertCommand.Parameters[1].Value = ((decimal)(ConfigID));
            this.Adapter.InsertCommand.Parameters[2].Value = ((decimal)(DeviceID));
            this.Adapter.InsertCommand.Parameters[3].Value = ((decimal)(KeyID));
            if ((KeyName == null)) {
                throw new System.ArgumentNullException("KeyName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(KeyName));
            }
            if ((LearnedID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((decimal)(LearnedID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(decimal UserID, decimal ConfigID, decimal DeviceID, decimal KeyID, string KeyName, System.Nullable<decimal> LearnedID, decimal Original_UserID, decimal Original_ConfigID, decimal Original_DeviceID, decimal Original_KeyID, string Original_KeyName, System.Nullable<decimal> Original_LearnedID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((decimal)(UserID));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((decimal)(ConfigID));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((decimal)(DeviceID));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((decimal)(KeyID));
            if ((KeyName == null)) {
                throw new System.ArgumentNullException("KeyName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(KeyName));
            }
            if ((LearnedID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((decimal)(LearnedID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((decimal)(Original_UserID));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((decimal)(Original_ConfigID));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((decimal)(Original_DeviceID));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((decimal)(Original_KeyID));
            if ((Original_KeyName == null)) {
                throw new System.ArgumentNullException("Original_KeyName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_KeyName));
            }
            if ((Original_LearnedID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[12].Value = ((decimal)(Original_LearnedID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[12].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class DevicesTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DevicesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Devices";
            tableMapping.ColumnMappings.Add("UserID", "UserID");
            tableMapping.ColumnMappings.Add("ConfigID", "ConfigID");
            tableMapping.ColumnMappings.Add("DeviceID", "DeviceID");
            tableMapping.ColumnMappings.Add("DeviceName", "DeviceName");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Devices] WHERE (([UserID] = @Original_UserID) AND ([ConfigID] " +
                "= @Original_ConfigID) AND ([DeviceID] = @Original_DeviceID) AND ([DeviceName] = " +
                "@Original_DeviceName))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UserID", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "UserID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ConfigID", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 6, 0, "ConfigID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DeviceID", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 6, 0, "DeviceID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DeviceName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DeviceName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Devices] ([UserID], [ConfigID], [DeviceID], [DeviceName]) VALUES (@UserID, @ConfigID, @DeviceID, @DeviceName);
SELECT UserID, ConfigID, DeviceID, DeviceName FROM Devices WHERE (ConfigID = @ConfigID) AND (DeviceID = @DeviceID) AND (UserID = @UserID)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserID", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "UserID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ConfigID", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 6, 0, "ConfigID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DeviceID", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 6, 0, "DeviceID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DeviceName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DeviceName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Devices] SET [UserID] = @UserID, [ConfigID] = @ConfigID, [DeviceID] = @DeviceID, [DeviceName] = @DeviceName WHERE (([UserID] = @Original_UserID) AND ([ConfigID] = @Original_ConfigID) AND ([DeviceID] = @Original_DeviceID) AND ([DeviceName] = @Original_DeviceName));
SELECT UserID, ConfigID, DeviceID, DeviceName FROM Devices WHERE (ConfigID = @ConfigID) AND (DeviceID = @DeviceID) AND (UserID = @UserID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserID", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "UserID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ConfigID", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 6, 0, "ConfigID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DeviceID", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 6, 0, "DeviceID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DeviceName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DeviceName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UserID", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "UserID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ConfigID", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 6, 0, "ConfigID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DeviceID", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 6, 0, "DeviceID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DeviceName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DeviceName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DataSetWizardTest.Properties.Settings.Default.test_oneConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT UserID, ConfigID, DeviceID, DeviceName FROM dbo.Devices";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(test_oneWZDataSet.DevicesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual test_oneWZDataSet.DevicesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            test_oneWZDataSet.DevicesDataTable dataTable = new test_oneWZDataSet.DevicesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(test_oneWZDataSet.DevicesDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(test_oneWZDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Devices");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(decimal Original_UserID, decimal Original_ConfigID, decimal Original_DeviceID, string Original_DeviceName) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((decimal)(Original_UserID));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((decimal)(Original_ConfigID));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((decimal)(Original_DeviceID));
            if ((Original_DeviceName == null)) {
                throw new System.ArgumentNullException("Original_DeviceName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_DeviceName));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(decimal UserID, decimal ConfigID, decimal DeviceID, string DeviceName) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((decimal)(UserID));
            this.Adapter.InsertCommand.Parameters[1].Value = ((decimal)(ConfigID));
            this.Adapter.InsertCommand.Parameters[2].Value = ((decimal)(DeviceID));
            if ((DeviceName == null)) {
                throw new System.ArgumentNullException("DeviceName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(DeviceName));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(decimal UserID, decimal ConfigID, decimal DeviceID, string DeviceName, decimal Original_UserID, decimal Original_ConfigID, decimal Original_DeviceID, string Original_DeviceName) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((decimal)(UserID));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((decimal)(ConfigID));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((decimal)(DeviceID));
            if ((DeviceName == null)) {
                throw new System.ArgumentNullException("DeviceName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(DeviceName));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((decimal)(Original_UserID));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((decimal)(Original_ConfigID));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((decimal)(Original_DeviceID));
            if ((Original_DeviceName == null)) {
                throw new System.ArgumentNullException("Original_DeviceName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_DeviceName));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class LearnedKeysTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LearnedKeysTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "LearnedKeys";
            tableMapping.ColumnMappings.Add("UserID", "UserID");
            tableMapping.ColumnMappings.Add("ConfigID", "ConfigID");
            tableMapping.ColumnMappings.Add("DeviceID", "DeviceID");
            tableMapping.ColumnMappings.Add("LearnedID", "LearnedID");
            tableMapping.ColumnMappings.Add("LearnedData", "LearnedData");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[LearnedKeys] WHERE (([UserID] = @Original_UserID) AND ([Config" +
                "ID] = @Original_ConfigID) AND ([DeviceID] = @Original_DeviceID) AND ([LearnedID]" +
                " = @Original_LearnedID) AND ([LearnedData] = @Original_LearnedData))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UserID", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "UserID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ConfigID", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 6, 0, "ConfigID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DeviceID", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 6, 0, "DeviceID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LearnedID", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 6, 0, "LearnedID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LearnedData", System.Data.SqlDbType.VarBinary, 0, System.Data.ParameterDirection.Input, 0, 0, "LearnedData", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[LearnedKeys] ([UserID], [ConfigID], [DeviceID], [LearnedID], [LearnedData]) VALUES (@UserID, @ConfigID, @DeviceID, @LearnedID, @LearnedData);
SELECT UserID, ConfigID, DeviceID, LearnedID, LearnedData FROM LearnedKeys WHERE (ConfigID = @ConfigID) AND (DeviceID = @DeviceID) AND (LearnedID = @LearnedID) AND (UserID = @UserID)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserID", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "UserID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ConfigID", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 6, 0, "ConfigID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DeviceID", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 6, 0, "DeviceID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LearnedID", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 6, 0, "LearnedID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LearnedData", System.Data.SqlDbType.VarBinary, 0, System.Data.ParameterDirection.Input, 0, 0, "LearnedData", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[LearnedKeys] SET [UserID] = @UserID, [ConfigID] = @ConfigID, [DeviceID] = @DeviceID, [LearnedID] = @LearnedID, [LearnedData] = @LearnedData WHERE (([UserID] = @Original_UserID) AND ([ConfigID] = @Original_ConfigID) AND ([DeviceID] = @Original_DeviceID) AND ([LearnedID] = @Original_LearnedID) AND ([LearnedData] = @Original_LearnedData));
SELECT UserID, ConfigID, DeviceID, LearnedID, LearnedData FROM LearnedKeys WHERE (ConfigID = @ConfigID) AND (DeviceID = @DeviceID) AND (LearnedID = @LearnedID) AND (UserID = @UserID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserID", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "UserID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ConfigID", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 6, 0, "ConfigID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DeviceID", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 6, 0, "DeviceID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LearnedID", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 6, 0, "LearnedID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LearnedData", System.Data.SqlDbType.VarBinary, 0, System.Data.ParameterDirection.Input, 0, 0, "LearnedData", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UserID", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "UserID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ConfigID", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 6, 0, "ConfigID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DeviceID", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 6, 0, "DeviceID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LearnedID", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 6, 0, "LearnedID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LearnedData", System.Data.SqlDbType.VarBinary, 0, System.Data.ParameterDirection.Input, 0, 0, "LearnedData", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DataSetWizardTest.Properties.Settings.Default.test_oneConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT UserID, ConfigID, DeviceID, LearnedID, LearnedData FROM dbo.LearnedKeys";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(test_oneWZDataSet.LearnedKeysDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual test_oneWZDataSet.LearnedKeysDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            test_oneWZDataSet.LearnedKeysDataTable dataTable = new test_oneWZDataSet.LearnedKeysDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(test_oneWZDataSet.LearnedKeysDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(test_oneWZDataSet dataSet) {
            return this.Adapter.Update(dataSet, "LearnedKeys");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(decimal Original_UserID, decimal Original_ConfigID, decimal Original_DeviceID, decimal Original_LearnedID, byte[] Original_LearnedData) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((decimal)(Original_UserID));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((decimal)(Original_ConfigID));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((decimal)(Original_DeviceID));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((decimal)(Original_LearnedID));
            if ((Original_LearnedData == null)) {
                throw new System.ArgumentNullException("Original_LearnedData");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((byte[])(Original_LearnedData));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(decimal UserID, decimal ConfigID, decimal DeviceID, decimal LearnedID, byte[] LearnedData) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((decimal)(UserID));
            this.Adapter.InsertCommand.Parameters[1].Value = ((decimal)(ConfigID));
            this.Adapter.InsertCommand.Parameters[2].Value = ((decimal)(DeviceID));
            this.Adapter.InsertCommand.Parameters[3].Value = ((decimal)(LearnedID));
            if ((LearnedData == null)) {
                throw new System.ArgumentNullException("LearnedData");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((byte[])(LearnedData));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(decimal UserID, decimal ConfigID, decimal DeviceID, decimal LearnedID, byte[] LearnedData, decimal Original_UserID, decimal Original_ConfigID, decimal Original_DeviceID, decimal Original_LearnedID, byte[] Original_LearnedData) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((decimal)(UserID));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((decimal)(ConfigID));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((decimal)(DeviceID));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((decimal)(LearnedID));
            if ((LearnedData == null)) {
                throw new System.ArgumentNullException("LearnedData");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((byte[])(LearnedData));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((decimal)(Original_UserID));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((decimal)(Original_ConfigID));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((decimal)(Original_DeviceID));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((decimal)(Original_LearnedID));
            if ((Original_LearnedData == null)) {
                throw new System.ArgumentNullException("Original_LearnedData");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((byte[])(Original_LearnedData));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class UsersTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UsersTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Users";
            tableMapping.ColumnMappings.Add("UserID", "UserID");
            tableMapping.ColumnMappings.Add("UserName", "UserName");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Users] WHERE (([UserID] = @Original_UserID) AND ([UserName] = " +
                "@Original_UserName))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UserID", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "UserID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UserName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "UserName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Users] ([UserName]) VALUES (@UserName);\r\nSELECT UserID, UserNa" +
                "me FROM Users WHERE (UserName = @UserName)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "UserName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Users] SET [UserName] = @UserName WHERE (([UserID] = @Original_User" +
                "ID) AND ([UserName] = @Original_UserName));\r\nSELECT UserID, UserName FROM Users " +
                "WHERE (UserName = @UserName)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "UserName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UserID", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "UserID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UserName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "UserName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DataSetWizardTest.Properties.Settings.Default.test_oneConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT UserID, UserName FROM dbo.Users";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(test_oneWZDataSet.UsersDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual test_oneWZDataSet.UsersDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            test_oneWZDataSet.UsersDataTable dataTable = new test_oneWZDataSet.UsersDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(test_oneWZDataSet.UsersDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(test_oneWZDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Users");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(decimal Original_UserID, string Original_UserName) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((decimal)(Original_UserID));
            if ((Original_UserName == null)) {
                throw new System.ArgumentNullException("Original_UserName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_UserName));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string UserName) {
            if ((UserName == null)) {
                throw new System.ArgumentNullException("UserName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(UserName));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string UserName, decimal Original_UserID, string Original_UserName) {
            if ((UserName == null)) {
                throw new System.ArgumentNullException("UserName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(UserName));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((decimal)(Original_UserID));
            if ((Original_UserName == null)) {
                throw new System.ArgumentNullException("Original_UserName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_UserName));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
}

#pragma warning restore 1591