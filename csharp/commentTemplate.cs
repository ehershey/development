
// ////////////////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////////////////

// basic template:
// /////////////////////////////////////////////
// /////////////////////////////////////////////
/// <summary>
///
/// </summary>
/// <returns> 
/// 
/// </returns>

// parameters
///<param name="args">
/// 
/// </param>

// inline see also...
/// <seealso cref=""/>

// inline parameter reference
///<paramref name=""/>


// ////////////////////////////////////////////////////////////////////////////////////////
// parameter comments:
// ////////////////////////////////////////////////////////////////////////////////////////
 
 
 

// works to show a type such as someclass<T>
///<typeparam name="T"></typeparam>

// how to refer to a parameter in the summary or remarks text:
///<paramref name="args" />  
// a la:
///<summary> In this call, the <paramref name="args" /> parameter plays this role... </summary>



// ////////////////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////////////////
// compile with: /doc:DocFileName.xml 

// the following cref shows how to specify the reference, such that,
// the compiler will resolve the reference
/// <summary cref="C{T}">
/// </summary>
class A { }

// the following cref shows another way to specify the reference, 
// such that, the compiler will resolve the reference
// <summary cref="C &lt; T &gt;">

// the following cref shows how to hard-code the reference
/// <summary cref="T:C`1">
/// </summary>
class B { }

/// <summary cref="A">
/// class C<T>
/// </summary>
/// <typeparam name="T"> the type parameter is called 'T' </typeparam>
class C<T> { }



