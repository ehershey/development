//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1378
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace EditStealthSRIXML {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("StealthUSB_SRI")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class StealthUSB_SRI : global::System.Data.DataSet {
        
        private ValidKeyNamesDataTable tableValidKeyNames;
        
        private KeyMapDataTable tableKeyMap;
        
        private ModeGroupingDataTable tableModeGrouping;
        
        private GeneralInformationDataTable tableGeneralInformation;
        
        private DeviceGroupingDataTable tableDeviceGrouping;
        
        private FeatureSettings_NumericDataTable tableFeatureSettings_Numeric;
        
        private RecordTypesSupportedDataTable tableRecordTypesSupported;
        
        private StealthPickMapDataTable tableStealthPickMap;
        
        private global::System.Data.DataRelation relationValidKeyNames_KeyMap;
        
        private global::System.Data.DataRelation relationValidKeyNames_ModeGrouping;
        
        private global::System.Data.DataRelation relationValidKeyNames_StealthPickMap;
        
        private global::System.Data.DataRelation relationDeviceGrouping_StealthPickMap;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public StealthUSB_SRI() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected StealthUSB_SRI(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["ValidKeyNames"] != null)) {
                    base.Tables.Add(new ValidKeyNamesDataTable(ds.Tables["ValidKeyNames"]));
                }
                if ((ds.Tables["KeyMap"] != null)) {
                    base.Tables.Add(new KeyMapDataTable(ds.Tables["KeyMap"]));
                }
                if ((ds.Tables["ModeGrouping"] != null)) {
                    base.Tables.Add(new ModeGroupingDataTable(ds.Tables["ModeGrouping"]));
                }
                if ((ds.Tables["GeneralInformation"] != null)) {
                    base.Tables.Add(new GeneralInformationDataTable(ds.Tables["GeneralInformation"]));
                }
                if ((ds.Tables["DeviceGrouping"] != null)) {
                    base.Tables.Add(new DeviceGroupingDataTable(ds.Tables["DeviceGrouping"]));
                }
                if ((ds.Tables["FeatureSettings_Numeric"] != null)) {
                    base.Tables.Add(new FeatureSettings_NumericDataTable(ds.Tables["FeatureSettings_Numeric"]));
                }
                if ((ds.Tables["RecordTypesSupported"] != null)) {
                    base.Tables.Add(new RecordTypesSupportedDataTable(ds.Tables["RecordTypesSupported"]));
                }
                if ((ds.Tables["StealthPickMap"] != null)) {
                    base.Tables.Add(new StealthPickMapDataTable(ds.Tables["StealthPickMap"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ValidKeyNamesDataTable ValidKeyNames {
            get {
                return this.tableValidKeyNames;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public KeyMapDataTable KeyMap {
            get {
                return this.tableKeyMap;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ModeGroupingDataTable ModeGrouping {
            get {
                return this.tableModeGrouping;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GeneralInformationDataTable GeneralInformation {
            get {
                return this.tableGeneralInformation;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DeviceGroupingDataTable DeviceGrouping {
            get {
                return this.tableDeviceGrouping;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FeatureSettings_NumericDataTable FeatureSettings_Numeric {
            get {
                return this.tableFeatureSettings_Numeric;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RecordTypesSupportedDataTable RecordTypesSupported {
            get {
                return this.tableRecordTypesSupported;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StealthPickMapDataTable StealthPickMap {
            get {
                return this.tableStealthPickMap;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            StealthUSB_SRI cln = ((StealthUSB_SRI)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ValidKeyNames"] != null)) {
                    base.Tables.Add(new ValidKeyNamesDataTable(ds.Tables["ValidKeyNames"]));
                }
                if ((ds.Tables["KeyMap"] != null)) {
                    base.Tables.Add(new KeyMapDataTable(ds.Tables["KeyMap"]));
                }
                if ((ds.Tables["ModeGrouping"] != null)) {
                    base.Tables.Add(new ModeGroupingDataTable(ds.Tables["ModeGrouping"]));
                }
                if ((ds.Tables["GeneralInformation"] != null)) {
                    base.Tables.Add(new GeneralInformationDataTable(ds.Tables["GeneralInformation"]));
                }
                if ((ds.Tables["DeviceGrouping"] != null)) {
                    base.Tables.Add(new DeviceGroupingDataTable(ds.Tables["DeviceGrouping"]));
                }
                if ((ds.Tables["FeatureSettings_Numeric"] != null)) {
                    base.Tables.Add(new FeatureSettings_NumericDataTable(ds.Tables["FeatureSettings_Numeric"]));
                }
                if ((ds.Tables["RecordTypesSupported"] != null)) {
                    base.Tables.Add(new RecordTypesSupportedDataTable(ds.Tables["RecordTypesSupported"]));
                }
                if ((ds.Tables["StealthPickMap"] != null)) {
                    base.Tables.Add(new StealthPickMapDataTable(ds.Tables["StealthPickMap"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableValidKeyNames = ((ValidKeyNamesDataTable)(base.Tables["ValidKeyNames"]));
            if ((initTable == true)) {
                if ((this.tableValidKeyNames != null)) {
                    this.tableValidKeyNames.InitVars();
                }
            }
            this.tableKeyMap = ((KeyMapDataTable)(base.Tables["KeyMap"]));
            if ((initTable == true)) {
                if ((this.tableKeyMap != null)) {
                    this.tableKeyMap.InitVars();
                }
            }
            this.tableModeGrouping = ((ModeGroupingDataTable)(base.Tables["ModeGrouping"]));
            if ((initTable == true)) {
                if ((this.tableModeGrouping != null)) {
                    this.tableModeGrouping.InitVars();
                }
            }
            this.tableGeneralInformation = ((GeneralInformationDataTable)(base.Tables["GeneralInformation"]));
            if ((initTable == true)) {
                if ((this.tableGeneralInformation != null)) {
                    this.tableGeneralInformation.InitVars();
                }
            }
            this.tableDeviceGrouping = ((DeviceGroupingDataTable)(base.Tables["DeviceGrouping"]));
            if ((initTable == true)) {
                if ((this.tableDeviceGrouping != null)) {
                    this.tableDeviceGrouping.InitVars();
                }
            }
            this.tableFeatureSettings_Numeric = ((FeatureSettings_NumericDataTable)(base.Tables["FeatureSettings_Numeric"]));
            if ((initTable == true)) {
                if ((this.tableFeatureSettings_Numeric != null)) {
                    this.tableFeatureSettings_Numeric.InitVars();
                }
            }
            this.tableRecordTypesSupported = ((RecordTypesSupportedDataTable)(base.Tables["RecordTypesSupported"]));
            if ((initTable == true)) {
                if ((this.tableRecordTypesSupported != null)) {
                    this.tableRecordTypesSupported.InitVars();
                }
            }
            this.tableStealthPickMap = ((StealthPickMapDataTable)(base.Tables["StealthPickMap"]));
            if ((initTable == true)) {
                if ((this.tableStealthPickMap != null)) {
                    this.tableStealthPickMap.InitVars();
                }
            }
            this.relationValidKeyNames_KeyMap = this.Relations["ValidKeyNames_KeyMap"];
            this.relationValidKeyNames_ModeGrouping = this.Relations["ValidKeyNames_ModeGrouping"];
            this.relationValidKeyNames_StealthPickMap = this.Relations["ValidKeyNames_StealthPickMap"];
            this.relationDeviceGrouping_StealthPickMap = this.Relations["DeviceGrouping_StealthPickMap"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "StealthUSB_SRI";
            this.Prefix = "";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableValidKeyNames = new ValidKeyNamesDataTable();
            base.Tables.Add(this.tableValidKeyNames);
            this.tableKeyMap = new KeyMapDataTable();
            base.Tables.Add(this.tableKeyMap);
            this.tableModeGrouping = new ModeGroupingDataTable();
            base.Tables.Add(this.tableModeGrouping);
            this.tableGeneralInformation = new GeneralInformationDataTable();
            base.Tables.Add(this.tableGeneralInformation);
            this.tableDeviceGrouping = new DeviceGroupingDataTable();
            base.Tables.Add(this.tableDeviceGrouping);
            this.tableFeatureSettings_Numeric = new FeatureSettings_NumericDataTable();
            base.Tables.Add(this.tableFeatureSettings_Numeric);
            this.tableRecordTypesSupported = new RecordTypesSupportedDataTable();
            base.Tables.Add(this.tableRecordTypesSupported);
            this.tableStealthPickMap = new StealthPickMapDataTable();
            base.Tables.Add(this.tableStealthPickMap);
            this.relationValidKeyNames_KeyMap = new global::System.Data.DataRelation("ValidKeyNames_KeyMap", new global::System.Data.DataColumn[] {
                        this.tableValidKeyNames.KeyNameColumn}, new global::System.Data.DataColumn[] {
                        this.tableKeyMap.KeyNameColumn}, false);
            this.Relations.Add(this.relationValidKeyNames_KeyMap);
            this.relationValidKeyNames_ModeGrouping = new global::System.Data.DataRelation("ValidKeyNames_ModeGrouping", new global::System.Data.DataColumn[] {
                        this.tableValidKeyNames.KeyNameColumn}, new global::System.Data.DataColumn[] {
                        this.tableModeGrouping.KeyNameColumn}, false);
            this.Relations.Add(this.relationValidKeyNames_ModeGrouping);
            this.relationValidKeyNames_StealthPickMap = new global::System.Data.DataRelation("ValidKeyNames_StealthPickMap", new global::System.Data.DataColumn[] {
                        this.tableValidKeyNames.KeyNameColumn}, new global::System.Data.DataColumn[] {
                        this.tableStealthPickMap.KeyNameColumn}, false);
            this.Relations.Add(this.relationValidKeyNames_StealthPickMap);
            this.relationDeviceGrouping_StealthPickMap = new global::System.Data.DataRelation("DeviceGrouping_StealthPickMap", new global::System.Data.DataColumn[] {
                        this.tableDeviceGrouping.DeviceTypeIDNumColumn}, new global::System.Data.DataColumn[] {
                        this.tableStealthPickMap.DeviceTypeIDNumColumn}, false);
            this.Relations.Add(this.relationDeviceGrouping_StealthPickMap);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeValidKeyNames() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeKeyMap() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeModeGrouping() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGeneralInformation() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDeviceGrouping() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFeatureSettings_Numeric() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRecordTypesSupported() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeStealthPickMap() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            StealthUSB_SRI ds = new StealthUSB_SRI();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void ValidKeyNamesRowChangeEventHandler(object sender, ValidKeyNamesRowChangeEvent e);
        
        public delegate void KeyMapRowChangeEventHandler(object sender, KeyMapRowChangeEvent e);
        
        public delegate void ModeGroupingRowChangeEventHandler(object sender, ModeGroupingRowChangeEvent e);
        
        public delegate void GeneralInformationRowChangeEventHandler(object sender, GeneralInformationRowChangeEvent e);
        
        public delegate void DeviceGroupingRowChangeEventHandler(object sender, DeviceGroupingRowChangeEvent e);
        
        public delegate void FeatureSettings_NumericRowChangeEventHandler(object sender, FeatureSettings_NumericRowChangeEvent e);
        
        public delegate void RecordTypesSupportedRowChangeEventHandler(object sender, RecordTypesSupportedRowChangeEvent e);
        
        public delegate void StealthPickMapRowChangeEventHandler(object sender, StealthPickMapRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ValidKeyNamesDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnKeyName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ValidKeyNamesDataTable() {
                this.TableName = "ValidKeyNames";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ValidKeyNamesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ValidKeyNamesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KeyNameColumn {
                get {
                    return this.columnKeyName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ValidKeyNamesRow this[int index] {
                get {
                    return ((ValidKeyNamesRow)(this.Rows[index]));
                }
            }
            
            public event ValidKeyNamesRowChangeEventHandler ValidKeyNamesRowChanging;
            
            public event ValidKeyNamesRowChangeEventHandler ValidKeyNamesRowChanged;
            
            public event ValidKeyNamesRowChangeEventHandler ValidKeyNamesRowDeleting;
            
            public event ValidKeyNamesRowChangeEventHandler ValidKeyNamesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddValidKeyNamesRow(ValidKeyNamesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ValidKeyNamesRow AddValidKeyNamesRow(string KeyName) {
                ValidKeyNamesRow rowValidKeyNamesRow = ((ValidKeyNamesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        KeyName};
                rowValidKeyNamesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowValidKeyNamesRow);
                return rowValidKeyNamesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ValidKeyNamesRow FindByKeyName(string KeyName) {
                return ((ValidKeyNamesRow)(this.Rows.Find(new object[] {
                            KeyName})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ValidKeyNamesDataTable cln = ((ValidKeyNamesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ValidKeyNamesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnKeyName = base.Columns["KeyName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnKeyName = new global::System.Data.DataColumn("KeyName", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnKeyName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("ValidKeyNames_PK", new global::System.Data.DataColumn[] {
                                this.columnKeyName}, true));
                this.columnKeyName.AllowDBNull = false;
                this.columnKeyName.Unique = true;
                this.columnKeyName.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ValidKeyNamesRow NewValidKeyNamesRow() {
                return ((ValidKeyNamesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ValidKeyNamesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ValidKeyNamesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ValidKeyNamesRowChanged != null)) {
                    this.ValidKeyNamesRowChanged(this, new ValidKeyNamesRowChangeEvent(((ValidKeyNamesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ValidKeyNamesRowChanging != null)) {
                    this.ValidKeyNamesRowChanging(this, new ValidKeyNamesRowChangeEvent(((ValidKeyNamesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ValidKeyNamesRowDeleted != null)) {
                    this.ValidKeyNamesRowDeleted(this, new ValidKeyNamesRowChangeEvent(((ValidKeyNamesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ValidKeyNamesRowDeleting != null)) {
                    this.ValidKeyNamesRowDeleting(this, new ValidKeyNamesRowChangeEvent(((ValidKeyNamesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveValidKeyNamesRow(ValidKeyNamesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StealthUSB_SRI ds = new StealthUSB_SRI();
                xs.Add(ds.GetSchemaSerializable());
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ValidKeyNamesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class KeyMapDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnKeyName;
            
            private global::System.Data.DataColumn columnKeyLabel;
            
            private global::System.Data.DataColumn columnKeyScanCode;
            
            private global::System.Data.DataColumn columnIRKey;
            
            private global::System.Data.DataColumn columnValidMacroTarget;
            
            private global::System.Data.DataColumn columnValidMoverTarget;
            
            private global::System.Data.DataColumn columnValidLearningTarget;
            
            private global::System.Data.DataColumn columnIsConfiguredKey;
            
            private global::System.Data.DataColumn columnIsSoftKey;
            
            private global::System.Data.DataColumn columnIsChannel;
            
            private global::System.Data.DataColumn columnIsDigit;
            
            private global::System.Data.DataColumn columnIsVolume;
            
            private global::System.Data.DataColumn columnIsTransport;
            
            private global::System.Data.DataColumn columnIsActivity;
            
            private global::System.Data.DataColumn columnIsSNS;
            
            private global::System.Data.DataColumn columnIsMode;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KeyMapDataTable() {
                this.TableName = "KeyMap";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal KeyMapDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected KeyMapDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KeyNameColumn {
                get {
                    return this.columnKeyName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KeyLabelColumn {
                get {
                    return this.columnKeyLabel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KeyScanCodeColumn {
                get {
                    return this.columnKeyScanCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IRKeyColumn {
                get {
                    return this.columnIRKey;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValidMacroTargetColumn {
                get {
                    return this.columnValidMacroTarget;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValidMoverTargetColumn {
                get {
                    return this.columnValidMoverTarget;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValidLearningTargetColumn {
                get {
                    return this.columnValidLearningTarget;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsConfiguredKeyColumn {
                get {
                    return this.columnIsConfiguredKey;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsSoftKeyColumn {
                get {
                    return this.columnIsSoftKey;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsChannelColumn {
                get {
                    return this.columnIsChannel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsDigitColumn {
                get {
                    return this.columnIsDigit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsVolumeColumn {
                get {
                    return this.columnIsVolume;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsTransportColumn {
                get {
                    return this.columnIsTransport;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsActivityColumn {
                get {
                    return this.columnIsActivity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsSNSColumn {
                get {
                    return this.columnIsSNS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsModeColumn {
                get {
                    return this.columnIsMode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KeyMapRow this[int index] {
                get {
                    return ((KeyMapRow)(this.Rows[index]));
                }
            }
            
            public event KeyMapRowChangeEventHandler KeyMapRowChanging;
            
            public event KeyMapRowChangeEventHandler KeyMapRowChanged;
            
            public event KeyMapRowChangeEventHandler KeyMapRowDeleting;
            
            public event KeyMapRowChangeEventHandler KeyMapRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddKeyMapRow(KeyMapRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KeyMapRow AddKeyMapRow(
                        ValidKeyNamesRow parentValidKeyNamesRowByValidKeyNames_KeyMap, 
                        string KeyLabel, 
                        byte KeyScanCode, 
                        bool IRKey, 
                        bool ValidMacroTarget, 
                        bool ValidMoverTarget, 
                        bool ValidLearningTarget, 
                        bool IsConfiguredKey, 
                        bool IsSoftKey, 
                        bool IsChannel, 
                        bool IsDigit, 
                        bool IsVolume, 
                        bool IsTransport, 
                        bool IsActivity, 
                        bool IsSNS, 
                        bool IsMode) {
                KeyMapRow rowKeyMapRow = ((KeyMapRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        KeyLabel,
                        KeyScanCode,
                        IRKey,
                        ValidMacroTarget,
                        ValidMoverTarget,
                        ValidLearningTarget,
                        IsConfiguredKey,
                        IsSoftKey,
                        IsChannel,
                        IsDigit,
                        IsVolume,
                        IsTransport,
                        IsActivity,
                        IsSNS,
                        IsMode};
                if ((parentValidKeyNamesRowByValidKeyNames_KeyMap != null)) {
                    columnValuesArray[0] = parentValidKeyNamesRowByValidKeyNames_KeyMap[0];
                }
                rowKeyMapRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowKeyMapRow);
                return rowKeyMapRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KeyMapRow FindByKeyName(string KeyName) {
                return ((KeyMapRow)(this.Rows.Find(new object[] {
                            KeyName})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                KeyMapDataTable cln = ((KeyMapDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new KeyMapDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnKeyName = base.Columns["KeyName"];
                this.columnKeyLabel = base.Columns["KeyLabel"];
                this.columnKeyScanCode = base.Columns["KeyScanCode"];
                this.columnIRKey = base.Columns["IRKey"];
                this.columnValidMacroTarget = base.Columns["ValidMacroTarget"];
                this.columnValidMoverTarget = base.Columns["ValidMoverTarget"];
                this.columnValidLearningTarget = base.Columns["ValidLearningTarget"];
                this.columnIsConfiguredKey = base.Columns["IsConfiguredKey"];
                this.columnIsSoftKey = base.Columns["IsSoftKey"];
                this.columnIsChannel = base.Columns["IsChannel"];
                this.columnIsDigit = base.Columns["IsDigit"];
                this.columnIsVolume = base.Columns["IsVolume"];
                this.columnIsTransport = base.Columns["IsTransport"];
                this.columnIsActivity = base.Columns["IsActivity"];
                this.columnIsSNS = base.Columns["IsSNS"];
                this.columnIsMode = base.Columns["IsMode"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnKeyName = new global::System.Data.DataColumn("KeyName", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnKeyName);
                this.columnKeyLabel = new global::System.Data.DataColumn("KeyLabel", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnKeyLabel);
                this.columnKeyScanCode = new global::System.Data.DataColumn("KeyScanCode", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnKeyScanCode);
                this.columnIRKey = new global::System.Data.DataColumn("IRKey", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnIRKey);
                this.columnValidMacroTarget = new global::System.Data.DataColumn("ValidMacroTarget", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnValidMacroTarget);
                this.columnValidMoverTarget = new global::System.Data.DataColumn("ValidMoverTarget", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnValidMoverTarget);
                this.columnValidLearningTarget = new global::System.Data.DataColumn("ValidLearningTarget", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnValidLearningTarget);
                this.columnIsConfiguredKey = new global::System.Data.DataColumn("IsConfiguredKey", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnIsConfiguredKey);
                this.columnIsSoftKey = new global::System.Data.DataColumn("IsSoftKey", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnIsSoftKey);
                this.columnIsChannel = new global::System.Data.DataColumn("IsChannel", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnIsChannel);
                this.columnIsDigit = new global::System.Data.DataColumn("IsDigit", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnIsDigit);
                this.columnIsVolume = new global::System.Data.DataColumn("IsVolume", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnIsVolume);
                this.columnIsTransport = new global::System.Data.DataColumn("IsTransport", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnIsTransport);
                this.columnIsActivity = new global::System.Data.DataColumn("IsActivity", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnIsActivity);
                this.columnIsSNS = new global::System.Data.DataColumn("IsSNS", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnIsSNS);
                this.columnIsMode = new global::System.Data.DataColumn("IsMode", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnIsMode);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("KeyMap_PK", new global::System.Data.DataColumn[] {
                                this.columnKeyName}, true));
                this.columnKeyName.AllowDBNull = false;
                this.columnKeyName.Unique = true;
                this.columnKeyName.Namespace = "";
                this.columnKeyName.DefaultValue = ((string)("nothing"));
                this.columnKeyLabel.AllowDBNull = false;
                this.columnKeyLabel.Namespace = "";
                this.columnKeyLabel.DefaultValue = ((string)("nothing"));
                this.columnKeyScanCode.AllowDBNull = false;
                this.columnKeyScanCode.Namespace = "";
                this.columnKeyScanCode.DefaultValue = ((byte)(0));
                this.columnIRKey.AllowDBNull = false;
                this.columnIRKey.Namespace = "";
                this.columnIRKey.DefaultValue = ((bool)(true));
                this.columnValidMacroTarget.AllowDBNull = false;
                this.columnValidMacroTarget.Namespace = "";
                this.columnValidMacroTarget.DefaultValue = ((bool)(false));
                this.columnValidMoverTarget.AllowDBNull = false;
                this.columnValidMoverTarget.Namespace = "";
                this.columnValidMoverTarget.DefaultValue = ((bool)(false));
                this.columnValidLearningTarget.AllowDBNull = false;
                this.columnValidLearningTarget.Namespace = "";
                this.columnValidLearningTarget.DefaultValue = ((bool)(false));
                this.columnIsConfiguredKey.AllowDBNull = false;
                this.columnIsConfiguredKey.Namespace = "";
                this.columnIsConfiguredKey.DefaultValue = ((bool)(false));
                this.columnIsSoftKey.AllowDBNull = false;
                this.columnIsSoftKey.Namespace = "";
                this.columnIsSoftKey.DefaultValue = ((bool)(false));
                this.columnIsChannel.AllowDBNull = false;
                this.columnIsChannel.Namespace = "";
                this.columnIsChannel.DefaultValue = ((bool)(false));
                this.columnIsDigit.AllowDBNull = false;
                this.columnIsDigit.Namespace = "";
                this.columnIsDigit.DefaultValue = ((bool)(false));
                this.columnIsVolume.AllowDBNull = false;
                this.columnIsVolume.Namespace = "";
                this.columnIsVolume.DefaultValue = ((bool)(false));
                this.columnIsTransport.AllowDBNull = false;
                this.columnIsTransport.Namespace = "";
                this.columnIsTransport.DefaultValue = ((bool)(false));
                this.columnIsActivity.AllowDBNull = false;
                this.columnIsActivity.Namespace = "";
                this.columnIsActivity.DefaultValue = ((bool)(false));
                this.columnIsSNS.AllowDBNull = false;
                this.columnIsSNS.Namespace = "";
                this.columnIsSNS.DefaultValue = ((bool)(false));
                this.columnIsMode.AllowDBNull = false;
                this.columnIsMode.Namespace = "";
                this.columnIsMode.DefaultValue = ((bool)(false));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KeyMapRow NewKeyMapRow() {
                return ((KeyMapRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new KeyMapRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(KeyMapRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.KeyMapRowChanged != null)) {
                    this.KeyMapRowChanged(this, new KeyMapRowChangeEvent(((KeyMapRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.KeyMapRowChanging != null)) {
                    this.KeyMapRowChanging(this, new KeyMapRowChangeEvent(((KeyMapRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.KeyMapRowDeleted != null)) {
                    this.KeyMapRowDeleted(this, new KeyMapRowChangeEvent(((KeyMapRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.KeyMapRowDeleting != null)) {
                    this.KeyMapRowDeleting(this, new KeyMapRowChangeEvent(((KeyMapRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveKeyMapRow(KeyMapRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StealthUSB_SRI ds = new StealthUSB_SRI();
                xs.Add(ds.GetSchemaSerializable());
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "KeyMapDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ModeGroupingDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnModeName;
            
            private global::System.Data.DataColumn columnModeNumber;
            
            private global::System.Data.DataColumn columnKeyName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModeGroupingDataTable() {
                this.TableName = "ModeGrouping";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ModeGroupingDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ModeGroupingDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModeNameColumn {
                get {
                    return this.columnModeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModeNumberColumn {
                get {
                    return this.columnModeNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KeyNameColumn {
                get {
                    return this.columnKeyName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModeGroupingRow this[int index] {
                get {
                    return ((ModeGroupingRow)(this.Rows[index]));
                }
            }
            
            public event ModeGroupingRowChangeEventHandler ModeGroupingRowChanging;
            
            public event ModeGroupingRowChangeEventHandler ModeGroupingRowChanged;
            
            public event ModeGroupingRowChangeEventHandler ModeGroupingRowDeleting;
            
            public event ModeGroupingRowChangeEventHandler ModeGroupingRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddModeGroupingRow(ModeGroupingRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModeGroupingRow AddModeGroupingRow(string ModeName, byte ModeNumber, ValidKeyNamesRow parentValidKeyNamesRowByValidKeyNames_ModeGrouping) {
                ModeGroupingRow rowModeGroupingRow = ((ModeGroupingRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ModeName,
                        ModeNumber,
                        null};
                if ((parentValidKeyNamesRowByValidKeyNames_ModeGrouping != null)) {
                    columnValuesArray[2] = parentValidKeyNamesRowByValidKeyNames_ModeGrouping[0];
                }
                rowModeGroupingRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowModeGroupingRow);
                return rowModeGroupingRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModeGroupingRow FindByModeName(string ModeName) {
                return ((ModeGroupingRow)(this.Rows.Find(new object[] {
                            ModeName})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ModeGroupingDataTable cln = ((ModeGroupingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ModeGroupingDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnModeName = base.Columns["ModeName"];
                this.columnModeNumber = base.Columns["ModeNumber"];
                this.columnKeyName = base.Columns["KeyName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnModeName = new global::System.Data.DataColumn("ModeName", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnModeName);
                this.columnModeNumber = new global::System.Data.DataColumn("ModeNumber", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnModeNumber);
                this.columnKeyName = new global::System.Data.DataColumn("KeyName", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnKeyName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("ModeGrouping_PK", new global::System.Data.DataColumn[] {
                                this.columnModeName}, true));
                this.columnModeName.AllowDBNull = false;
                this.columnModeName.Unique = true;
                this.columnModeName.Namespace = "";
                this.columnModeName.DefaultValue = ((string)("nothing"));
                this.columnModeNumber.AllowDBNull = false;
                this.columnModeNumber.Namespace = "";
                this.columnModeNumber.DefaultValue = ((byte)(0));
                this.columnKeyName.AllowDBNull = false;
                this.columnKeyName.Namespace = "";
                this.columnKeyName.DefaultValue = ((string)("nothing"));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModeGroupingRow NewModeGroupingRow() {
                return ((ModeGroupingRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ModeGroupingRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ModeGroupingRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ModeGroupingRowChanged != null)) {
                    this.ModeGroupingRowChanged(this, new ModeGroupingRowChangeEvent(((ModeGroupingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ModeGroupingRowChanging != null)) {
                    this.ModeGroupingRowChanging(this, new ModeGroupingRowChangeEvent(((ModeGroupingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ModeGroupingRowDeleted != null)) {
                    this.ModeGroupingRowDeleted(this, new ModeGroupingRowChangeEvent(((ModeGroupingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ModeGroupingRowDeleting != null)) {
                    this.ModeGroupingRowDeleting(this, new ModeGroupingRowChangeEvent(((ModeGroupingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveModeGroupingRow(ModeGroupingRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StealthUSB_SRI ds = new StealthUSB_SRI();
                xs.Add(ds.GetSchemaSerializable());
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ModeGroupingDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GeneralInformationDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnProductID;
            
            private global::System.Data.DataColumn columnSWVersion;
            
            private global::System.Data.DataColumn columnMemoryAddressing;
            
            private global::System.Data.DataColumn columnDataSectorSize;
            
            private global::System.Data.DataColumn columnUserSetupBeg;
            
            private global::System.Data.DataColumn columnUserSetupEnd;
            
            private global::System.Data.DataColumn columnTempBufferBeg;
            
            private global::System.Data.DataColumn columnTempBufferEnd;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GeneralInformationDataTable() {
                this.TableName = "GeneralInformation";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GeneralInformationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GeneralInformationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProductIDColumn {
                get {
                    return this.columnProductID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SWVersionColumn {
                get {
                    return this.columnSWVersion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MemoryAddressingColumn {
                get {
                    return this.columnMemoryAddressing;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DataSectorSizeColumn {
                get {
                    return this.columnDataSectorSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserSetupBegColumn {
                get {
                    return this.columnUserSetupBeg;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserSetupEndColumn {
                get {
                    return this.columnUserSetupEnd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TempBufferBegColumn {
                get {
                    return this.columnTempBufferBeg;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TempBufferEndColumn {
                get {
                    return this.columnTempBufferEnd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GeneralInformationRow this[int index] {
                get {
                    return ((GeneralInformationRow)(this.Rows[index]));
                }
            }
            
            public event GeneralInformationRowChangeEventHandler GeneralInformationRowChanging;
            
            public event GeneralInformationRowChangeEventHandler GeneralInformationRowChanged;
            
            public event GeneralInformationRowChangeEventHandler GeneralInformationRowDeleting;
            
            public event GeneralInformationRowChangeEventHandler GeneralInformationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGeneralInformationRow(GeneralInformationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GeneralInformationRow AddGeneralInformationRow(string ProductID, string SWVersion, ushort MemoryAddressing, ushort DataSectorSize, ushort UserSetupBeg, ushort UserSetupEnd, ushort TempBufferBeg, ushort TempBufferEnd) {
                GeneralInformationRow rowGeneralInformationRow = ((GeneralInformationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ProductID,
                        SWVersion,
                        MemoryAddressing,
                        DataSectorSize,
                        UserSetupBeg,
                        UserSetupEnd,
                        TempBufferBeg,
                        TempBufferEnd};
                rowGeneralInformationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGeneralInformationRow);
                return rowGeneralInformationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GeneralInformationDataTable cln = ((GeneralInformationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GeneralInformationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnProductID = base.Columns["ProductID"];
                this.columnSWVersion = base.Columns["SWVersion"];
                this.columnMemoryAddressing = base.Columns["MemoryAddressing"];
                this.columnDataSectorSize = base.Columns["DataSectorSize"];
                this.columnUserSetupBeg = base.Columns["UserSetupBeg"];
                this.columnUserSetupEnd = base.Columns["UserSetupEnd"];
                this.columnTempBufferBeg = base.Columns["TempBufferBeg"];
                this.columnTempBufferEnd = base.Columns["TempBufferEnd"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnProductID = new global::System.Data.DataColumn("ProductID", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnProductID);
                this.columnSWVersion = new global::System.Data.DataColumn("SWVersion", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSWVersion);
                this.columnMemoryAddressing = new global::System.Data.DataColumn("MemoryAddressing", typeof(ushort), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnMemoryAddressing);
                this.columnDataSectorSize = new global::System.Data.DataColumn("DataSectorSize", typeof(ushort), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDataSectorSize);
                this.columnUserSetupBeg = new global::System.Data.DataColumn("UserSetupBeg", typeof(ushort), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnUserSetupBeg);
                this.columnUserSetupEnd = new global::System.Data.DataColumn("UserSetupEnd", typeof(ushort), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnUserSetupEnd);
                this.columnTempBufferBeg = new global::System.Data.DataColumn("TempBufferBeg", typeof(ushort), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnTempBufferBeg);
                this.columnTempBufferEnd = new global::System.Data.DataColumn("TempBufferEnd", typeof(ushort), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnTempBufferEnd);
                this.columnProductID.AllowDBNull = false;
                this.columnProductID.Namespace = "";
                this.columnProductID.DefaultValue = ((string)("nothing"));
                this.columnSWVersion.AllowDBNull = false;
                this.columnSWVersion.Namespace = "";
                this.columnSWVersion.DefaultValue = ((string)("nothing"));
                this.columnMemoryAddressing.AllowDBNull = false;
                this.columnMemoryAddressing.Namespace = "";
                this.columnMemoryAddressing.DefaultValue = ((ushort)(0));
                this.columnDataSectorSize.AllowDBNull = false;
                this.columnDataSectorSize.Namespace = "";
                this.columnDataSectorSize.DefaultValue = ((ushort)(0));
                this.columnUserSetupBeg.AllowDBNull = false;
                this.columnUserSetupBeg.Namespace = "";
                this.columnUserSetupBeg.DefaultValue = ((ushort)(0));
                this.columnUserSetupEnd.AllowDBNull = false;
                this.columnUserSetupEnd.Namespace = "";
                this.columnUserSetupEnd.DefaultValue = ((ushort)(0));
                this.columnTempBufferBeg.AllowDBNull = false;
                this.columnTempBufferBeg.Namespace = "";
                this.columnTempBufferBeg.DefaultValue = ((ushort)(0));
                this.columnTempBufferEnd.AllowDBNull = false;
                this.columnTempBufferEnd.Namespace = "";
                this.columnTempBufferEnd.DefaultValue = ((ushort)(0));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GeneralInformationRow NewGeneralInformationRow() {
                return ((GeneralInformationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GeneralInformationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GeneralInformationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GeneralInformationRowChanged != null)) {
                    this.GeneralInformationRowChanged(this, new GeneralInformationRowChangeEvent(((GeneralInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GeneralInformationRowChanging != null)) {
                    this.GeneralInformationRowChanging(this, new GeneralInformationRowChangeEvent(((GeneralInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GeneralInformationRowDeleted != null)) {
                    this.GeneralInformationRowDeleted(this, new GeneralInformationRowChangeEvent(((GeneralInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GeneralInformationRowDeleting != null)) {
                    this.GeneralInformationRowDeleting(this, new GeneralInformationRowChangeEvent(((GeneralInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGeneralInformationRow(GeneralInformationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StealthUSB_SRI ds = new StealthUSB_SRI();
                xs.Add(ds.GetSchemaSerializable());
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GeneralInformationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DeviceGroupingDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnDeviceDescription;
            
            private global::System.Data.DataColumn columnDeviceAsciiCode;
            
            private global::System.Data.DataColumn columnDeviceTypeIDNum;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeviceGroupingDataTable() {
                this.TableName = "DeviceGrouping";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DeviceGroupingDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DeviceGroupingDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeviceDescriptionColumn {
                get {
                    return this.columnDeviceDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeviceAsciiCodeColumn {
                get {
                    return this.columnDeviceAsciiCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeviceTypeIDNumColumn {
                get {
                    return this.columnDeviceTypeIDNum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeviceGroupingRow this[int index] {
                get {
                    return ((DeviceGroupingRow)(this.Rows[index]));
                }
            }
            
            public event DeviceGroupingRowChangeEventHandler DeviceGroupingRowChanging;
            
            public event DeviceGroupingRowChangeEventHandler DeviceGroupingRowChanged;
            
            public event DeviceGroupingRowChangeEventHandler DeviceGroupingRowDeleting;
            
            public event DeviceGroupingRowChangeEventHandler DeviceGroupingRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDeviceGroupingRow(DeviceGroupingRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeviceGroupingRow AddDeviceGroupingRow(string DeviceDescription, string DeviceAsciiCode, byte DeviceTypeIDNum) {
                DeviceGroupingRow rowDeviceGroupingRow = ((DeviceGroupingRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        DeviceDescription,
                        DeviceAsciiCode,
                        DeviceTypeIDNum};
                rowDeviceGroupingRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDeviceGroupingRow);
                return rowDeviceGroupingRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeviceGroupingRow FindByDeviceAsciiCode(string DeviceAsciiCode) {
                return ((DeviceGroupingRow)(this.Rows.Find(new object[] {
                            DeviceAsciiCode})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DeviceGroupingDataTable cln = ((DeviceGroupingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DeviceGroupingDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDeviceDescription = base.Columns["DeviceDescription"];
                this.columnDeviceAsciiCode = base.Columns["DeviceAsciiCode"];
                this.columnDeviceTypeIDNum = base.Columns["DeviceTypeIDNum"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDeviceDescription = new global::System.Data.DataColumn("DeviceDescription", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDeviceDescription);
                this.columnDeviceAsciiCode = new global::System.Data.DataColumn("DeviceAsciiCode", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDeviceAsciiCode);
                this.columnDeviceTypeIDNum = new global::System.Data.DataColumn("DeviceTypeIDNum", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDeviceTypeIDNum);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("DeviceGrouping_PK", new global::System.Data.DataColumn[] {
                                this.columnDeviceAsciiCode}, true));
                this.Constraints.Add(new global::System.Data.UniqueConstraint("DeviceGrouping_UK2", new global::System.Data.DataColumn[] {
                                this.columnDeviceTypeIDNum}, false));
                this.columnDeviceDescription.AllowDBNull = false;
                this.columnDeviceDescription.Namespace = "";
                this.columnDeviceDescription.DefaultValue = ((string)("nothing"));
                this.columnDeviceAsciiCode.AllowDBNull = false;
                this.columnDeviceAsciiCode.Unique = true;
                this.columnDeviceAsciiCode.Namespace = "";
                this.columnDeviceAsciiCode.DefaultValue = ((string)("nothing"));
                this.columnDeviceTypeIDNum.AllowDBNull = false;
                this.columnDeviceTypeIDNum.Unique = true;
                this.columnDeviceTypeIDNum.Namespace = "";
                this.columnDeviceTypeIDNum.DefaultValue = ((byte)(0));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeviceGroupingRow NewDeviceGroupingRow() {
                return ((DeviceGroupingRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DeviceGroupingRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DeviceGroupingRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DeviceGroupingRowChanged != null)) {
                    this.DeviceGroupingRowChanged(this, new DeviceGroupingRowChangeEvent(((DeviceGroupingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DeviceGroupingRowChanging != null)) {
                    this.DeviceGroupingRowChanging(this, new DeviceGroupingRowChangeEvent(((DeviceGroupingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DeviceGroupingRowDeleted != null)) {
                    this.DeviceGroupingRowDeleted(this, new DeviceGroupingRowChangeEvent(((DeviceGroupingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DeviceGroupingRowDeleting != null)) {
                    this.DeviceGroupingRowDeleting(this, new DeviceGroupingRowChangeEvent(((DeviceGroupingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDeviceGroupingRow(DeviceGroupingRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StealthUSB_SRI ds = new StealthUSB_SRI();
                xs.Add(ds.GetSchemaSerializable());
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DeviceGroupingDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FeatureSettings_NumericDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnRecordType;
            
            private global::System.Data.DataColumn columnParameter;
            
            private global::System.Data.DataColumn columnValue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FeatureSettings_NumericDataTable() {
                this.TableName = "FeatureSettings_Numeric";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FeatureSettings_NumericDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FeatureSettings_NumericDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RecordTypeColumn {
                get {
                    return this.columnRecordType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParameterColumn {
                get {
                    return this.columnParameter;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FeatureSettings_NumericRow this[int index] {
                get {
                    return ((FeatureSettings_NumericRow)(this.Rows[index]));
                }
            }
            
            public event FeatureSettings_NumericRowChangeEventHandler FeatureSettings_NumericRowChanging;
            
            public event FeatureSettings_NumericRowChangeEventHandler FeatureSettings_NumericRowChanged;
            
            public event FeatureSettings_NumericRowChangeEventHandler FeatureSettings_NumericRowDeleting;
            
            public event FeatureSettings_NumericRowChangeEventHandler FeatureSettings_NumericRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFeatureSettings_NumericRow(FeatureSettings_NumericRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FeatureSettings_NumericRow AddFeatureSettings_NumericRow(string RecordType, string Parameter, byte Value) {
                FeatureSettings_NumericRow rowFeatureSettings_NumericRow = ((FeatureSettings_NumericRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        RecordType,
                        Parameter,
                        Value};
                rowFeatureSettings_NumericRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFeatureSettings_NumericRow);
                return rowFeatureSettings_NumericRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                FeatureSettings_NumericDataTable cln = ((FeatureSettings_NumericDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FeatureSettings_NumericDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRecordType = base.Columns["RecordType"];
                this.columnParameter = base.Columns["Parameter"];
                this.columnValue = base.Columns["Value"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRecordType = new global::System.Data.DataColumn("RecordType", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnRecordType);
                this.columnParameter = new global::System.Data.DataColumn("Parameter", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnParameter);
                this.columnValue = new global::System.Data.DataColumn("Value", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnValue);
                this.columnRecordType.AllowDBNull = false;
                this.columnRecordType.Namespace = "";
                this.columnRecordType.DefaultValue = ((string)("nothing"));
                this.columnParameter.AllowDBNull = false;
                this.columnParameter.Namespace = "";
                this.columnParameter.DefaultValue = ((string)("nothing"));
                this.columnValue.AllowDBNull = false;
                this.columnValue.Namespace = "";
                this.columnValue.DefaultValue = ((byte)(0));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FeatureSettings_NumericRow NewFeatureSettings_NumericRow() {
                return ((FeatureSettings_NumericRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FeatureSettings_NumericRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(FeatureSettings_NumericRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FeatureSettings_NumericRowChanged != null)) {
                    this.FeatureSettings_NumericRowChanged(this, new FeatureSettings_NumericRowChangeEvent(((FeatureSettings_NumericRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FeatureSettings_NumericRowChanging != null)) {
                    this.FeatureSettings_NumericRowChanging(this, new FeatureSettings_NumericRowChangeEvent(((FeatureSettings_NumericRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FeatureSettings_NumericRowDeleted != null)) {
                    this.FeatureSettings_NumericRowDeleted(this, new FeatureSettings_NumericRowChangeEvent(((FeatureSettings_NumericRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FeatureSettings_NumericRowDeleting != null)) {
                    this.FeatureSettings_NumericRowDeleting(this, new FeatureSettings_NumericRowChangeEvent(((FeatureSettings_NumericRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFeatureSettings_NumericRow(FeatureSettings_NumericRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StealthUSB_SRI ds = new StealthUSB_SRI();
                xs.Add(ds.GetSchemaSerializable());
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FeatureSettings_NumericDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RecordTypesSupportedDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnRecordType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecordTypesSupportedDataTable() {
                this.TableName = "RecordTypesSupported";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RecordTypesSupportedDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RecordTypesSupportedDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RecordTypeColumn {
                get {
                    return this.columnRecordType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecordTypesSupportedRow this[int index] {
                get {
                    return ((RecordTypesSupportedRow)(this.Rows[index]));
                }
            }
            
            public event RecordTypesSupportedRowChangeEventHandler RecordTypesSupportedRowChanging;
            
            public event RecordTypesSupportedRowChangeEventHandler RecordTypesSupportedRowChanged;
            
            public event RecordTypesSupportedRowChangeEventHandler RecordTypesSupportedRowDeleting;
            
            public event RecordTypesSupportedRowChangeEventHandler RecordTypesSupportedRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRecordTypesSupportedRow(RecordTypesSupportedRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecordTypesSupportedRow AddRecordTypesSupportedRow(string RecordType) {
                RecordTypesSupportedRow rowRecordTypesSupportedRow = ((RecordTypesSupportedRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        RecordType};
                rowRecordTypesSupportedRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRecordTypesSupportedRow);
                return rowRecordTypesSupportedRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                RecordTypesSupportedDataTable cln = ((RecordTypesSupportedDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new RecordTypesSupportedDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRecordType = base.Columns["RecordType"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRecordType = new global::System.Data.DataColumn("RecordType", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnRecordType);
                this.columnRecordType.AllowDBNull = false;
                this.columnRecordType.Namespace = "";
                this.columnRecordType.DefaultValue = ((string)("nothing"));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecordTypesSupportedRow NewRecordTypesSupportedRow() {
                return ((RecordTypesSupportedRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new RecordTypesSupportedRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(RecordTypesSupportedRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RecordTypesSupportedRowChanged != null)) {
                    this.RecordTypesSupportedRowChanged(this, new RecordTypesSupportedRowChangeEvent(((RecordTypesSupportedRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RecordTypesSupportedRowChanging != null)) {
                    this.RecordTypesSupportedRowChanging(this, new RecordTypesSupportedRowChangeEvent(((RecordTypesSupportedRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RecordTypesSupportedRowDeleted != null)) {
                    this.RecordTypesSupportedRowDeleted(this, new RecordTypesSupportedRowChangeEvent(((RecordTypesSupportedRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RecordTypesSupportedRowDeleting != null)) {
                    this.RecordTypesSupportedRowDeleting(this, new RecordTypesSupportedRowChangeEvent(((RecordTypesSupportedRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRecordTypesSupportedRow(RecordTypesSupportedRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StealthUSB_SRI ds = new StealthUSB_SRI();
                xs.Add(ds.GetSchemaSerializable());
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RecordTypesSupportedDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class StealthPickMapDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnKeyName;
            
            private global::System.Data.DataColumn columnDeviceTypeIDNum;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StealthPickMapDataTable() {
                this.TableName = "StealthPickMap";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StealthPickMapDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected StealthPickMapDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KeyNameColumn {
                get {
                    return this.columnKeyName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeviceTypeIDNumColumn {
                get {
                    return this.columnDeviceTypeIDNum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StealthPickMapRow this[int index] {
                get {
                    return ((StealthPickMapRow)(this.Rows[index]));
                }
            }
            
            public event StealthPickMapRowChangeEventHandler StealthPickMapRowChanging;
            
            public event StealthPickMapRowChangeEventHandler StealthPickMapRowChanged;
            
            public event StealthPickMapRowChangeEventHandler StealthPickMapRowDeleting;
            
            public event StealthPickMapRowChangeEventHandler StealthPickMapRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddStealthPickMapRow(StealthPickMapRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StealthPickMapRow AddStealthPickMapRow(ValidKeyNamesRow parentValidKeyNamesRowByValidKeyNames_StealthPickMap, DeviceGroupingRow parentDeviceGroupingRowByDeviceGrouping_StealthPickMap) {
                StealthPickMapRow rowStealthPickMapRow = ((StealthPickMapRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentValidKeyNamesRowByValidKeyNames_StealthPickMap != null)) {
                    columnValuesArray[0] = parentValidKeyNamesRowByValidKeyNames_StealthPickMap[0];
                }
                if ((parentDeviceGroupingRowByDeviceGrouping_StealthPickMap != null)) {
                    columnValuesArray[1] = parentDeviceGroupingRowByDeviceGrouping_StealthPickMap[2];
                }
                rowStealthPickMapRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowStealthPickMapRow);
                return rowStealthPickMapRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                StealthPickMapDataTable cln = ((StealthPickMapDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new StealthPickMapDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnKeyName = base.Columns["KeyName"];
                this.columnDeviceTypeIDNum = base.Columns["DeviceTypeIDNum"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnKeyName = new global::System.Data.DataColumn("KeyName", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnKeyName);
                this.columnDeviceTypeIDNum = new global::System.Data.DataColumn("DeviceTypeIDNum", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDeviceTypeIDNum);
                this.columnKeyName.AllowDBNull = false;
                this.columnKeyName.Namespace = "";
                this.columnKeyName.DefaultValue = ((string)("nothing"));
                this.columnDeviceTypeIDNum.AllowDBNull = false;
                this.columnDeviceTypeIDNum.Namespace = "";
                this.columnDeviceTypeIDNum.DefaultValue = ((byte)(0));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StealthPickMapRow NewStealthPickMapRow() {
                return ((StealthPickMapRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new StealthPickMapRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(StealthPickMapRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StealthPickMapRowChanged != null)) {
                    this.StealthPickMapRowChanged(this, new StealthPickMapRowChangeEvent(((StealthPickMapRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StealthPickMapRowChanging != null)) {
                    this.StealthPickMapRowChanging(this, new StealthPickMapRowChangeEvent(((StealthPickMapRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StealthPickMapRowDeleted != null)) {
                    this.StealthPickMapRowDeleted(this, new StealthPickMapRowChangeEvent(((StealthPickMapRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StealthPickMapRowDeleting != null)) {
                    this.StealthPickMapRowDeleting(this, new StealthPickMapRowChangeEvent(((StealthPickMapRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveStealthPickMapRow(StealthPickMapRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StealthUSB_SRI ds = new StealthUSB_SRI();
                xs.Add(ds.GetSchemaSerializable());
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "StealthPickMapDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ValidKeyNamesRow : global::System.Data.DataRow {
            
            private ValidKeyNamesDataTable tableValidKeyNames;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ValidKeyNamesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableValidKeyNames = ((ValidKeyNamesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string KeyName {
                get {
                    return ((string)(this[this.tableValidKeyNames.KeyNameColumn]));
                }
                set {
                    this[this.tableValidKeyNames.KeyNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KeyMapRow[] GetKeyMapRows() {
                if ((this.Table.ChildRelations["ValidKeyNames_KeyMap"] == null)) {
                    return new KeyMapRow[0];
                }
                else {
                    return ((KeyMapRow[])(base.GetChildRows(this.Table.ChildRelations["ValidKeyNames_KeyMap"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModeGroupingRow[] GetModeGroupingRows() {
                if ((this.Table.ChildRelations["ValidKeyNames_ModeGrouping"] == null)) {
                    return new ModeGroupingRow[0];
                }
                else {
                    return ((ModeGroupingRow[])(base.GetChildRows(this.Table.ChildRelations["ValidKeyNames_ModeGrouping"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StealthPickMapRow[] GetStealthPickMapRows() {
                if ((this.Table.ChildRelations["ValidKeyNames_StealthPickMap"] == null)) {
                    return new StealthPickMapRow[0];
                }
                else {
                    return ((StealthPickMapRow[])(base.GetChildRows(this.Table.ChildRelations["ValidKeyNames_StealthPickMap"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class KeyMapRow : global::System.Data.DataRow {
            
            private KeyMapDataTable tableKeyMap;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal KeyMapRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableKeyMap = ((KeyMapDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string KeyName {
                get {
                    return ((string)(this[this.tableKeyMap.KeyNameColumn]));
                }
                set {
                    this[this.tableKeyMap.KeyNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string KeyLabel {
                get {
                    return ((string)(this[this.tableKeyMap.KeyLabelColumn]));
                }
                set {
                    this[this.tableKeyMap.KeyLabelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte KeyScanCode {
                get {
                    return ((byte)(this[this.tableKeyMap.KeyScanCodeColumn]));
                }
                set {
                    this[this.tableKeyMap.KeyScanCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IRKey {
                get {
                    return ((bool)(this[this.tableKeyMap.IRKeyColumn]));
                }
                set {
                    this[this.tableKeyMap.IRKeyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ValidMacroTarget {
                get {
                    return ((bool)(this[this.tableKeyMap.ValidMacroTargetColumn]));
                }
                set {
                    this[this.tableKeyMap.ValidMacroTargetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ValidMoverTarget {
                get {
                    return ((bool)(this[this.tableKeyMap.ValidMoverTargetColumn]));
                }
                set {
                    this[this.tableKeyMap.ValidMoverTargetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ValidLearningTarget {
                get {
                    return ((bool)(this[this.tableKeyMap.ValidLearningTargetColumn]));
                }
                set {
                    this[this.tableKeyMap.ValidLearningTargetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConfiguredKey {
                get {
                    return ((bool)(this[this.tableKeyMap.IsConfiguredKeyColumn]));
                }
                set {
                    this[this.tableKeyMap.IsConfiguredKeyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSoftKey {
                get {
                    return ((bool)(this[this.tableKeyMap.IsSoftKeyColumn]));
                }
                set {
                    this[this.tableKeyMap.IsSoftKeyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsChannel {
                get {
                    return ((bool)(this[this.tableKeyMap.IsChannelColumn]));
                }
                set {
                    this[this.tableKeyMap.IsChannelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDigit {
                get {
                    return ((bool)(this[this.tableKeyMap.IsDigitColumn]));
                }
                set {
                    this[this.tableKeyMap.IsDigitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVolume {
                get {
                    return ((bool)(this[this.tableKeyMap.IsVolumeColumn]));
                }
                set {
                    this[this.tableKeyMap.IsVolumeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTransport {
                get {
                    return ((bool)(this[this.tableKeyMap.IsTransportColumn]));
                }
                set {
                    this[this.tableKeyMap.IsTransportColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActivity {
                get {
                    return ((bool)(this[this.tableKeyMap.IsActivityColumn]));
                }
                set {
                    this[this.tableKeyMap.IsActivityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSNS {
                get {
                    return ((bool)(this[this.tableKeyMap.IsSNSColumn]));
                }
                set {
                    this[this.tableKeyMap.IsSNSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMode {
                get {
                    return ((bool)(this[this.tableKeyMap.IsModeColumn]));
                }
                set {
                    this[this.tableKeyMap.IsModeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ValidKeyNamesRow ValidKeyNamesRow {
                get {
                    return ((ValidKeyNamesRow)(this.GetParentRow(this.Table.ParentRelations["ValidKeyNames_KeyMap"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ValidKeyNames_KeyMap"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ModeGroupingRow : global::System.Data.DataRow {
            
            private ModeGroupingDataTable tableModeGrouping;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ModeGroupingRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableModeGrouping = ((ModeGroupingDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ModeName {
                get {
                    return ((string)(this[this.tableModeGrouping.ModeNameColumn]));
                }
                set {
                    this[this.tableModeGrouping.ModeNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte ModeNumber {
                get {
                    return ((byte)(this[this.tableModeGrouping.ModeNumberColumn]));
                }
                set {
                    this[this.tableModeGrouping.ModeNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string KeyName {
                get {
                    return ((string)(this[this.tableModeGrouping.KeyNameColumn]));
                }
                set {
                    this[this.tableModeGrouping.KeyNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ValidKeyNamesRow ValidKeyNamesRow {
                get {
                    return ((ValidKeyNamesRow)(this.GetParentRow(this.Table.ParentRelations["ValidKeyNames_ModeGrouping"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ValidKeyNames_ModeGrouping"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GeneralInformationRow : global::System.Data.DataRow {
            
            private GeneralInformationDataTable tableGeneralInformation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GeneralInformationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGeneralInformation = ((GeneralInformationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProductID {
                get {
                    return ((string)(this[this.tableGeneralInformation.ProductIDColumn]));
                }
                set {
                    this[this.tableGeneralInformation.ProductIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SWVersion {
                get {
                    return ((string)(this[this.tableGeneralInformation.SWVersionColumn]));
                }
                set {
                    this[this.tableGeneralInformation.SWVersionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ushort MemoryAddressing {
                get {
                    return ((ushort)(this[this.tableGeneralInformation.MemoryAddressingColumn]));
                }
                set {
                    this[this.tableGeneralInformation.MemoryAddressingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ushort DataSectorSize {
                get {
                    return ((ushort)(this[this.tableGeneralInformation.DataSectorSizeColumn]));
                }
                set {
                    this[this.tableGeneralInformation.DataSectorSizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ushort UserSetupBeg {
                get {
                    return ((ushort)(this[this.tableGeneralInformation.UserSetupBegColumn]));
                }
                set {
                    this[this.tableGeneralInformation.UserSetupBegColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ushort UserSetupEnd {
                get {
                    return ((ushort)(this[this.tableGeneralInformation.UserSetupEndColumn]));
                }
                set {
                    this[this.tableGeneralInformation.UserSetupEndColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ushort TempBufferBeg {
                get {
                    return ((ushort)(this[this.tableGeneralInformation.TempBufferBegColumn]));
                }
                set {
                    this[this.tableGeneralInformation.TempBufferBegColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ushort TempBufferEnd {
                get {
                    return ((ushort)(this[this.tableGeneralInformation.TempBufferEndColumn]));
                }
                set {
                    this[this.tableGeneralInformation.TempBufferEndColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DeviceGroupingRow : global::System.Data.DataRow {
            
            private DeviceGroupingDataTable tableDeviceGrouping;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DeviceGroupingRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDeviceGrouping = ((DeviceGroupingDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DeviceDescription {
                get {
                    return ((string)(this[this.tableDeviceGrouping.DeviceDescriptionColumn]));
                }
                set {
                    this[this.tableDeviceGrouping.DeviceDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DeviceAsciiCode {
                get {
                    return ((string)(this[this.tableDeviceGrouping.DeviceAsciiCodeColumn]));
                }
                set {
                    this[this.tableDeviceGrouping.DeviceAsciiCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte DeviceTypeIDNum {
                get {
                    return ((byte)(this[this.tableDeviceGrouping.DeviceTypeIDNumColumn]));
                }
                set {
                    this[this.tableDeviceGrouping.DeviceTypeIDNumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StealthPickMapRow[] GetStealthPickMapRows() {
                if ((this.Table.ChildRelations["DeviceGrouping_StealthPickMap"] == null)) {
                    return new StealthPickMapRow[0];
                }
                else {
                    return ((StealthPickMapRow[])(base.GetChildRows(this.Table.ChildRelations["DeviceGrouping_StealthPickMap"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FeatureSettings_NumericRow : global::System.Data.DataRow {
            
            private FeatureSettings_NumericDataTable tableFeatureSettings_Numeric;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FeatureSettings_NumericRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFeatureSettings_Numeric = ((FeatureSettings_NumericDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RecordType {
                get {
                    return ((string)(this[this.tableFeatureSettings_Numeric.RecordTypeColumn]));
                }
                set {
                    this[this.tableFeatureSettings_Numeric.RecordTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Parameter {
                get {
                    return ((string)(this[this.tableFeatureSettings_Numeric.ParameterColumn]));
                }
                set {
                    this[this.tableFeatureSettings_Numeric.ParameterColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte Value {
                get {
                    return ((byte)(this[this.tableFeatureSettings_Numeric.ValueColumn]));
                }
                set {
                    this[this.tableFeatureSettings_Numeric.ValueColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RecordTypesSupportedRow : global::System.Data.DataRow {
            
            private RecordTypesSupportedDataTable tableRecordTypesSupported;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RecordTypesSupportedRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRecordTypesSupported = ((RecordTypesSupportedDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RecordType {
                get {
                    return ((string)(this[this.tableRecordTypesSupported.RecordTypeColumn]));
                }
                set {
                    this[this.tableRecordTypesSupported.RecordTypeColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class StealthPickMapRow : global::System.Data.DataRow {
            
            private StealthPickMapDataTable tableStealthPickMap;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StealthPickMapRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableStealthPickMap = ((StealthPickMapDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string KeyName {
                get {
                    return ((string)(this[this.tableStealthPickMap.KeyNameColumn]));
                }
                set {
                    this[this.tableStealthPickMap.KeyNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte DeviceTypeIDNum {
                get {
                    return ((byte)(this[this.tableStealthPickMap.DeviceTypeIDNumColumn]));
                }
                set {
                    this[this.tableStealthPickMap.DeviceTypeIDNumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ValidKeyNamesRow ValidKeyNamesRow {
                get {
                    return ((ValidKeyNamesRow)(this.GetParentRow(this.Table.ParentRelations["ValidKeyNames_StealthPickMap"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ValidKeyNames_StealthPickMap"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeviceGroupingRow DeviceGroupingRow {
                get {
                    return ((DeviceGroupingRow)(this.GetParentRow(this.Table.ParentRelations["DeviceGrouping_StealthPickMap"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["DeviceGrouping_StealthPickMap"]);
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ValidKeyNamesRowChangeEvent : global::System.EventArgs {
            
            private ValidKeyNamesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ValidKeyNamesRowChangeEvent(ValidKeyNamesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ValidKeyNamesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class KeyMapRowChangeEvent : global::System.EventArgs {
            
            private KeyMapRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KeyMapRowChangeEvent(KeyMapRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KeyMapRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ModeGroupingRowChangeEvent : global::System.EventArgs {
            
            private ModeGroupingRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModeGroupingRowChangeEvent(ModeGroupingRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModeGroupingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GeneralInformationRowChangeEvent : global::System.EventArgs {
            
            private GeneralInformationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GeneralInformationRowChangeEvent(GeneralInformationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GeneralInformationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DeviceGroupingRowChangeEvent : global::System.EventArgs {
            
            private DeviceGroupingRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeviceGroupingRowChangeEvent(DeviceGroupingRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeviceGroupingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FeatureSettings_NumericRowChangeEvent : global::System.EventArgs {
            
            private FeatureSettings_NumericRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FeatureSettings_NumericRowChangeEvent(FeatureSettings_NumericRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FeatureSettings_NumericRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RecordTypesSupportedRowChangeEvent : global::System.EventArgs {
            
            private RecordTypesSupportedRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecordTypesSupportedRowChangeEvent(RecordTypesSupportedRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecordTypesSupportedRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class StealthPickMapRowChangeEvent : global::System.EventArgs {
            
            private StealthPickMapRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StealthPickMapRowChangeEvent(StealthPickMapRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StealthPickMapRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591