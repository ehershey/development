//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.832
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace DeviceImagesEditTest {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("DeviceImagesDS")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DeviceImagesDS : System.Data.DataSet {
        
        private KeysDataTable tableKeys;
        
        private DevicesDataTable tableDevices;
        
        private ExecutorsDataTable tableExecutors;
        
        private KeyIRsDataTable tableKeyIRs;
        
        private ModesDataTable tableModes;
        
        private System.Data.DataRelation relationKeysToKeysIR;
        
        private System.Data.DataRelation relationDevicesToExecutors;
        
        private System.Data.DataRelation relationDevices_Keys;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DeviceImagesDS() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DeviceImagesDS(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Keys"] != null)) {
                    base.Tables.Add(new KeysDataTable(ds.Tables["Keys"]));
                }
                if ((ds.Tables["Devices"] != null)) {
                    base.Tables.Add(new DevicesDataTable(ds.Tables["Devices"]));
                }
                if ((ds.Tables["Executors"] != null)) {
                    base.Tables.Add(new ExecutorsDataTable(ds.Tables["Executors"]));
                }
                if ((ds.Tables["KeyIRs"] != null)) {
                    base.Tables.Add(new KeyIRsDataTable(ds.Tables["KeyIRs"]));
                }
                if ((ds.Tables["Modes"] != null)) {
                    base.Tables.Add(new ModesDataTable(ds.Tables["Modes"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public KeysDataTable Keys {
            get {
                return this.tableKeys;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DevicesDataTable Devices {
            get {
                return this.tableDevices;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ExecutorsDataTable Executors {
            get {
                return this.tableExecutors;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public KeyIRsDataTable KeyIRs {
            get {
                return this.tableKeyIRs;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ModesDataTable Modes {
            get {
                return this.tableModes;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            DeviceImagesDS cln = ((DeviceImagesDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Keys"] != null)) {
                    base.Tables.Add(new KeysDataTable(ds.Tables["Keys"]));
                }
                if ((ds.Tables["Devices"] != null)) {
                    base.Tables.Add(new DevicesDataTable(ds.Tables["Devices"]));
                }
                if ((ds.Tables["Executors"] != null)) {
                    base.Tables.Add(new ExecutorsDataTable(ds.Tables["Executors"]));
                }
                if ((ds.Tables["KeyIRs"] != null)) {
                    base.Tables.Add(new KeyIRsDataTable(ds.Tables["KeyIRs"]));
                }
                if ((ds.Tables["Modes"] != null)) {
                    base.Tables.Add(new ModesDataTable(ds.Tables["Modes"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableKeys = ((KeysDataTable)(base.Tables["Keys"]));
            if ((initTable == true)) {
                if ((this.tableKeys != null)) {
                    this.tableKeys.InitVars();
                }
            }
            this.tableDevices = ((DevicesDataTable)(base.Tables["Devices"]));
            if ((initTable == true)) {
                if ((this.tableDevices != null)) {
                    this.tableDevices.InitVars();
                }
            }
            this.tableExecutors = ((ExecutorsDataTable)(base.Tables["Executors"]));
            if ((initTable == true)) {
                if ((this.tableExecutors != null)) {
                    this.tableExecutors.InitVars();
                }
            }
            this.tableKeyIRs = ((KeyIRsDataTable)(base.Tables["KeyIRs"]));
            if ((initTable == true)) {
                if ((this.tableKeyIRs != null)) {
                    this.tableKeyIRs.InitVars();
                }
            }
            this.tableModes = ((ModesDataTable)(base.Tables["Modes"]));
            if ((initTable == true)) {
                if ((this.tableModes != null)) {
                    this.tableModes.InitVars();
                }
            }
            this.relationKeysToKeysIR = this.Relations["KeysToKeysIR"];
            this.relationDevicesToExecutors = this.Relations["DevicesToExecutors"];
            this.relationDevices_Keys = this.Relations["Devices_Keys"];
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DeviceImagesDS";
            this.Prefix = "";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableKeys = new KeysDataTable();
            base.Tables.Add(this.tableKeys);
            this.tableDevices = new DevicesDataTable();
            base.Tables.Add(this.tableDevices);
            this.tableExecutors = new ExecutorsDataTable();
            base.Tables.Add(this.tableExecutors);
            this.tableKeyIRs = new KeyIRsDataTable();
            base.Tables.Add(this.tableKeyIRs);
            this.tableModes = new ModesDataTable();
            base.Tables.Add(this.tableModes);
            this.relationKeysToKeysIR = new System.Data.DataRelation("KeysToKeysIR", new System.Data.DataColumn[] {
                        this.tableKeys.Key_fkColumn}, new System.Data.DataColumn[] {
                        this.tableKeyIRs.Key_fkColumn}, false);
            this.Relations.Add(this.relationKeysToKeysIR);
            this.relationDevicesToExecutors = new System.Data.DataRelation("DevicesToExecutors", new System.Data.DataColumn[] {
                        this.tableDevices.Executor_fkColumn}, new System.Data.DataColumn[] {
                        this.tableExecutors.Executor_fkColumn}, false);
            this.Relations.Add(this.relationDevicesToExecutors);
            this.relationDevices_Keys = new System.Data.DataRelation("Devices_Keys", new System.Data.DataColumn[] {
                        this.tableDevices.DBDevTypeColumn,
                        this.tableDevices.DBDevIDColumn}, new System.Data.DataColumn[] {
                        this.tableKeys.DBDevTypeColumn,
                        this.tableKeys.DBDevIDColumn}, false);
            this.Relations.Add(this.relationDevices_Keys);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeKeys() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDevices() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeExecutors() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeKeyIRs() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeModes() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            DeviceImagesDS ds = new DeviceImagesDS();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void KeysRowChangeEventHandler(object sender, KeysRowChangeEvent e);
        
        public delegate void DevicesRowChangeEventHandler(object sender, DevicesRowChangeEvent e);
        
        public delegate void ExecutorsRowChangeEventHandler(object sender, ExecutorsRowChangeEvent e);
        
        public delegate void KeyIRsRowChangeEventHandler(object sender, KeyIRsRowChangeEvent e);
        
        public delegate void ModesRowChangeEventHandler(object sender, ModesRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class KeysDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnDBDevType;
            
            private System.Data.DataColumn columnDBDevID;
            
            private System.Data.DataColumn columnMode;
            
            private System.Data.DataColumn columnKeyCd;
            
            private System.Data.DataColumn columnOutRon;
            
            private System.Data.DataColumn columnKey_fk;
            
            private System.Data.DataColumn columnActive;
            
            private System.Data.DataColumn columnUserLocked;
            
            private System.Data.DataColumn columnServiceLocked;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KeysDataTable() {
                this.TableName = "Keys";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal KeysDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected KeysDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DBDevTypeColumn {
                get {
                    return this.columnDBDevType;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DBDevIDColumn {
                get {
                    return this.columnDBDevID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ModeColumn {
                get {
                    return this.columnMode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn KeyCdColumn {
                get {
                    return this.columnKeyCd;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OutRonColumn {
                get {
                    return this.columnOutRon;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Key_fkColumn {
                get {
                    return this.columnKey_fk;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ActiveColumn {
                get {
                    return this.columnActive;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UserLockedColumn {
                get {
                    return this.columnUserLocked;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ServiceLockedColumn {
                get {
                    return this.columnServiceLocked;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KeysRow this[int index] {
                get {
                    return ((KeysRow)(this.Rows[index]));
                }
            }
            
            public event KeysRowChangeEventHandler KeysRowChanging;
            
            public event KeysRowChangeEventHandler KeysRowChanged;
            
            public event KeysRowChangeEventHandler KeysRowDeleting;
            
            public event KeysRowChangeEventHandler KeysRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddKeysRow(KeysRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KeysRow AddKeysRow(byte DBDevType, ushort DBDevID, byte Mode, byte KeyCd, ushort OutRon, bool Active, bool UserLocked, bool ServiceLocked) {
                KeysRow rowKeysRow = ((KeysRow)(this.NewRow()));
                rowKeysRow.ItemArray = new object[] {
                        DBDevType,
                        DBDevID,
                        Mode,
                        KeyCd,
                        OutRon,
                        null,
                        Active,
                        UserLocked,
                        ServiceLocked};
                this.Rows.Add(rowKeysRow);
                return rowKeysRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KeysRow FindByDBDevTypeDBDevIDKeyCd(byte DBDevType, ushort DBDevID, byte KeyCd) {
                return ((KeysRow)(this.Rows.Find(new object[] {
                            DBDevType,
                            DBDevID,
                            KeyCd})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                KeysDataTable cln = ((KeysDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new KeysDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDBDevType = base.Columns["DBDevType"];
                this.columnDBDevID = base.Columns["DBDevID"];
                this.columnMode = base.Columns["Mode"];
                this.columnKeyCd = base.Columns["KeyCd"];
                this.columnOutRon = base.Columns["OutRon"];
                this.columnKey_fk = base.Columns["Key_fk"];
                this.columnActive = base.Columns["Active"];
                this.columnUserLocked = base.Columns["UserLocked"];
                this.columnServiceLocked = base.Columns["ServiceLocked"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDBDevType = new System.Data.DataColumn("DBDevType", typeof(byte), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDBDevType);
                this.columnDBDevID = new System.Data.DataColumn("DBDevID", typeof(ushort), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDBDevID);
                this.columnMode = new System.Data.DataColumn("Mode", typeof(byte), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnMode);
                this.columnKeyCd = new System.Data.DataColumn("KeyCd", typeof(byte), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnKeyCd);
                this.columnOutRon = new System.Data.DataColumn("OutRon", typeof(ushort), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnOutRon);
                this.columnKey_fk = new System.Data.DataColumn("Key_fk", typeof(int), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnKey_fk);
                this.columnActive = new System.Data.DataColumn("Active", typeof(bool), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnActive);
                this.columnUserLocked = new System.Data.DataColumn("UserLocked", typeof(bool), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnUserLocked);
                this.columnServiceLocked = new System.Data.DataColumn("ServiceLocked", typeof(bool), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnServiceLocked);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnDBDevType,
                                this.columnDBDevID,
                                this.columnKeyCd}, true));
                this.columnDBDevType.AllowDBNull = false;
                this.columnDBDevType.Namespace = "";
                this.columnDBDevType.DefaultValue = ((byte)(0));
                this.columnDBDevID.AllowDBNull = false;
                this.columnDBDevID.Namespace = "";
                this.columnDBDevID.DefaultValue = ((ushort)(0));
                this.columnMode.AllowDBNull = false;
                this.columnMode.Namespace = "";
                this.columnMode.DefaultValue = ((byte)(0));
                this.columnKeyCd.AllowDBNull = false;
                this.columnKeyCd.Namespace = "";
                this.columnKeyCd.DefaultValue = ((byte)(0));
                this.columnOutRon.AllowDBNull = false;
                this.columnOutRon.Namespace = "";
                this.columnOutRon.DefaultValue = ((ushort)(0));
                this.columnKey_fk.AutoIncrement = true;
                this.columnKey_fk.AutoIncrementSeed = 1;
                this.columnKey_fk.AllowDBNull = false;
                this.columnKey_fk.Namespace = "";
                this.columnActive.AllowDBNull = false;
                this.columnActive.Namespace = "";
                this.columnActive.DefaultValue = ((bool)(false));
                this.columnUserLocked.AllowDBNull = false;
                this.columnUserLocked.Namespace = "";
                this.columnUserLocked.DefaultValue = ((bool)(false));
                this.columnServiceLocked.AllowDBNull = false;
                this.columnServiceLocked.Namespace = "";
                this.columnServiceLocked.DefaultValue = ((bool)(false));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KeysRow NewKeysRow() {
                return ((KeysRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new KeysRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(KeysRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.KeysRowChanged != null)) {
                    this.KeysRowChanged(this, new KeysRowChangeEvent(((KeysRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.KeysRowChanging != null)) {
                    this.KeysRowChanging(this, new KeysRowChangeEvent(((KeysRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.KeysRowDeleted != null)) {
                    this.KeysRowDeleted(this, new KeysRowChangeEvent(((KeysRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.KeysRowDeleting != null)) {
                    this.KeysRowDeleting(this, new KeysRowChangeEvent(((KeysRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveKeysRow(KeysRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DeviceImagesDS ds = new DeviceImagesDS();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "KeysDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DevicesDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnDBDevType;
            
            private System.Data.DataColumn columnDBDevID;
            
            private System.Data.DataColumn columnModeNumber;
            
            private System.Data.DataColumn columnExecutorNumber;
            
            private System.Data.DataColumn columnExecutor_fk;
            
            private System.Data.DataColumn columnActive;
            
            private System.Data.DataColumn columnUserLocked;
            
            private System.Data.DataColumn columnServiceLocked;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DevicesDataTable() {
                this.TableName = "Devices";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DevicesDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DevicesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DBDevTypeColumn {
                get {
                    return this.columnDBDevType;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DBDevIDColumn {
                get {
                    return this.columnDBDevID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ModeNumberColumn {
                get {
                    return this.columnModeNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ExecutorNumberColumn {
                get {
                    return this.columnExecutorNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Executor_fkColumn {
                get {
                    return this.columnExecutor_fk;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ActiveColumn {
                get {
                    return this.columnActive;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UserLockedColumn {
                get {
                    return this.columnUserLocked;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ServiceLockedColumn {
                get {
                    return this.columnServiceLocked;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DevicesRow this[int index] {
                get {
                    return ((DevicesRow)(this.Rows[index]));
                }
            }
            
            public event DevicesRowChangeEventHandler DevicesRowChanging;
            
            public event DevicesRowChangeEventHandler DevicesRowChanged;
            
            public event DevicesRowChangeEventHandler DevicesRowDeleting;
            
            public event DevicesRowChangeEventHandler DevicesRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDevicesRow(DevicesRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DevicesRow AddDevicesRow(byte DBDevType, ushort DBDevID, byte ModeNumber, ushort ExecutorNumber, bool Active, bool UserLocked, bool ServiceLocked) {
                DevicesRow rowDevicesRow = ((DevicesRow)(this.NewRow()));
                rowDevicesRow.ItemArray = new object[] {
                        DBDevType,
                        DBDevID,
                        ModeNumber,
                        ExecutorNumber,
                        null,
                        Active,
                        UserLocked,
                        ServiceLocked};
                this.Rows.Add(rowDevicesRow);
                return rowDevicesRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DevicesRow FindByDBDevTypeDBDevID(byte DBDevType, ushort DBDevID) {
                return ((DevicesRow)(this.Rows.Find(new object[] {
                            DBDevType,
                            DBDevID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                DevicesDataTable cln = ((DevicesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new DevicesDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDBDevType = base.Columns["DBDevType"];
                this.columnDBDevID = base.Columns["DBDevID"];
                this.columnModeNumber = base.Columns["ModeNumber"];
                this.columnExecutorNumber = base.Columns["ExecutorNumber"];
                this.columnExecutor_fk = base.Columns["Executor_fk"];
                this.columnActive = base.Columns["Active"];
                this.columnUserLocked = base.Columns["UserLocked"];
                this.columnServiceLocked = base.Columns["ServiceLocked"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDBDevType = new System.Data.DataColumn("DBDevType", typeof(byte), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDBDevType);
                this.columnDBDevID = new System.Data.DataColumn("DBDevID", typeof(ushort), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDBDevID);
                this.columnModeNumber = new System.Data.DataColumn("ModeNumber", typeof(byte), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnModeNumber);
                this.columnExecutorNumber = new System.Data.DataColumn("ExecutorNumber", typeof(ushort), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnExecutorNumber);
                this.columnExecutor_fk = new System.Data.DataColumn("Executor_fk", typeof(int), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnExecutor_fk);
                this.columnActive = new System.Data.DataColumn("Active", typeof(bool), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnActive);
                this.columnUserLocked = new System.Data.DataColumn("UserLocked", typeof(bool), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnUserLocked);
                this.columnServiceLocked = new System.Data.DataColumn("ServiceLocked", typeof(bool), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnServiceLocked);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnDBDevType,
                                this.columnDBDevID}, true));
                this.columnDBDevType.AllowDBNull = false;
                this.columnDBDevType.Namespace = "";
                this.columnDBDevType.DefaultValue = ((byte)(0));
                this.columnDBDevID.AllowDBNull = false;
                this.columnDBDevID.Namespace = "";
                this.columnDBDevID.DefaultValue = ((ushort)(0));
                this.columnModeNumber.AllowDBNull = false;
                this.columnModeNumber.Namespace = "";
                this.columnModeNumber.DefaultValue = ((byte)(0));
                this.columnExecutorNumber.AllowDBNull = false;
                this.columnExecutorNumber.Namespace = "";
                this.columnExecutorNumber.DefaultValue = ((ushort)(0));
                this.columnExecutor_fk.AutoIncrement = true;
                this.columnExecutor_fk.AutoIncrementSeed = 1;
                this.columnExecutor_fk.AllowDBNull = false;
                this.columnExecutor_fk.Namespace = "";
                this.columnActive.AllowDBNull = false;
                this.columnActive.Namespace = "";
                this.columnActive.DefaultValue = ((bool)(false));
                this.columnUserLocked.AllowDBNull = false;
                this.columnUserLocked.Namespace = "";
                this.columnUserLocked.DefaultValue = ((bool)(false));
                this.columnServiceLocked.AllowDBNull = false;
                this.columnServiceLocked.Namespace = "";
                this.columnServiceLocked.DefaultValue = ((bool)(false));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DevicesRow NewDevicesRow() {
                return ((DevicesRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new DevicesRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(DevicesRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DevicesRowChanged != null)) {
                    this.DevicesRowChanged(this, new DevicesRowChangeEvent(((DevicesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DevicesRowChanging != null)) {
                    this.DevicesRowChanging(this, new DevicesRowChangeEvent(((DevicesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DevicesRowDeleted != null)) {
                    this.DevicesRowDeleted(this, new DevicesRowChangeEvent(((DevicesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DevicesRowDeleting != null)) {
                    this.DevicesRowDeleting(this, new DevicesRowChangeEvent(((DevicesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDevicesRow(DevicesRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DeviceImagesDS ds = new DeviceImagesDS();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DevicesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ExecutorsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnExecutorCode;
            
            private System.Data.DataColumn columnExecutor_fk;
            
            private System.Data.DataColumn columnCodeOrder;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExecutorsDataTable() {
                this.TableName = "Executors";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ExecutorsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ExecutorsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ExecutorCodeColumn {
                get {
                    return this.columnExecutorCode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Executor_fkColumn {
                get {
                    return this.columnExecutor_fk;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CodeOrderColumn {
                get {
                    return this.columnCodeOrder;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExecutorsRow this[int index] {
                get {
                    return ((ExecutorsRow)(this.Rows[index]));
                }
            }
            
            public event ExecutorsRowChangeEventHandler ExecutorsRowChanging;
            
            public event ExecutorsRowChangeEventHandler ExecutorsRowChanged;
            
            public event ExecutorsRowChangeEventHandler ExecutorsRowDeleting;
            
            public event ExecutorsRowChangeEventHandler ExecutorsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddExecutorsRow(ExecutorsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExecutorsRow AddExecutorsRow(ushort ExecutorCode, DevicesRow parentDevicesRowByDevicesToExecutors) {
                ExecutorsRow rowExecutorsRow = ((ExecutorsRow)(this.NewRow()));
                rowExecutorsRow.ItemArray = new object[] {
                        ExecutorCode,
                        parentDevicesRowByDevicesToExecutors[4],
                        null};
                this.Rows.Add(rowExecutorsRow);
                return rowExecutorsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ExecutorsDataTable cln = ((ExecutorsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ExecutorsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnExecutorCode = base.Columns["ExecutorCode"];
                this.columnExecutor_fk = base.Columns["Executor_fk"];
                this.columnCodeOrder = base.Columns["CodeOrder"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnExecutorCode = new System.Data.DataColumn("ExecutorCode", typeof(ushort), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnExecutorCode);
                this.columnExecutor_fk = new System.Data.DataColumn("Executor_fk", typeof(int), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnExecutor_fk);
                this.columnCodeOrder = new System.Data.DataColumn("CodeOrder", typeof(int), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnCodeOrder);
                this.columnExecutorCode.AllowDBNull = false;
                this.columnExecutorCode.Namespace = "";
                this.columnExecutor_fk.AllowDBNull = false;
                this.columnExecutor_fk.Namespace = "";
                this.columnCodeOrder.AutoIncrement = true;
                this.columnCodeOrder.AutoIncrementSeed = 1;
                this.columnCodeOrder.AllowDBNull = false;
                this.columnCodeOrder.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExecutorsRow NewExecutorsRow() {
                return ((ExecutorsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ExecutorsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ExecutorsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ExecutorsRowChanged != null)) {
                    this.ExecutorsRowChanged(this, new ExecutorsRowChangeEvent(((ExecutorsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ExecutorsRowChanging != null)) {
                    this.ExecutorsRowChanging(this, new ExecutorsRowChangeEvent(((ExecutorsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ExecutorsRowDeleted != null)) {
                    this.ExecutorsRowDeleted(this, new ExecutorsRowChangeEvent(((ExecutorsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ExecutorsRowDeleting != null)) {
                    this.ExecutorsRowDeleting(this, new ExecutorsRowChangeEvent(((ExecutorsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveExecutorsRow(ExecutorsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DeviceImagesDS ds = new DeviceImagesDS();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ExecutorsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class KeyIRsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnKeyIRCode;
            
            private System.Data.DataColumn columnKey_fk;
            
            private System.Data.DataColumn columnCodeOrder;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KeyIRsDataTable() {
                this.TableName = "KeyIRs";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal KeyIRsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected KeyIRsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn KeyIRCodeColumn {
                get {
                    return this.columnKeyIRCode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Key_fkColumn {
                get {
                    return this.columnKey_fk;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CodeOrderColumn {
                get {
                    return this.columnCodeOrder;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KeyIRsRow this[int index] {
                get {
                    return ((KeyIRsRow)(this.Rows[index]));
                }
            }
            
            public event KeyIRsRowChangeEventHandler KeyIRsRowChanging;
            
            public event KeyIRsRowChangeEventHandler KeyIRsRowChanged;
            
            public event KeyIRsRowChangeEventHandler KeyIRsRowDeleting;
            
            public event KeyIRsRowChangeEventHandler KeyIRsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddKeyIRsRow(KeyIRsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KeyIRsRow AddKeyIRsRow(ushort KeyIRCode, KeysRow parentKeysRowByKeysToKeysIR) {
                KeyIRsRow rowKeyIRsRow = ((KeyIRsRow)(this.NewRow()));
                rowKeyIRsRow.ItemArray = new object[] {
                        KeyIRCode,
                        parentKeysRowByKeysToKeysIR[5],
                        null};
                this.Rows.Add(rowKeyIRsRow);
                return rowKeyIRsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                KeyIRsDataTable cln = ((KeyIRsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new KeyIRsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnKeyIRCode = base.Columns["KeyIRCode"];
                this.columnKey_fk = base.Columns["Key_fk"];
                this.columnCodeOrder = base.Columns["CodeOrder"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnKeyIRCode = new System.Data.DataColumn("KeyIRCode", typeof(ushort), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnKeyIRCode);
                this.columnKey_fk = new System.Data.DataColumn("Key_fk", typeof(int), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnKey_fk);
                this.columnCodeOrder = new System.Data.DataColumn("CodeOrder", typeof(int), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnCodeOrder);
                this.columnKeyIRCode.AllowDBNull = false;
                this.columnKeyIRCode.Namespace = "";
                this.columnKey_fk.AllowDBNull = false;
                this.columnKey_fk.Namespace = "";
                this.columnCodeOrder.AutoIncrement = true;
                this.columnCodeOrder.AutoIncrementSeed = 1;
                this.columnCodeOrder.AllowDBNull = false;
                this.columnCodeOrder.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KeyIRsRow NewKeyIRsRow() {
                return ((KeyIRsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new KeyIRsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(KeyIRsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.KeyIRsRowChanged != null)) {
                    this.KeyIRsRowChanged(this, new KeyIRsRowChangeEvent(((KeyIRsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.KeyIRsRowChanging != null)) {
                    this.KeyIRsRowChanging(this, new KeyIRsRowChangeEvent(((KeyIRsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.KeyIRsRowDeleted != null)) {
                    this.KeyIRsRowDeleted(this, new KeyIRsRowChangeEvent(((KeyIRsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.KeyIRsRowDeleting != null)) {
                    this.KeyIRsRowDeleting(this, new KeyIRsRowChangeEvent(((KeyIRsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveKeyIRsRow(KeyIRsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DeviceImagesDS ds = new DeviceImagesDS();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "KeyIRsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ModesDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnDBDevType;
            
            private System.Data.DataColumn columnDBDevID;
            
            private System.Data.DataColumn columnModeNumber;
            
            private System.Data.DataColumn columnKeyCd;
            
            private System.Data.DataColumn columnActive;
            
            private System.Data.DataColumn columnUserLocked;
            
            private System.Data.DataColumn columnServiceLocked;
            
            private System.Data.DataColumn columnAudioSource;
            
            private System.Data.DataColumn columnVideoSource;
            
            private System.Data.DataColumn columnChannelSource;
            
            private System.Data.DataColumn columnModeFlag;
            
            private System.Data.DataColumn columnFont;
            
            private System.Data.DataColumn columnLength;
            
            private System.Data.DataColumn columnLabel;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModesDataTable() {
                this.TableName = "Modes";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ModesDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ModesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DBDevTypeColumn {
                get {
                    return this.columnDBDevType;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DBDevIDColumn {
                get {
                    return this.columnDBDevID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ModeNumberColumn {
                get {
                    return this.columnModeNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn KeyCdColumn {
                get {
                    return this.columnKeyCd;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ActiveColumn {
                get {
                    return this.columnActive;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UserLockedColumn {
                get {
                    return this.columnUserLocked;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ServiceLockedColumn {
                get {
                    return this.columnServiceLocked;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AudioSourceColumn {
                get {
                    return this.columnAudioSource;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn VideoSourceColumn {
                get {
                    return this.columnVideoSource;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ChannelSourceColumn {
                get {
                    return this.columnChannelSource;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ModeFlagColumn {
                get {
                    return this.columnModeFlag;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FontColumn {
                get {
                    return this.columnFont;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LengthColumn {
                get {
                    return this.columnLength;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LabelColumn {
                get {
                    return this.columnLabel;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModesRow this[int index] {
                get {
                    return ((ModesRow)(this.Rows[index]));
                }
            }
            
            public event ModesRowChangeEventHandler ModesRowChanging;
            
            public event ModesRowChangeEventHandler ModesRowChanged;
            
            public event ModesRowChangeEventHandler ModesRowDeleting;
            
            public event ModesRowChangeEventHandler ModesRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddModesRow(ModesRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModesRow AddModesRow(byte DBDevType, ushort DBDevID, byte ModeNumber, byte KeyCd, bool Active, bool UserLocked, bool ServiceLocked, byte AudioSource, byte VideoSource, byte ChannelSource, byte ModeFlag, byte Font, byte Length, string Label) {
                ModesRow rowModesRow = ((ModesRow)(this.NewRow()));
                rowModesRow.ItemArray = new object[] {
                        DBDevType,
                        DBDevID,
                        ModeNumber,
                        KeyCd,
                        Active,
                        UserLocked,
                        ServiceLocked,
                        AudioSource,
                        VideoSource,
                        ChannelSource,
                        ModeFlag,
                        Font,
                        Length,
                        Label};
                this.Rows.Add(rowModesRow);
                return rowModesRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ModesDataTable cln = ((ModesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ModesDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDBDevType = base.Columns["DBDevType"];
                this.columnDBDevID = base.Columns["DBDevID"];
                this.columnModeNumber = base.Columns["ModeNumber"];
                this.columnKeyCd = base.Columns["KeyCd"];
                this.columnActive = base.Columns["Active"];
                this.columnUserLocked = base.Columns["UserLocked"];
                this.columnServiceLocked = base.Columns["ServiceLocked"];
                this.columnAudioSource = base.Columns["AudioSource"];
                this.columnVideoSource = base.Columns["VideoSource"];
                this.columnChannelSource = base.Columns["ChannelSource"];
                this.columnModeFlag = base.Columns["ModeFlag"];
                this.columnFont = base.Columns["Font"];
                this.columnLength = base.Columns["Length"];
                this.columnLabel = base.Columns["Label"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDBDevType = new System.Data.DataColumn("DBDevType", typeof(byte), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDBDevType);
                this.columnDBDevID = new System.Data.DataColumn("DBDevID", typeof(ushort), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDBDevID);
                this.columnModeNumber = new System.Data.DataColumn("ModeNumber", typeof(byte), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnModeNumber);
                this.columnKeyCd = new System.Data.DataColumn("KeyCd", typeof(byte), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnKeyCd);
                this.columnActive = new System.Data.DataColumn("Active", typeof(bool), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnActive);
                this.columnUserLocked = new System.Data.DataColumn("UserLocked", typeof(bool), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnUserLocked);
                this.columnServiceLocked = new System.Data.DataColumn("ServiceLocked", typeof(bool), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnServiceLocked);
                this.columnAudioSource = new System.Data.DataColumn("AudioSource", typeof(byte), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnAudioSource);
                this.columnVideoSource = new System.Data.DataColumn("VideoSource", typeof(byte), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnVideoSource);
                this.columnChannelSource = new System.Data.DataColumn("ChannelSource", typeof(byte), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnChannelSource);
                this.columnModeFlag = new System.Data.DataColumn("ModeFlag", typeof(byte), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnModeFlag);
                this.columnFont = new System.Data.DataColumn("Font", typeof(byte), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnFont);
                this.columnLength = new System.Data.DataColumn("Length", typeof(byte), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnLength);
                this.columnLabel = new System.Data.DataColumn("Label", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnLabel);
                this.columnDBDevType.AllowDBNull = false;
                this.columnDBDevType.Namespace = "";
                this.columnDBDevType.DefaultValue = ((byte)(0));
                this.columnDBDevID.AllowDBNull = false;
                this.columnDBDevID.Namespace = "";
                this.columnDBDevID.DefaultValue = ((ushort)(0));
                this.columnModeNumber.AllowDBNull = false;
                this.columnModeNumber.Namespace = "";
                this.columnModeNumber.DefaultValue = ((byte)(0));
                this.columnKeyCd.AllowDBNull = false;
                this.columnKeyCd.Namespace = "";
                this.columnKeyCd.DefaultValue = ((byte)(0));
                this.columnActive.AllowDBNull = false;
                this.columnActive.Namespace = "";
                this.columnActive.DefaultValue = ((bool)(false));
                this.columnUserLocked.AllowDBNull = false;
                this.columnUserLocked.Namespace = "";
                this.columnUserLocked.DefaultValue = ((bool)(false));
                this.columnServiceLocked.AllowDBNull = false;
                this.columnServiceLocked.Namespace = "";
                this.columnServiceLocked.DefaultValue = ((bool)(false));
                this.columnAudioSource.AllowDBNull = false;
                this.columnAudioSource.Namespace = "";
                this.columnAudioSource.DefaultValue = ((byte)(0));
                this.columnVideoSource.AllowDBNull = false;
                this.columnVideoSource.Namespace = "";
                this.columnVideoSource.DefaultValue = ((byte)(0));
                this.columnChannelSource.AllowDBNull = false;
                this.columnChannelSource.Namespace = "";
                this.columnChannelSource.DefaultValue = ((byte)(0));
                this.columnModeFlag.AllowDBNull = false;
                this.columnModeFlag.Namespace = "";
                this.columnModeFlag.DefaultValue = ((byte)(255));
                this.columnFont.AllowDBNull = false;
                this.columnFont.Namespace = "";
                this.columnFont.DefaultValue = ((byte)(255));
                this.columnLength.AllowDBNull = false;
                this.columnLength.Namespace = "";
                this.columnLength.DefaultValue = ((byte)(255));
                this.columnLabel.AllowDBNull = false;
                this.columnLabel.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModesRow NewModesRow() {
                return ((ModesRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ModesRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ModesRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ModesRowChanged != null)) {
                    this.ModesRowChanged(this, new ModesRowChangeEvent(((ModesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ModesRowChanging != null)) {
                    this.ModesRowChanging(this, new ModesRowChangeEvent(((ModesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ModesRowDeleted != null)) {
                    this.ModesRowDeleted(this, new ModesRowChangeEvent(((ModesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ModesRowDeleting != null)) {
                    this.ModesRowDeleting(this, new ModesRowChangeEvent(((ModesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveModesRow(ModesRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DeviceImagesDS ds = new DeviceImagesDS();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ModesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class KeysRow : System.Data.DataRow {
            
            private KeysDataTable tableKeys;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal KeysRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableKeys = ((KeysDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte DBDevType {
                get {
                    return ((byte)(this[this.tableKeys.DBDevTypeColumn]));
                }
                set {
                    this[this.tableKeys.DBDevTypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ushort DBDevID {
                get {
                    return ((ushort)(this[this.tableKeys.DBDevIDColumn]));
                }
                set {
                    this[this.tableKeys.DBDevIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte Mode {
                get {
                    return ((byte)(this[this.tableKeys.ModeColumn]));
                }
                set {
                    this[this.tableKeys.ModeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte KeyCd {
                get {
                    return ((byte)(this[this.tableKeys.KeyCdColumn]));
                }
                set {
                    this[this.tableKeys.KeyCdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ushort OutRon {
                get {
                    return ((ushort)(this[this.tableKeys.OutRonColumn]));
                }
                set {
                    this[this.tableKeys.OutRonColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Key_fk {
                get {
                    return ((int)(this[this.tableKeys.Key_fkColumn]));
                }
                set {
                    this[this.tableKeys.Key_fkColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Active {
                get {
                    return ((bool)(this[this.tableKeys.ActiveColumn]));
                }
                set {
                    this[this.tableKeys.ActiveColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool UserLocked {
                get {
                    return ((bool)(this[this.tableKeys.UserLockedColumn]));
                }
                set {
                    this[this.tableKeys.UserLockedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ServiceLocked {
                get {
                    return ((bool)(this[this.tableKeys.ServiceLockedColumn]));
                }
                set {
                    this[this.tableKeys.ServiceLockedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DevicesRow DevicesRowParent {
                get {
                    return ((DevicesRow)(this.GetParentRow(this.Table.ParentRelations["Devices_Keys"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Devices_Keys"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KeyIRsRow[] GetKeyIRsRows() {
                return ((KeyIRsRow[])(base.GetChildRows(this.Table.ChildRelations["KeysToKeysIR"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DevicesRow : System.Data.DataRow {
            
            private DevicesDataTable tableDevices;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DevicesRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDevices = ((DevicesDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte DBDevType {
                get {
                    return ((byte)(this[this.tableDevices.DBDevTypeColumn]));
                }
                set {
                    this[this.tableDevices.DBDevTypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ushort DBDevID {
                get {
                    return ((ushort)(this[this.tableDevices.DBDevIDColumn]));
                }
                set {
                    this[this.tableDevices.DBDevIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte ModeNumber {
                get {
                    return ((byte)(this[this.tableDevices.ModeNumberColumn]));
                }
                set {
                    this[this.tableDevices.ModeNumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ushort ExecutorNumber {
                get {
                    return ((ushort)(this[this.tableDevices.ExecutorNumberColumn]));
                }
                set {
                    this[this.tableDevices.ExecutorNumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Executor_fk {
                get {
                    return ((int)(this[this.tableDevices.Executor_fkColumn]));
                }
                set {
                    this[this.tableDevices.Executor_fkColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Active {
                get {
                    return ((bool)(this[this.tableDevices.ActiveColumn]));
                }
                set {
                    this[this.tableDevices.ActiveColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool UserLocked {
                get {
                    return ((bool)(this[this.tableDevices.UserLockedColumn]));
                }
                set {
                    this[this.tableDevices.UserLockedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ServiceLocked {
                get {
                    return ((bool)(this[this.tableDevices.ServiceLockedColumn]));
                }
                set {
                    this[this.tableDevices.ServiceLockedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExecutorsRow[] GetExecutorsRows() {
                return ((ExecutorsRow[])(base.GetChildRows(this.Table.ChildRelations["DevicesToExecutors"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KeysRow[] GetKeysRows() {
                return ((KeysRow[])(base.GetChildRows(this.Table.ChildRelations["Devices_Keys"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ExecutorsRow : System.Data.DataRow {
            
            private ExecutorsDataTable tableExecutors;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ExecutorsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableExecutors = ((ExecutorsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ushort ExecutorCode {
                get {
                    return ((ushort)(this[this.tableExecutors.ExecutorCodeColumn]));
                }
                set {
                    this[this.tableExecutors.ExecutorCodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Executor_fk {
                get {
                    return ((int)(this[this.tableExecutors.Executor_fkColumn]));
                }
                set {
                    this[this.tableExecutors.Executor_fkColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CodeOrder {
                get {
                    return ((int)(this[this.tableExecutors.CodeOrderColumn]));
                }
                set {
                    this[this.tableExecutors.CodeOrderColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DevicesRow DevicesRow {
                get {
                    return ((DevicesRow)(this.GetParentRow(this.Table.ParentRelations["DevicesToExecutors"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["DevicesToExecutors"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class KeyIRsRow : System.Data.DataRow {
            
            private KeyIRsDataTable tableKeyIRs;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal KeyIRsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableKeyIRs = ((KeyIRsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ushort KeyIRCode {
                get {
                    return ((ushort)(this[this.tableKeyIRs.KeyIRCodeColumn]));
                }
                set {
                    this[this.tableKeyIRs.KeyIRCodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Key_fk {
                get {
                    return ((int)(this[this.tableKeyIRs.Key_fkColumn]));
                }
                set {
                    this[this.tableKeyIRs.Key_fkColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CodeOrder {
                get {
                    return ((int)(this[this.tableKeyIRs.CodeOrderColumn]));
                }
                set {
                    this[this.tableKeyIRs.CodeOrderColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KeysRow KeysRow {
                get {
                    return ((KeysRow)(this.GetParentRow(this.Table.ParentRelations["KeysToKeysIR"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["KeysToKeysIR"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ModesRow : System.Data.DataRow {
            
            private ModesDataTable tableModes;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ModesRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableModes = ((ModesDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte DBDevType {
                get {
                    return ((byte)(this[this.tableModes.DBDevTypeColumn]));
                }
                set {
                    this[this.tableModes.DBDevTypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ushort DBDevID {
                get {
                    return ((ushort)(this[this.tableModes.DBDevIDColumn]));
                }
                set {
                    this[this.tableModes.DBDevIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte ModeNumber {
                get {
                    return ((byte)(this[this.tableModes.ModeNumberColumn]));
                }
                set {
                    this[this.tableModes.ModeNumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte KeyCd {
                get {
                    return ((byte)(this[this.tableModes.KeyCdColumn]));
                }
                set {
                    this[this.tableModes.KeyCdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Active {
                get {
                    return ((bool)(this[this.tableModes.ActiveColumn]));
                }
                set {
                    this[this.tableModes.ActiveColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool UserLocked {
                get {
                    return ((bool)(this[this.tableModes.UserLockedColumn]));
                }
                set {
                    this[this.tableModes.UserLockedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ServiceLocked {
                get {
                    return ((bool)(this[this.tableModes.ServiceLockedColumn]));
                }
                set {
                    this[this.tableModes.ServiceLockedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte AudioSource {
                get {
                    return ((byte)(this[this.tableModes.AudioSourceColumn]));
                }
                set {
                    this[this.tableModes.AudioSourceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte VideoSource {
                get {
                    return ((byte)(this[this.tableModes.VideoSourceColumn]));
                }
                set {
                    this[this.tableModes.VideoSourceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte ChannelSource {
                get {
                    return ((byte)(this[this.tableModes.ChannelSourceColumn]));
                }
                set {
                    this[this.tableModes.ChannelSourceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte ModeFlag {
                get {
                    return ((byte)(this[this.tableModes.ModeFlagColumn]));
                }
                set {
                    this[this.tableModes.ModeFlagColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte Font {
                get {
                    return ((byte)(this[this.tableModes.FontColumn]));
                }
                set {
                    this[this.tableModes.FontColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte Length {
                get {
                    return ((byte)(this[this.tableModes.LengthColumn]));
                }
                set {
                    this[this.tableModes.LengthColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Label {
                get {
                    return ((string)(this[this.tableModes.LabelColumn]));
                }
                set {
                    this[this.tableModes.LabelColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class KeysRowChangeEvent : System.EventArgs {
            
            private KeysRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KeysRowChangeEvent(KeysRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KeysRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DevicesRowChangeEvent : System.EventArgs {
            
            private DevicesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DevicesRowChangeEvent(DevicesRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DevicesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ExecutorsRowChangeEvent : System.EventArgs {
            
            private ExecutorsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExecutorsRowChangeEvent(ExecutorsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExecutorsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class KeyIRsRowChangeEvent : System.EventArgs {
            
            private KeyIRsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KeyIRsRowChangeEvent(KeyIRsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KeyIRsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ModesRowChangeEvent : System.EventArgs {
            
            private ModesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModesRowChangeEvent(ModesRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591