//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1378
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LinqTest1
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="EzWeb")]
	public partial class SimpleRetrievalDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertRemoteKeyMap(RemoteKeyMap instance);
    partial void UpdateRemoteKeyMap(RemoteKeyMap instance);
    partial void DeleteRemoteKeyMap(RemoteKeyMap instance);
    #endregion
		
		static SimpleRetrievalDataContext()
		{
		}
		
		public SimpleRetrievalDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SimpleRetrievalDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SimpleRetrievalDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SimpleRetrievalDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SimpleRetrievalDataContext() : 
				base(global::LinqTest1.Properties.Settings.Default.EzWebConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<RemoteKeyMap> RemoteKeyMaps
		{
			get
			{
				return this.GetTable<RemoteKeyMap>();
			}
		}
	}
	
	[Table(Name="dbo.RemoteKeyMaps")]
	public partial class RemoteKeyMap : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RemoteTypeID;
		
		private int _DeviceTypeID;
		
		private string _KeyName;
		
		private string _OutRonName;
		
		private int _KeyOrder;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate();
    partial void OnCreated();
    partial void OnRemoteTypeIDChanging(int value);
    partial void OnRemoteTypeIDChanged();
    partial void OnDeviceTypeIDChanging(int value);
    partial void OnDeviceTypeIDChanged();
    partial void OnKeyNameChanging(string value);
    partial void OnKeyNameChanged();
    partial void OnOutRonNameChanging(string value);
    partial void OnOutRonNameChanged();
    partial void OnKeyOrderChanging(int value);
    partial void OnKeyOrderChanged();
    #endregion
		
		public RemoteKeyMap()
		{
			OnCreated();
		}
		
		[Column(Storage="_RemoteTypeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RemoteTypeID
		{
			get
			{
				return this._RemoteTypeID;
			}
			set
			{
				if ((this._RemoteTypeID != value))
				{
					this.OnRemoteTypeIDChanging(value);
					this.SendPropertyChanging();
					this._RemoteTypeID = value;
					this.SendPropertyChanged("RemoteTypeID");
					this.OnRemoteTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_DeviceTypeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DeviceTypeID
		{
			get
			{
				return this._DeviceTypeID;
			}
			set
			{
				if ((this._DeviceTypeID != value))
				{
					this.OnDeviceTypeIDChanging(value);
					this.SendPropertyChanging();
					this._DeviceTypeID = value;
					this.SendPropertyChanged("DeviceTypeID");
					this.OnDeviceTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_KeyName", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string KeyName
		{
			get
			{
				return this._KeyName;
			}
			set
			{
				if ((this._KeyName != value))
				{
					this.OnKeyNameChanging(value);
					this.SendPropertyChanging();
					this._KeyName = value;
					this.SendPropertyChanged("KeyName");
					this.OnKeyNameChanged();
				}
			}
		}
		
		[Column(Storage="_OutRonName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string OutRonName
		{
			get
			{
				return this._OutRonName;
			}
			set
			{
				if ((this._OutRonName != value))
				{
					this.OnOutRonNameChanging(value);
					this.SendPropertyChanging();
					this._OutRonName = value;
					this.SendPropertyChanged("OutRonName");
					this.OnOutRonNameChanged();
				}
			}
		}
		
		[Column(Storage="_KeyOrder", DbType="Int NOT NULL")]
		public int KeyOrder
		{
			get
			{
				return this._KeyOrder;
			}
			set
			{
				if ((this._KeyOrder != value))
				{
					this.OnKeyOrderChanging(value);
					this.SendPropertyChanging();
					this._KeyOrder = value;
					this.SendPropertyChanged("KeyOrder");
					this.OnKeyOrderChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
